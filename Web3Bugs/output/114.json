{
    "file_path": "/home/mingyue/sub_contract_content/Web3Bugs/contracts/114/aave-v3-yield-source",
    "external_functions": [
        [
            "AaveV3YieldSource",
            "IPool",
            "IERC20",
            "IRewardsController",
            "IAToken",
            "IPoolAddressesProviderRegistry",
            "IPoolAddressesProvider"
        ]
    ],
    "new_contract": "contract AaveV3YieldSource is ERC20, IYieldSource, Manageable, ReentrancyGuard {\n  using SafeMath for uint256;\n  using SafeERC20 for IERC20;\n\n  /* ============ Events ============ */\n\n  /**\n   * @notice Emitted when the yield source is initialized.\n   * @param aToken Aave aToken address\n   * @param rewardsController Aave rewardsController address\n   * @param poolAddressesProviderRegistry Aave poolAddressesProviderRegistry address\n   * @param name Token name for the underlying ERC20 shares\n   * @param symbol Token symbol for the underlying ERC20 shares\n   * @param decimals Number of decimals the shares (inhereted ERC20) will have. Same as underlying asset to ensure sane exchange rates for shares.\n   * @param owner Owner of this contract\n   */\n  event AaveV3YieldSourceInitialized(\n    IAToken indexed aToken,\n    IRewardsController rewardsController,\n    IPoolAddressesProviderRegistry poolAddressesProviderRegistry,\n    string name,\n    string symbol,\n    uint8 decimals,\n    address owner\n  );\n\n  /**\n   * @notice Emitted when asset tokens are supplied to the yield source.\n   * @param from Address that supplied the tokens\n   * @param shares Amount of shares minted to the user\n   * @param amount Amount of tokens supplied\n   * @param to Address that received the shares\n   */\n  event SuppliedTokenTo(address indexed from, uint256 shares, uint256 amount, address indexed to);\n\n  /**\n   * @notice Emitted when asset tokens are redeemed from the yield source.\n   * @param from Address who redeemed the tokens\n   * @param shares Amount of shares burnt\n   * @param amount Amount of tokens redeemed\n   */\n  event RedeemedToken(address indexed from, uint256 shares, uint256 amount);\n\n  /**\n   * @notice Emitted when Aave rewards have been claimed.\n   * @param from Address who claimed the rewards\n   * @param to Address that received the rewards\n   * @param rewardsList List of addresses of the reward tokens\n   * @param claimedAmounts List that contains the claimed amount per reward token\n   */\n  event Claimed(\n    address indexed from,\n    address indexed to,\n    address[] rewardsList,\n    uint256[] claimedAmounts\n  );\n\n  /**\n   * @notice Emitted when decreasing allowance of ERC20 tokens other than yield source's aToken.\n   * @param from Address of the caller\n   * @param spender Address of the spender\n   * @param amount Amount of `token` to decrease allowance by\n   * @param token Address of the ERC20 token to decrease allowance for\n   */\n  event DecreasedERC20Allowance(\n    address indexed from,\n    address indexed spender,\n    uint256 amount,\n    IERC20 indexed token\n  );\n\n  /**\n   * @notice Emitted when increasing allowance of ERC20 tokens other than yield source's aToken.\n   * @param from Address of the caller\n   * @param spender Address of the spender\n   * @param amount Amount of `token` to increase allowance by\n   * @param token Address of the ERC20 token to increase allowance for\n   */\n  event IncreasedERC20Allowance(\n    address indexed from,\n    address indexed spender,\n    uint256 amount,\n    IERC20 indexed token\n  );\n\n  /**\n   * @notice Emitted when ERC20 tokens other than yield source's aToken are withdrawn from the yield source.\n   * @param from Address of the caller\n   * @param to Address of the recipient\n   * @param amount Amount of `token` transferred\n   * @param token Address of the ERC20 token transferred\n   */\n  event TransferredERC20(\n    address indexed from,\n    address indexed to,\n    uint256 amount,\n    IERC20 indexed token\n  );\n\n  /* ============ Variables ============ */\n\n  /// @notice Yield-bearing Aave aToken address.\n  IAToken public aToken;\n\n  /// @notice Aave RewardsController address.\n  IRewardsController public rewardsController;\n\n  /// @notice Aave poolAddressesProviderRegistry address.\n  IPoolAddressesProviderRegistry public poolAddressesProviderRegistry;\n\n  /// @notice ERC20 token decimals.\n  uint8 private immutable _decimals;\n\n  /**\n   * @dev Aave genesis market PoolAddressesProvider's ID.\n   * @dev This variable could evolve in the future if we decide to support other markets.\n   */\n  uint256 private constant ADDRESSES_PROVIDER_ID = uint256(0);\n\n  /// @dev PoolTogether's Aave Referral Code\n  uint16 private constant REFERRAL_CODE = uint16(188);\n\n  /* ============ Constructor ============ */\n\n  /**\n   * @notice Initializes the yield source with Aave aToken.\n   * @param _aToken Aave aToken address\n   * @param _rewardsController Aave rewardsController address\n   * @param _poolAddressesProviderRegistry Aave poolAddressesProviderRegistry address\n   * @param _name Token name for the underlying ERC20 shares\n   * @param _symbol Token symbol for the underlying ERC20 shares\n   * @param decimals_ Number of decimals the shares (inhereted ERC20) will have. Same as underlying asset to ensure sane exchange rates for shares.\n   * @param _owner Owner of this contract\n   */\n  constructor(\n    IAToken _aToken,\n    IRewardsController _rewardsController,\n    IPoolAddressesProviderRegistry _poolAddressesProviderRegistry,\n    string memory _name,\n    string memory _symbol,\n    uint8 decimals_,\n    address _owner\n  ) Ownable(_owner) ERC20(_name, _symbol) ReentrancyGuard() {\n    require(address(_aToken) != address(0), \"AaveV3YS/aToken-not-zero-address\");\n    aToken = _aToken;\n\n    require(address(_rewardsController) != address(0), \"AaveV3YS/RC-not-zero-address\");\n    rewardsController = _rewardsController;\n\n    require(address(_poolAddressesProviderRegistry) != address(0), \"AaveV3YS/PR-not-zero-address\");\n    poolAddressesProviderRegistry = _poolAddressesProviderRegistry;\n\n    require(_owner != address(0), \"AaveV3YS/owner-not-zero-address\");\n\n    require(decimals_ > 0, \"AaveV3YS/decimals-gt-zero\");\n    _decimals = decimals_;\n\n    // Approve once for max amount\n    IERC20(_tokenAddress()).safeApprove(address(_pool()), type(uint256).max);\n\n    emit AaveV3YieldSourceInitialized(\n      _aToken,\n      _rewardsController,\n      _poolAddressesProviderRegistry,\n      _name,\n      _symbol,\n      decimals_,\n      _owner\n    );\n  }\n\n  /* ============ External Functions ============ */\n\n  /**\n   * @notice Returns user total balance (in asset tokens). This includes their deposit and interest.\n   * @param _user Address of the user to get balance of token for\n   * @return The underlying balance of asset tokens.\n   */\n  function balanceOfToken(address _user) external override returns (uint256) {\n    return _sharesToToken(balanceOf(_user));\n  }\n\n  /**\n   * @notice Returns the ERC20 asset token used for deposits.\n   * @return The ERC20 asset token address.\n   */\n  function depositToken() public view override returns (address) {\n    return _tokenAddress();\n  }\n\n  /**\n   * @notice Returns the Yield Source ERC20 token decimals.\n   * @dev This value should be equal to the decimals of the token used to deposit into the pool.\n   * @return The number of decimals.\n   */\n  function decimals() public view virtual override returns (uint8) {\n    return _decimals;\n  }\n\n  /**\n   * @notice Supplies asset tokens to the yield source.\n   * @dev Shares corresponding to the number of tokens supplied are minted to the user's balance.\n   * @dev Asset tokens are supplied to the yield source, then deposited into Aave.\n   * @param _depositAmount The amount of asset tokens to be supplied\n   * @param _to The user whose balance will receive the tokens\n   */\n  function supplyTokenTo(uint256 _depositAmount, address _to) external override nonReentrant {\n    uint256 _shares = _tokenToShares(_depositAmount);\n    require(_shares > 0, \"AaveV3YS/shares-gt-zero\");\n\n    address _underlyingAssetAddress = _tokenAddress();\n    IERC20(_underlyingAssetAddress).safeTransferFrom(msg.sender, address(this), _depositAmount);\n    _pool().supply(_underlyingAssetAddress, _depositAmount, address(this), REFERRAL_CODE);\n\n    _mint(_to, _shares);\n\n    emit SuppliedTokenTo(msg.sender, _shares, _depositAmount, _to);\n  }\n\n  /**\n   * @notice Redeems asset tokens from the yield source.\n   * @dev Shares corresponding to the number of tokens withdrawn are burnt from the user's balance.\n   * @dev Asset tokens are withdrawn from Aave, then transferred from the yield source to the user's wallet.\n   * @param _redeemAmount The amount of asset tokens to be redeemed\n   * @return The actual amount of asset tokens that were redeemed.\n   */\n  function redeemToken(uint256 _redeemAmount) external override nonReentrant returns (uint256) {\n    address _underlyingAssetAddress = _tokenAddress();\n    IERC20 _assetToken = IERC20(_underlyingAssetAddress);\n\n    uint256 _shares = _tokenToShares(_redeemAmount);\n    _burn(msg.sender, _shares);\n\n    uint256 _beforeBalance = _assetToken.balanceOf(address(this));\n    _pool().withdraw(_underlyingAssetAddress, _redeemAmount, address(this));\n    uint256 _afterBalance = _assetToken.balanceOf(address(this));\n\n    uint256 _balanceDiff = _afterBalance.sub(_beforeBalance);\n    _assetToken.safeTransfer(msg.sender, _balanceDiff);\n\n    emit RedeemedToken(msg.sender, _shares, _redeemAmount);\n    return _balanceDiff;\n  }\n\n  /**\n   * @notice Claims the accrued rewards for the aToken, accumulating any pending rewards.\n   * @dev Only callable by the owner or manager.\n   * @param _to Address where the claimed rewards will be sent\n   * @return True if operation was successful.\n   */\n  function claimRewards(address _to) external onlyManagerOrOwner returns (bool) {\n    require(_to != address(0), \"AaveV3YS/payee-not-zero-address\");\n\n    address[] memory _assets = new address[](1);\n    _assets[0] = address(aToken);\n\n    (address[] memory _rewardsList, uint256[] memory _claimedAmounts) = rewardsController\n      .claimAllRewards(_assets, _to);\n\n    emit Claimed(msg.sender, _to, _rewardsList, _claimedAmounts);\n    return true;\n  }\n\n  /**\n   * @notice Decrease allowance of ERC20 tokens other than the aTokens held by this contract.\n   * @dev This function is only callable by the owner or asset manager.\n   * @dev Current allowance should be computed off-chain to avoid any underflow.\n   * @param _token Address of the ERC20 token to decrease allowance for\n   * @param _spender Address of the spender of the tokens\n   * @param _amount Amount of tokens to decrease allowance by\n   */\n  function decreaseERC20Allowance(\n    IERC20 _token,\n    address _spender,\n    uint256 _amount\n  ) external onlyManagerOrOwner {\n    _requireNotAToken(address(_token));\n    _token.safeDecreaseAllowance(_spender, _amount);\n    emit DecreasedERC20Allowance(msg.sender, _spender, _amount, _token);\n  }\n\n  /**\n   * @notice Increase allowance of ERC20 tokens other than the aTokens held by this contract.\n   * @dev This function is only callable by the owner or asset manager.\n   * @dev Allows another contract or address to withdraw funds from the yield source.\n   * @dev Current allowance should be computed off-chain to avoid any overflow.\n   * @param _token Address of the ERC20 token to increase allowance for\n   * @param _spender Address of the spender of the tokens\n   * @param _amount Amount of tokens to increase allowance by\n   */\n  function increaseERC20Allowance(\n    IERC20 _token,\n    address _spender,\n    uint256 _amount\n  ) external onlyManagerOrOwner {\n    _requireNotAToken(address(_token));\n    _token.safeIncreaseAllowance(_spender, _amount);\n    emit IncreasedERC20Allowance(msg.sender, _spender, _amount, _token);\n  }\n\n  /**\n   * @notice Transfer ERC20 tokens other than the aTokens held by this contract to the recipient address.\n   * @dev This function is only callable by the owner or asset manager.\n   * @param _token Address of the ERC20 token to transfer\n   * @param _to Address of the recipient of the tokens\n   * @param _amount Amount of tokens to transfer\n   */\n  function transferERC20(\n    IERC20 _token,\n    address _to,\n    uint256 _amount\n  ) external onlyManagerOrOwner {\n    require(address(_token) != address(aToken), \"AaveV3YS/forbid-aToken-transfer\");\n    _token.safeTransfer(_to, _amount);\n    emit TransferredERC20(msg.sender, _to, _amount, _token);\n  }\n\n  /* ============ Internal Functions ============ */\n\n  /**\n   * @notice Check that the token address passed is not the aToken address.\n   * @param _token Address of the ERC20 token to check\n   */\n  function _requireNotAToken(address _token) internal view {\n    require(_token != address(aToken), \"AaveV3YS/forbid-aToken-allowance\");\n  }\n\n  /**\n   * @notice Calculates the number of shares that should be minted or burnt when a user deposit or withdraw.\n   * @param _tokens Amount of asset tokens\n   * @return Number of shares.\n   */\n  function _tokenToShares(uint256 _tokens) internal view returns (uint256) {\n    uint256 _supply = totalSupply();\n\n    // shares = (tokens * totalShares) / yieldSourceATokenTotalSupply\n    return _supply == 0 ? _tokens : _tokens.mul(_supply).div(aToken.balanceOf(address(this)));\n  }\n\n  /**\n   * @notice Calculates the number of asset tokens a user has in the yield source.\n   * @param _shares Amount of shares\n   * @return Number of asset tokens.\n   */\n  function _sharesToToken(uint256 _shares) internal view returns (uint256) {\n    uint256 _supply = totalSupply();\n\n    // tokens = (shares * yieldSourceATokenTotalSupply) / totalShares\n    return _supply == 0 ? _shares : _shares.mul(aToken.balanceOf(address(this))).div(_supply);\n  }\n\n  /**\n   * @notice Returns the underlying asset token address.\n   * @return Underlying asset token address.\n   */\n  function _tokenAddress() internal view returns (address) {\n    return aToken.UNDERLYING_ASSET_ADDRESS();\n  }\n\n  /**\n   * @notice Retrieves Aave PoolAddressesProvider address.\n   * @return A reference to PoolAddressesProvider interface.\n   */\n  function _poolProvider() internal view returns (IPoolAddressesProvider) {\n    return\n      IPoolAddressesProvider(\n        poolAddressesProviderRegistry.getAddressesProvidersList()[ADDRESSES_PROVIDER_ID]\n      );\n  }\n\n  /**\n   * @notice Retrieves Aave Pool address.\n   * @return A reference to Pool interface.\n   */\n  function _pool() internal view returns (IPool) {\n    return IPool(_poolProvider().getPool());\n  }\n}\n",
    "bin": []
}
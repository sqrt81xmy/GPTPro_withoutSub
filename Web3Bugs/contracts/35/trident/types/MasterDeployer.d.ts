/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MasterDeployerInterface extends ethers.utils.Interface {
  functions: {
    "addToWhitelist(address)": FunctionFragment;
    "barFee()": FunctionFragment;
    "barFeeTo()": FunctionFragment;
    "bento()": FunctionFragment;
    "claimOwner()": FunctionFragment;
    "deployPool(address,bytes)": FunctionFragment;
    "migrator()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "pools(address)": FunctionFragment;
    "removeFromWhitelist(address)": FunctionFragment;
    "setBarFee(uint256)": FunctionFragment;
    "setMigrator(address)": FunctionFragment;
    "transferOwner(address,bool)": FunctionFragment;
    "whitelistedFactories(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addToWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "barFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "barFeeTo", values?: undefined): string;
  encodeFunctionData(functionFragment: "bento", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployPool",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "migrator", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pools", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeFromWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBarFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setMigrator", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwner",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedFactories",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "barFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "barFeeTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bento", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deployPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBarFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMigrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedFactories",
    data: BytesLike
  ): Result;

  events: {
    "AddToWhitelist(address)": EventFragment;
    "BarFeeUpdated(uint256)": EventFragment;
    "DeployPool(address,address,bytes)": EventFragment;
    "MigratorUpdated(address)": EventFragment;
    "RemoveFromWhitelist(address)": EventFragment;
    "TransferOwner(address,address)": EventFragment;
    "TransferOwnerClaim(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddToWhitelist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BarFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeployPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MigratorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveFromWhitelist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferOwnerClaim"): EventFragment;
}

export class MasterDeployer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MasterDeployerInterface;

  functions: {
    addToWhitelist(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    barFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    barFeeTo(overrides?: CallOverrides): Promise<[string]>;

    bento(overrides?: CallOverrides): Promise<[string]>;

    claimOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployPool(
      _factory: string,
      _deployData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migrator(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    pools(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    removeFromWhitelist(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBarFee(
      _barFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMigrator(
      _migrator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwner(
      recipient: string,
      direct: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistedFactories(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  addToWhitelist(
    _factory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  barFee(overrides?: CallOverrides): Promise<BigNumber>;

  barFeeTo(overrides?: CallOverrides): Promise<string>;

  bento(overrides?: CallOverrides): Promise<string>;

  claimOwner(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployPool(
    _factory: string,
    _deployData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migrator(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  pools(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  removeFromWhitelist(
    _factory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBarFee(
    _barFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMigrator(
    _migrator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwner(
    recipient: string,
    direct: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistedFactories(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    addToWhitelist(_factory: string, overrides?: CallOverrides): Promise<void>;

    barFee(overrides?: CallOverrides): Promise<BigNumber>;

    barFeeTo(overrides?: CallOverrides): Promise<string>;

    bento(overrides?: CallOverrides): Promise<string>;

    claimOwner(overrides?: CallOverrides): Promise<void>;

    deployPool(
      _factory: string,
      _deployData: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    migrator(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    pools(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    removeFromWhitelist(
      _factory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBarFee(_barFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setMigrator(_migrator: string, overrides?: CallOverrides): Promise<void>;

    transferOwner(
      recipient: string,
      direct: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistedFactories(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    AddToWhitelist(
      factory?: string | null
    ): TypedEventFilter<[string], { factory: string }>;

    BarFeeUpdated(
      barFee?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { barFee: BigNumber }>;

    DeployPool(
      factory?: string | null,
      pool?: string | null,
      deployData?: null
    ): TypedEventFilter<
      [string, string, string],
      { factory: string; pool: string; deployData: string }
    >;

    MigratorUpdated(
      migrator?: string | null
    ): TypedEventFilter<[string], { migrator: string }>;

    RemoveFromWhitelist(
      factory?: string | null
    ): TypedEventFilter<[string], { factory: string }>;

    TransferOwner(
      sender?: string | null,
      recipient?: string | null
    ): TypedEventFilter<
      [string, string],
      { sender: string; recipient: string }
    >;

    TransferOwnerClaim(
      sender?: string | null,
      recipient?: string | null
    ): TypedEventFilter<
      [string, string],
      { sender: string; recipient: string }
    >;
  };

  estimateGas: {
    addToWhitelist(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    barFee(overrides?: CallOverrides): Promise<BigNumber>;

    barFeeTo(overrides?: CallOverrides): Promise<BigNumber>;

    bento(overrides?: CallOverrides): Promise<BigNumber>;

    claimOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployPool(
      _factory: string,
      _deployData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migrator(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    pools(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    removeFromWhitelist(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBarFee(
      _barFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMigrator(
      _migrator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwner(
      recipient: string,
      direct: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistedFactories(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addToWhitelist(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    barFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    barFeeTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bento(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployPool(
      _factory: string,
      _deployData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migrator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeFromWhitelist(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBarFee(
      _barFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMigrator(
      _migrator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwner(
      recipient: string,
      direct: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistedFactories(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

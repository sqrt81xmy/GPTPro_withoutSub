/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ConcentratedLiquidityPoolInterface extends ethers.utils.Interface {
  functions: {
    "barFee()": FunctionFragment;
    "burn(bytes)": FunctionFragment;
    "burnSingle(bytes)": FunctionFragment;
    "collect(int24,int24,address,bool)": FunctionFragment;
    "collectProtocolFee()": FunctionFragment;
    "feeGrowthGlobal0()": FunctionFragment;
    "feeGrowthGlobal1()": FunctionFragment;
    "flashSwap(bytes)": FunctionFragment;
    "getAmountOut(bytes)": FunctionFragment;
    "getAssets()": FunctionFragment;
    "getImmutables()": FunctionFragment;
    "getLiquidityAndLastObservation()": FunctionFragment;
    "getPriceAndNearestTicks()": FunctionFragment;
    "getReserves()": FunctionFragment;
    "getTokenProtocolFees()": FunctionFragment;
    "liquidity()": FunctionFragment;
    "mint(bytes)": FunctionFragment;
    "poolIdentifier()": FunctionFragment;
    "positions(address,int24,int24)": FunctionFragment;
    "rangeFeeGrowth(int24,int24)": FunctionFragment;
    "rangeSecondsInside(int24,int24)": FunctionFragment;
    "swap(bytes)": FunctionFragment;
    "ticks(int24)": FunctionFragment;
    "updateBarFee()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "barFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "burn", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "burnSingle",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collect",
    values: [BigNumberish, BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "collectProtocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeGrowthGlobal0",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeGrowthGlobal1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "flashSwap",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOut",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getAssets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getImmutables",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityAndLastObservation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceAndNearestTicks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenProtocolFees",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "liquidity", values?: undefined): string;
  encodeFunctionData(functionFragment: "mint", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "poolIdentifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rangeFeeGrowth",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rangeSecondsInside",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "swap", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "ticks", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "updateBarFee",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "barFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnSingle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeGrowthGlobal0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeGrowthGlobal1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "flashSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAssets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getImmutables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityAndLastObservation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceAndNearestTicks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenProtocolFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolIdentifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rangeFeeGrowth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rangeSecondsInside",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ticks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateBarFee",
    data: BytesLike
  ): Result;

  events: {
    "Burn(address,uint256,uint256,address)": EventFragment;
    "Collect(address,uint256,uint256)": EventFragment;
    "Mint(address,uint256,uint256,address)": EventFragment;
    "Swap(address,address,address,uint256,uint256)": EventFragment;
    "Sync(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Collect"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sync"): EventFragment;
}

export class ConcentratedLiquidityPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ConcentratedLiquidityPoolInterface;

  functions: {
    barFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnSingle(
      arg0: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collect(
      lower: BigNumberish,
      upper: BigNumberish,
      recipient: string,
      unwrapBento: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectProtocolFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeGrowthGlobal0(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeGrowthGlobal1(overrides?: CallOverrides): Promise<[BigNumber]>;

    flashSwap(
      arg0: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAmountOut(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAssets(
      overrides?: CallOverrides
    ): Promise<[string[]] & { assets: string[] }>;

    getImmutables(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, string, string, string, string, string] & {
        _MAX_TICK_LIQUIDITY: BigNumber;
        _tickSpacing: number;
        _swapFee: number;
        _barFeeTo: string;
        _bento: string;
        _masterDeployer: string;
        _token0: string;
        _token1: string;
      }
    >;

    getLiquidityAndLastObservation(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & {
        _secondsPerLiquidity: BigNumber;
        _lastObservation: number;
      }
    >;

    getPriceAndNearestTicks(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & { _price: BigNumber; _nearestTick: number }
    >;

    getReserves(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _reserve0: BigNumber; _reserve1: BigNumber }
    >;

    getTokenProtocolFees(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _token0ProtocolFee: BigNumber;
        _token1ProtocolFee: BigNumber;
      }
    >;

    liquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    poolIdentifier(overrides?: CallOverrides): Promise<[string]>;

    positions(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        feeGrowthInside0Last: BigNumber;
        feeGrowthInside1Last: BigNumber;
      }
    >;

    rangeFeeGrowth(
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        feeGrowthInside0: BigNumber;
        feeGrowthInside1: BigNumber;
      }
    >;

    rangeSecondsInside(
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { secondsInside: BigNumber }>;

    swap(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ticks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        previousTick: number;
        nextTick: number;
        liquidity: BigNumber;
        feeGrowthOutside0: BigNumber;
        feeGrowthOutside1: BigNumber;
        secondsPerLiquidityOutside: BigNumber;
      }
    >;

    updateBarFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  barFee(overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnSingle(
    arg0: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collect(
    lower: BigNumberish,
    upper: BigNumberish,
    recipient: string,
    unwrapBento: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectProtocolFee(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeGrowthGlobal0(overrides?: CallOverrides): Promise<BigNumber>;

  feeGrowthGlobal1(overrides?: CallOverrides): Promise<BigNumber>;

  flashSwap(
    arg0: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAmountOut(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  getAssets(overrides?: CallOverrides): Promise<string[]>;

  getImmutables(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number, string, string, string, string, string] & {
      _MAX_TICK_LIQUIDITY: BigNumber;
      _tickSpacing: number;
      _swapFee: number;
      _barFeeTo: string;
      _bento: string;
      _masterDeployer: string;
      _token0: string;
      _token1: string;
    }
  >;

  getLiquidityAndLastObservation(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number] & {
      _secondsPerLiquidity: BigNumber;
      _lastObservation: number;
    }
  >;

  getPriceAndNearestTicks(
    overrides?: CallOverrides
  ): Promise<[BigNumber, number] & { _price: BigNumber; _nearestTick: number }>;

  getReserves(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { _reserve0: BigNumber; _reserve1: BigNumber }
  >;

  getTokenProtocolFees(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      _token0ProtocolFee: BigNumber;
      _token1ProtocolFee: BigNumber;
    }
  >;

  liquidity(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  poolIdentifier(overrides?: CallOverrides): Promise<string>;

  positions(
    arg0: string,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      liquidity: BigNumber;
      feeGrowthInside0Last: BigNumber;
      feeGrowthInside1Last: BigNumber;
    }
  >;

  rangeFeeGrowth(
    lowerTick: BigNumberish,
    upperTick: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      feeGrowthInside0: BigNumber;
      feeGrowthInside1: BigNumber;
    }
  >;

  rangeSecondsInside(
    lowerTick: BigNumberish,
    upperTick: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  swap(
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ticks(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, number, BigNumber, BigNumber, BigNumber, BigNumber] & {
      previousTick: number;
      nextTick: number;
      liquidity: BigNumber;
      feeGrowthOutside0: BigNumber;
      feeGrowthOutside1: BigNumber;
      secondsPerLiquidityOutside: BigNumber;
    }
  >;

  updateBarFee(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    barFee(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<([string, BigNumber] & { token: string; amount: BigNumber })[]>;

    burnSingle(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    collect(
      lower: BigNumberish,
      upper: BigNumberish,
      recipient: string,
      unwrapBento: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amount0fees: BigNumber;
        amount1fees: BigNumber;
      }
    >;

    collectProtocolFee(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    feeGrowthGlobal0(overrides?: CallOverrides): Promise<BigNumber>;

    feeGrowthGlobal1(overrides?: CallOverrides): Promise<BigNumber>;

    flashSwap(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getAmountOut(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAssets(overrides?: CallOverrides): Promise<string[]>;

    getImmutables(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, string, string, string, string, string] & {
        _MAX_TICK_LIQUIDITY: BigNumber;
        _tickSpacing: number;
        _swapFee: number;
        _barFeeTo: string;
        _bento: string;
        _masterDeployer: string;
        _token0: string;
        _token1: string;
      }
    >;

    getLiquidityAndLastObservation(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & {
        _secondsPerLiquidity: BigNumber;
        _lastObservation: number;
      }
    >;

    getPriceAndNearestTicks(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & { _price: BigNumber; _nearestTick: number }
    >;

    getReserves(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _reserve0: BigNumber; _reserve1: BigNumber }
    >;

    getTokenProtocolFees(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _token0ProtocolFee: BigNumber;
        _token1ProtocolFee: BigNumber;
      }
    >;

    liquidity(overrides?: CallOverrides): Promise<BigNumber>;

    mint(data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    poolIdentifier(overrides?: CallOverrides): Promise<string>;

    positions(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        feeGrowthInside0Last: BigNumber;
        feeGrowthInside1Last: BigNumber;
      }
    >;

    rangeFeeGrowth(
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        feeGrowthInside0: BigNumber;
        feeGrowthInside1: BigNumber;
      }
    >;

    rangeSecondsInside(
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swap(data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    ticks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        previousTick: number;
        nextTick: number;
        liquidity: BigNumber;
        feeGrowthOutside0: BigNumber;
        feeGrowthOutside1: BigNumber;
        secondsPerLiquidityOutside: BigNumber;
      }
    >;

    updateBarFee(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    Burn(
      sender?: string | null,
      amount0?: null,
      amount1?: null,
      recipient?: string | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string],
      {
        sender: string;
        amount0: BigNumber;
        amount1: BigNumber;
        recipient: string;
      }
    >;

    Collect(
      sender?: string | null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sender: string; amount0: BigNumber; amount1: BigNumber }
    >;

    Mint(
      sender?: string | null,
      amount0?: null,
      amount1?: null,
      recipient?: string | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string],
      {
        sender: string;
        amount0: BigNumber;
        amount1: BigNumber;
        recipient: string;
      }
    >;

    Swap(
      recipient?: string | null,
      tokenIn?: string | null,
      tokenOut?: string | null,
      amountIn?: null,
      amountOut?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        recipient: string;
        tokenIn: string;
        tokenOut: string;
        amountIn: BigNumber;
        amountOut: BigNumber;
      }
    >;

    Sync(
      reserveShares0?: null,
      reserveShares1?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { reserveShares0: BigNumber; reserveShares1: BigNumber }
    >;
  };

  estimateGas: {
    barFee(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnSingle(
      arg0: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collect(
      lower: BigNumberish,
      upper: BigNumberish,
      recipient: string,
      unwrapBento: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectProtocolFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeGrowthGlobal0(overrides?: CallOverrides): Promise<BigNumber>;

    feeGrowthGlobal1(overrides?: CallOverrides): Promise<BigNumber>;

    flashSwap(
      arg0: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAmountOut(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAssets(overrides?: CallOverrides): Promise<BigNumber>;

    getImmutables(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidityAndLastObservation(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceAndNearestTicks(overrides?: CallOverrides): Promise<BigNumber>;

    getReserves(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenProtocolFees(overrides?: CallOverrides): Promise<BigNumber>;

    liquidity(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    poolIdentifier(overrides?: CallOverrides): Promise<BigNumber>;

    positions(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rangeFeeGrowth(
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rangeSecondsInside(
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swap(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ticks(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    updateBarFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    barFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnSingle(
      arg0: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collect(
      lower: BigNumberish,
      upper: BigNumberish,
      recipient: string,
      unwrapBento: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectProtocolFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeGrowthGlobal0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeGrowthGlobal1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flashSwap(
      arg0: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAmountOut(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getImmutables(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLiquidityAndLastObservation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceAndNearestTicks(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenProtocolFees(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    poolIdentifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positions(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rangeFeeGrowth(
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rangeSecondsInside(
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swap(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ticks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateBarFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

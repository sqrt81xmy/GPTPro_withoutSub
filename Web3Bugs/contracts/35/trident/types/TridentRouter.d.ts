/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TridentRouterInterface extends ethers.utils.Interface {
  functions: {
    "addLiquidity(tuple[],address,uint256,bytes)": FunctionFragment;
    "addLiquidityLazy(address,uint256,bytes)": FunctionFragment;
    "batch(bytes[])": FunctionFragment;
    "bento()": FunctionFragment;
    "burnLiquidity(address,uint256,bytes,tuple[])": FunctionFragment;
    "burnLiquiditySingle(address,uint256,bytes,uint256)": FunctionFragment;
    "complexPath(tuple)": FunctionFragment;
    "deployPool(address,bytes)": FunctionFragment;
    "exactInput(tuple)": FunctionFragment;
    "exactInputLazy(uint256,tuple[])": FunctionFragment;
    "exactInputSingle(tuple)": FunctionFragment;
    "exactInputSingleWithNativeToken(tuple)": FunctionFragment;
    "exactInputWithNativeToken(tuple)": FunctionFragment;
    "masterDeployer()": FunctionFragment;
    "permitThis(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "permitThisAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "refundETH()": FunctionFragment;
    "sweepBentoBoxToken(address,uint256,address)": FunctionFragment;
    "sweepNativeToken(address,uint256,address)": FunctionFragment;
    "tridentMintCallback(bytes)": FunctionFragment;
    "tridentSwapCallback(bytes)": FunctionFragment;
    "unwrapWETH(uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      { token: string; native: boolean; amount: BigNumberish }[],
      string,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityLazy",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "batch", values: [BytesLike[]]): string;
  encodeFunctionData(functionFragment: "bento", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "burnLiquidity",
    values: [
      string,
      BigNumberish,
      BytesLike,
      { token: string; amount: BigNumberish }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "burnLiquiditySingle",
    values: [string, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "complexPath",
    values: [
      {
        initialPath: {
          tokenIn: string;
          pool: string;
          native: boolean;
          amount: BigNumberish;
          data: BytesLike;
        }[];
        percentagePath: {
          tokenIn: string;
          pool: string;
          balancePercentage: BigNumberish;
          data: BytesLike;
        }[];
        output: {
          token: string;
          to: string;
          unwrapBento: boolean;
          minAmount: BigNumberish;
        }[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deployPool",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "exactInput",
    values: [
      {
        tokenIn: string;
        amountIn: BigNumberish;
        amountOutMinimum: BigNumberish;
        path: { pool: string; data: BytesLike }[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exactInputLazy",
    values: [BigNumberish, { pool: string; data: BytesLike }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "exactInputSingle",
    values: [
      {
        amountIn: BigNumberish;
        amountOutMinimum: BigNumberish;
        pool: string;
        tokenIn: string;
        data: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exactInputSingleWithNativeToken",
    values: [
      {
        amountIn: BigNumberish;
        amountOutMinimum: BigNumberish;
        pool: string;
        tokenIn: string;
        data: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exactInputWithNativeToken",
    values: [
      {
        tokenIn: string;
        amountIn: BigNumberish;
        amountOutMinimum: BigNumberish;
        path: { pool: string; data: BytesLike }[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "masterDeployer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "permitThis",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permitThisAllowed",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "refundETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sweepBentoBoxToken",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sweepNativeToken",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tridentMintCallback",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tridentSwapCallback",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unwrapWETH",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityLazy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bento", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnLiquiditySingle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "complexPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exactInput", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exactInputLazy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exactInputSingle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exactInputSingleWithNativeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exactInputWithNativeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "masterDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "permitThis", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permitThisAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refundETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sweepBentoBoxToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sweepNativeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tridentMintCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tridentSwapCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unwrapWETH", data: BytesLike): Result;

  events: {};
}

export class TridentRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TridentRouterInterface;

  functions: {
    addLiquidity(
      tokenInput: { token: string; native: boolean; amount: BigNumberish }[],
      pool: string,
      minLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addLiquidityLazy(
      pool: string,
      minLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batch(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bento(overrides?: CallOverrides): Promise<[string]>;

    burnLiquidity(
      pool: string,
      liquidity: BigNumberish,
      data: BytesLike,
      minWithdrawals: { token: string; amount: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnLiquiditySingle(
      pool: string,
      liquidity: BigNumberish,
      data: BytesLike,
      minWithdrawal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    complexPath(
      params: {
        initialPath: {
          tokenIn: string;
          pool: string;
          native: boolean;
          amount: BigNumberish;
          data: BytesLike;
        }[];
        percentagePath: {
          tokenIn: string;
          pool: string;
          balancePercentage: BigNumberish;
          data: BytesLike;
        }[];
        output: {
          token: string;
          to: string;
          unwrapBento: boolean;
          minAmount: BigNumberish;
        }[];
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployPool(
      _factory: string,
      _deployData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exactInput(
      params: {
        tokenIn: string;
        amountIn: BigNumberish;
        amountOutMinimum: BigNumberish;
        path: { pool: string; data: BytesLike }[];
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exactInputLazy(
      amountOutMinimum: BigNumberish,
      path: { pool: string; data: BytesLike }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exactInputSingle(
      params: {
        amountIn: BigNumberish;
        amountOutMinimum: BigNumberish;
        pool: string;
        tokenIn: string;
        data: BytesLike;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exactInputSingleWithNativeToken(
      params: {
        amountIn: BigNumberish;
        amountOutMinimum: BigNumberish;
        pool: string;
        tokenIn: string;
        data: BytesLike;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exactInputWithNativeToken(
      params: {
        tokenIn: string;
        amountIn: BigNumberish;
        amountOutMinimum: BigNumberish;
        path: { pool: string; data: BytesLike }[];
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    masterDeployer(overrides?: CallOverrides): Promise<[string]>;

    permitThis(
      token: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    permitThisAllowed(
      token: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    refundETH(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sweepBentoBoxToken(
      token: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sweepNativeToken(
      token: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tridentMintCallback(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tridentSwapCallback(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unwrapWETH(
      amountMinimum: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addLiquidity(
    tokenInput: { token: string; native: boolean; amount: BigNumberish }[],
    pool: string,
    minLiquidity: BigNumberish,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addLiquidityLazy(
    pool: string,
    minLiquidity: BigNumberish,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batch(
    data: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bento(overrides?: CallOverrides): Promise<string>;

  burnLiquidity(
    pool: string,
    liquidity: BigNumberish,
    data: BytesLike,
    minWithdrawals: { token: string; amount: BigNumberish }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnLiquiditySingle(
    pool: string,
    liquidity: BigNumberish,
    data: BytesLike,
    minWithdrawal: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  complexPath(
    params: {
      initialPath: {
        tokenIn: string;
        pool: string;
        native: boolean;
        amount: BigNumberish;
        data: BytesLike;
      }[];
      percentagePath: {
        tokenIn: string;
        pool: string;
        balancePercentage: BigNumberish;
        data: BytesLike;
      }[];
      output: {
        token: string;
        to: string;
        unwrapBento: boolean;
        minAmount: BigNumberish;
      }[];
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployPool(
    _factory: string,
    _deployData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exactInput(
    params: {
      tokenIn: string;
      amountIn: BigNumberish;
      amountOutMinimum: BigNumberish;
      path: { pool: string; data: BytesLike }[];
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exactInputLazy(
    amountOutMinimum: BigNumberish,
    path: { pool: string; data: BytesLike }[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exactInputSingle(
    params: {
      amountIn: BigNumberish;
      amountOutMinimum: BigNumberish;
      pool: string;
      tokenIn: string;
      data: BytesLike;
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exactInputSingleWithNativeToken(
    params: {
      amountIn: BigNumberish;
      amountOutMinimum: BigNumberish;
      pool: string;
      tokenIn: string;
      data: BytesLike;
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exactInputWithNativeToken(
    params: {
      tokenIn: string;
      amountIn: BigNumberish;
      amountOutMinimum: BigNumberish;
      path: { pool: string; data: BytesLike }[];
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  masterDeployer(overrides?: CallOverrides): Promise<string>;

  permitThis(
    token: string,
    amount: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  permitThisAllowed(
    token: string,
    nonce: BigNumberish,
    expiry: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  refundETH(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sweepBentoBoxToken(
    token: string,
    amount: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sweepNativeToken(
    token: string,
    amount: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tridentMintCallback(
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tridentSwapCallback(
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unwrapWETH(
    amountMinimum: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addLiquidity(
      tokenInput: { token: string; native: boolean; amount: BigNumberish }[],
      pool: string,
      minLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquidityLazy(
      pool: string,
      minLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batch(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    bento(overrides?: CallOverrides): Promise<string>;

    burnLiquidity(
      pool: string,
      liquidity: BigNumberish,
      data: BytesLike,
      minWithdrawals: { token: string; amount: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<void>;

    burnLiquiditySingle(
      pool: string,
      liquidity: BigNumberish,
      data: BytesLike,
      minWithdrawal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    complexPath(
      params: {
        initialPath: {
          tokenIn: string;
          pool: string;
          native: boolean;
          amount: BigNumberish;
          data: BytesLike;
        }[];
        percentagePath: {
          tokenIn: string;
          pool: string;
          balancePercentage: BigNumberish;
          data: BytesLike;
        }[];
        output: {
          token: string;
          to: string;
          unwrapBento: boolean;
          minAmount: BigNumberish;
        }[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    deployPool(
      _factory: string,
      _deployData: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    exactInput(
      params: {
        tokenIn: string;
        amountIn: BigNumberish;
        amountOutMinimum: BigNumberish;
        path: { pool: string; data: BytesLike }[];
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exactInputLazy(
      amountOutMinimum: BigNumberish,
      path: { pool: string; data: BytesLike }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exactInputSingle(
      params: {
        amountIn: BigNumberish;
        amountOutMinimum: BigNumberish;
        pool: string;
        tokenIn: string;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exactInputSingleWithNativeToken(
      params: {
        amountIn: BigNumberish;
        amountOutMinimum: BigNumberish;
        pool: string;
        tokenIn: string;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exactInputWithNativeToken(
      params: {
        tokenIn: string;
        amountIn: BigNumberish;
        amountOutMinimum: BigNumberish;
        path: { pool: string; data: BytesLike }[];
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    masterDeployer(overrides?: CallOverrides): Promise<string>;

    permitThis(
      token: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    permitThisAllowed(
      token: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    refundETH(overrides?: CallOverrides): Promise<void>;

    sweepBentoBoxToken(
      token: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sweepNativeToken(
      token: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tridentMintCallback(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    tridentSwapCallback(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    unwrapWETH(
      amountMinimum: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addLiquidity(
      tokenInput: { token: string; native: boolean; amount: BigNumberish }[],
      pool: string,
      minLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addLiquidityLazy(
      pool: string,
      minLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batch(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bento(overrides?: CallOverrides): Promise<BigNumber>;

    burnLiquidity(
      pool: string,
      liquidity: BigNumberish,
      data: BytesLike,
      minWithdrawals: { token: string; amount: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnLiquiditySingle(
      pool: string,
      liquidity: BigNumberish,
      data: BytesLike,
      minWithdrawal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    complexPath(
      params: {
        initialPath: {
          tokenIn: string;
          pool: string;
          native: boolean;
          amount: BigNumberish;
          data: BytesLike;
        }[];
        percentagePath: {
          tokenIn: string;
          pool: string;
          balancePercentage: BigNumberish;
          data: BytesLike;
        }[];
        output: {
          token: string;
          to: string;
          unwrapBento: boolean;
          minAmount: BigNumberish;
        }[];
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployPool(
      _factory: string,
      _deployData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exactInput(
      params: {
        tokenIn: string;
        amountIn: BigNumberish;
        amountOutMinimum: BigNumberish;
        path: { pool: string; data: BytesLike }[];
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exactInputLazy(
      amountOutMinimum: BigNumberish,
      path: { pool: string; data: BytesLike }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exactInputSingle(
      params: {
        amountIn: BigNumberish;
        amountOutMinimum: BigNumberish;
        pool: string;
        tokenIn: string;
        data: BytesLike;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exactInputSingleWithNativeToken(
      params: {
        amountIn: BigNumberish;
        amountOutMinimum: BigNumberish;
        pool: string;
        tokenIn: string;
        data: BytesLike;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exactInputWithNativeToken(
      params: {
        tokenIn: string;
        amountIn: BigNumberish;
        amountOutMinimum: BigNumberish;
        path: { pool: string; data: BytesLike }[];
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    masterDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    permitThis(
      token: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    permitThisAllowed(
      token: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    refundETH(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sweepBentoBoxToken(
      token: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sweepNativeToken(
      token: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tridentMintCallback(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tridentSwapCallback(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unwrapWETH(
      amountMinimum: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      tokenInput: { token: string; native: boolean; amount: BigNumberish }[],
      pool: string,
      minLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidityLazy(
      pool: string,
      minLiquidity: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batch(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bento(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnLiquidity(
      pool: string,
      liquidity: BigNumberish,
      data: BytesLike,
      minWithdrawals: { token: string; amount: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnLiquiditySingle(
      pool: string,
      liquidity: BigNumberish,
      data: BytesLike,
      minWithdrawal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    complexPath(
      params: {
        initialPath: {
          tokenIn: string;
          pool: string;
          native: boolean;
          amount: BigNumberish;
          data: BytesLike;
        }[];
        percentagePath: {
          tokenIn: string;
          pool: string;
          balancePercentage: BigNumberish;
          data: BytesLike;
        }[];
        output: {
          token: string;
          to: string;
          unwrapBento: boolean;
          minAmount: BigNumberish;
        }[];
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployPool(
      _factory: string,
      _deployData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exactInput(
      params: {
        tokenIn: string;
        amountIn: BigNumberish;
        amountOutMinimum: BigNumberish;
        path: { pool: string; data: BytesLike }[];
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exactInputLazy(
      amountOutMinimum: BigNumberish,
      path: { pool: string; data: BytesLike }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exactInputSingle(
      params: {
        amountIn: BigNumberish;
        amountOutMinimum: BigNumberish;
        pool: string;
        tokenIn: string;
        data: BytesLike;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exactInputSingleWithNativeToken(
      params: {
        amountIn: BigNumberish;
        amountOutMinimum: BigNumberish;
        pool: string;
        tokenIn: string;
        data: BytesLike;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exactInputWithNativeToken(
      params: {
        tokenIn: string;
        amountIn: BigNumberish;
        amountOutMinimum: BigNumberish;
        path: { pool: string; data: BytesLike }[];
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    masterDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permitThis(
      token: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    permitThisAllowed(
      token: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    refundETH(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sweepBentoBoxToken(
      token: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sweepNativeToken(
      token: string,
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tridentMintCallback(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tridentSwapCallback(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unwrapWETH(
      amountMinimum: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

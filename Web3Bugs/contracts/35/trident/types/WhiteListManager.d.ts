/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface WhiteListManagerInterface extends ethers.utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "isWhitelisted(address,uint256)": FunctionFragment;
    "joinWhitelist(address,uint256,address,bytes32[])": FunctionFragment;
    "merkleRoot(address)": FunctionFragment;
    "setMerkleRoot(bytes32)": FunctionFragment;
    "setWhitelisting(address,address,bool,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "whitelistAccount(address,bool)": FunctionFragment;
    "whitelistedAccounts(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "joinWhitelist",
    values: [string, BigNumberish, string, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "merkleRoot", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setMerkleRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelisting",
    values: [
      string,
      string,
      boolean,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistAccount",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedAccounts",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "merkleRoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelisting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedAccounts",
    data: BytesLike
  ): Result;

  events: {
    "JoinWithMerkle(address,uint256,address)": EventFragment;
    "SetMerkleRoot(address,bytes32)": EventFragment;
    "WhiteListAccount(address,address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "JoinWithMerkle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMerkleRoot"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhiteListAccount"): EventFragment;
}

export class WhiteListManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: WhiteListManagerInterface;

  functions: {
    DOMAIN_SEPARATOR(
      overrides?: CallOverrides
    ): Promise<[string] & { domainSeperator: string }>;

    isWhitelisted(
      operator: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { success: boolean }>;

    joinWhitelist(
      operator: string,
      index: BigNumberish,
      account: string,
      merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    merkleRoot(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    setMerkleRoot(
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWhitelisting(
      operator: string,
      account: string,
      approved: boolean,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistAccount(
      user: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistedAccounts(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  isWhitelisted(
    operator: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  joinWhitelist(
    operator: string,
    index: BigNumberish,
    account: string,
    merkleProof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  merkleRoot(arg0: string, overrides?: CallOverrides): Promise<string>;

  setMerkleRoot(
    _merkleRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWhitelisting(
    operator: string,
    account: string,
    approved: boolean,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistAccount(
    user: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistedAccounts(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    isWhitelisted(
      operator: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    joinWhitelist(
      operator: string,
      index: BigNumberish,
      account: string,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    merkleRoot(arg0: string, overrides?: CallOverrides): Promise<string>;

    setMerkleRoot(
      _merkleRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhitelisting(
      operator: string,
      account: string,
      approved: boolean,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistAccount(
      user: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistedAccounts(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    JoinWithMerkle(
      operator?: null,
      index?: BigNumberish | null,
      account?: string | null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { operator: string; index: BigNumber; account: string }
    >;

    SetMerkleRoot(
      operator?: null,
      merkleRoot?: null
    ): TypedEventFilter<
      [string, string],
      { operator: string; merkleRoot: string }
    >;

    WhiteListAccount(
      operator?: string | null,
      account?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { operator: string; account: string; approved: boolean }
    >;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    isWhitelisted(
      operator: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joinWhitelist(
      operator: string,
      index: BigNumberish,
      account: string,
      merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    merkleRoot(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setMerkleRoot(
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWhitelisting(
      operator: string,
      account: string,
      approved: boolean,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistAccount(
      user: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistedAccounts(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isWhitelisted(
      operator: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joinWhitelist(
      operator: string,
      index: BigNumberish,
      account: string,
      merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    merkleRoot(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setMerkleRoot(
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWhitelisting(
      operator: string,
      account: string,
      approved: boolean,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistAccount(
      user: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistedAccounts(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

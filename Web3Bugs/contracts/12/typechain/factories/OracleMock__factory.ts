/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { OracleMock } from "../OracleMock";

export class OracleMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<OracleMock> {
    return super.deploy(overrides || {}) as Promise<OracleMock>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): OracleMock {
    return super.attach(address) as OracleMock;
  }
  connect(signer: Signer): OracleMock__factory {
    return super.connect(signer) as OracleMock__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OracleMock {
    return new Contract(address, _abi, signerOrProvider) as OracleMock;
  }
}

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "get",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "peek",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "spot_",
        type: "uint256",
      },
    ],
    name: "set",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "source",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "spot",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "updated",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b5030606081901b6080526102ee610032600039600061014101526102ee6000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c806368284fd41161005057806368284fd4146100cb5780636f265b93146100de5780637b2aab03146100f357610072565b8063462f9a281461007757806360fe47b1146100a157806367e828bf146100b6575b600080fd5b61008a6100853660046101a2565b6100fb565b60405161009892919061020f565b60405180910390f35b6100b46100af3660046101cd565b610136565b005b6100be61013f565b60405161009891906101e5565b61008a6100d93660046101a2565b610163565b6100e6610196565b6040516100989190610206565b6100e661019c565b42600155600080548190670de0b6b3a76400009061011a908590610256565b610124919061021d565b42600181905591509150935093915050565b42600155600055565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080670de0b6b3a76400008360005461017d9190610256565b610187919061021d565b60015491509150935093915050565b60005481565b60015481565b6000806000606084860312156101b6578283fd5b505081359360208301359350604090920135919050565b6000602082840312156101de578081fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b90815260200190565b918252602082015260400190565b600082610251577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156102b3577f4e487b710000000000000000000000000000000000000000000000000000000081526011600452602481fd5b50029056fea26469706673582212208e8cfda45dc12417b530a52b0dbf5b565b59d459c135acaf81eb183dc1cabbc064736f6c63430008010033";

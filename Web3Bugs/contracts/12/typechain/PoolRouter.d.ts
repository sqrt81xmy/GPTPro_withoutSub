/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PoolRouterInterface extends ethers.utils.Interface {
  functions: {
    "batch(uint8[],bytes[])": FunctionFragment;
    "factory()": FunctionFragment;
    "transferToPool(address,address,address,uint128)": FunctionFragment;
    "weth()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "batch",
    values: [BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferToPool",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(functionFragment: "batch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferToPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;

  events: {};
}

export class PoolRouter extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: PoolRouterInterface;

  functions: {
    batch(
      operations: BigNumberish[],
      data: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "batch(uint8[],bytes[])"(
      operations: BigNumberish[],
      data: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    "factory()"(overrides?: CallOverrides): Promise<[string]>;

    transferToPool(
      base: string,
      fyToken: string,
      token: string,
      wad: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "transferToPool(address,address,address,uint128)"(
      base: string,
      fyToken: string,
      token: string,
      wad: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    "weth()"(overrides?: CallOverrides): Promise<[string]>;
  };

  batch(
    operations: BigNumberish[],
    data: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "batch(uint8[],bytes[])"(
    operations: BigNumberish[],
    data: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  "factory()"(overrides?: CallOverrides): Promise<string>;

  transferToPool(
    base: string,
    fyToken: string,
    token: string,
    wad: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "transferToPool(address,address,address,uint128)"(
    base: string,
    fyToken: string,
    token: string,
    wad: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  weth(overrides?: CallOverrides): Promise<string>;

  "weth()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    batch(
      operations: BigNumberish[],
      data: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "batch(uint8[],bytes[])"(
      operations: BigNumberish[],
      data: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    factory(overrides?: CallOverrides): Promise<string>;

    "factory()"(overrides?: CallOverrides): Promise<string>;

    transferToPool(
      base: string,
      fyToken: string,
      token: string,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferToPool(address,address,address,uint128)"(
      base: string,
      fyToken: string,
      token: string,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    weth(overrides?: CallOverrides): Promise<string>;

    "weth()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    batch(
      operations: BigNumberish[],
      data: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "batch(uint8[],bytes[])"(
      operations: BigNumberish[],
      data: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    "factory()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferToPool(
      base: string,
      fyToken: string,
      token: string,
      wad: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "transferToPool(address,address,address,uint128)"(
      base: string,
      fyToken: string,
      token: string,
      wad: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    "weth()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    batch(
      operations: BigNumberish[],
      data: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "batch(uint8[],bytes[])"(
      operations: BigNumberish[],
      data: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "factory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferToPool(
      base: string,
      fyToken: string,
      token: string,
      wad: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "transferToPool(address,address,address,uint128)"(
      base: string,
      fyToken: string,
      token: string,
      wad: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "weth()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

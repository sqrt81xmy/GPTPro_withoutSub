/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface WitchInterface extends ethers.utils.Interface {
  functions: {
    "LOCK()": FunctionFragment;
    "ROOT()": FunctionFragment;
    "auctionTime()": FunctionFragment;
    "buy(bytes12,uint128,uint128)": FunctionFragment;
    "cauldron()": FunctionFragment;
    "getRoleAdmin(bytes4)": FunctionFragment;
    "grab(bytes12)": FunctionFragment;
    "grantRole(bytes4,address)": FunctionFragment;
    "grantRoles(bytes4[],address)": FunctionFragment;
    "hasRole(bytes4,address)": FunctionFragment;
    "initialProportion()": FunctionFragment;
    "ladle()": FunctionFragment;
    "lockRole(bytes4)": FunctionFragment;
    "renounceRole(bytes4,address)": FunctionFragment;
    "revokeRole(bytes4,address)": FunctionFragment;
    "revokeRoles(bytes4[],address)": FunctionFragment;
    "setAuctionTime(uint128)": FunctionFragment;
    "setInitialProportion(uint128)": FunctionFragment;
    "setRoleAdmin(bytes4,bytes4)": FunctionFragment;
    "vaultOwners(bytes12)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "LOCK", values?: undefined): string;
  encodeFunctionData(functionFragment: "ROOT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "auctionTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "cauldron", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "grab", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRoles",
    values: [BytesLike[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialProportion",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ladle", values?: undefined): string;
  encodeFunctionData(functionFragment: "lockRole", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRoles",
    values: [BytesLike[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuctionTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInitialProportion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoleAdmin",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultOwners",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "LOCK", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ROOT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auctionTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cauldron", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grab", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRoles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialProportion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ladle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuctionTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInitialProportion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultOwners",
    data: BytesLike
  ): Result;

  events: {
    "AuctionTimeSet(uint128)": EventFragment;
    "Bought(bytes12,address,uint256,uint256)": EventFragment;
    "InitialProportionSet(uint128)": EventFragment;
    "RoleAdminChanged(bytes4,bytes4)": EventFragment;
    "RoleGranted(bytes4,address,address)": EventFragment;
    "RoleRevoked(bytes4,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionTimeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Bought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitialProportionSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export class Witch extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: WitchInterface;

  functions: {
    LOCK(overrides?: CallOverrides): Promise<[string]>;

    "LOCK()"(overrides?: CallOverrides): Promise<[string]>;

    ROOT(overrides?: CallOverrides): Promise<[string]>;

    "ROOT()"(overrides?: CallOverrides): Promise<[string]>;

    auctionTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "auctionTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    buy(
      vaultId: BytesLike,
      art: BigNumberish,
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "buy(bytes12,uint128,uint128)"(
      vaultId: BytesLike,
      art: BigNumberish,
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cauldron(overrides?: CallOverrides): Promise<[string]>;

    "cauldron()"(overrides?: CallOverrides): Promise<[string]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "getRoleAdmin(bytes4)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grab(
      vaultId: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grab(bytes12)"(
      vaultId: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    grantRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRoles(bytes4[],address)"(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialProportion(overrides?: CallOverrides): Promise<[BigNumber]>;

    "initialProportion()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    ladle(overrides?: CallOverrides): Promise<[string]>;

    "ladle()"(overrides?: CallOverrides): Promise<[string]>;

    lockRole(
      role: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "lockRole(bytes4)"(
      role: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRoles(bytes4[],address)"(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setAuctionTime(
      auctionTime_: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAuctionTime(uint128)"(
      auctionTime_: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setInitialProportion(
      initialProportion_: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setInitialProportion(uint128)"(
      initialProportion_: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRoleAdmin(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRoleAdmin(bytes4,bytes4)"(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    vaultOwners(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "vaultOwners(bytes12)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  LOCK(overrides?: CallOverrides): Promise<string>;

  "LOCK()"(overrides?: CallOverrides): Promise<string>;

  ROOT(overrides?: CallOverrides): Promise<string>;

  "ROOT()"(overrides?: CallOverrides): Promise<string>;

  auctionTime(overrides?: CallOverrides): Promise<BigNumber>;

  "auctionTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  buy(
    vaultId: BytesLike,
    art: BigNumberish,
    min: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "buy(bytes12,uint128,uint128)"(
    vaultId: BytesLike,
    art: BigNumberish,
    min: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cauldron(overrides?: CallOverrides): Promise<string>;

  "cauldron()"(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes4)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  grab(vaultId: BytesLike, overrides?: Overrides): Promise<ContractTransaction>;

  "grab(bytes12)"(
    vaultId: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRole(bytes4,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  grantRoles(
    roles: BytesLike[],
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRoles(bytes4[],address)"(
    roles: BytesLike[],
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes4,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialProportion(overrides?: CallOverrides): Promise<BigNumber>;

  "initialProportion()"(overrides?: CallOverrides): Promise<BigNumber>;

  ladle(overrides?: CallOverrides): Promise<string>;

  "ladle()"(overrides?: CallOverrides): Promise<string>;

  lockRole(
    role: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "lockRole(bytes4)"(
    role: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceRole(bytes4,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRole(bytes4,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeRoles(
    roles: BytesLike[],
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRoles(bytes4[],address)"(
    roles: BytesLike[],
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setAuctionTime(
    auctionTime_: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAuctionTime(uint128)"(
    auctionTime_: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setInitialProportion(
    initialProportion_: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setInitialProportion(uint128)"(
    initialProportion_: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRoleAdmin(
    role: BytesLike,
    adminRole: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRoleAdmin(bytes4,bytes4)"(
    role: BytesLike,
    adminRole: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  vaultOwners(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  "vaultOwners(bytes12)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    LOCK(overrides?: CallOverrides): Promise<string>;

    "LOCK()"(overrides?: CallOverrides): Promise<string>;

    ROOT(overrides?: CallOverrides): Promise<string>;

    "ROOT()"(overrides?: CallOverrides): Promise<string>;

    auctionTime(overrides?: CallOverrides): Promise<BigNumber>;

    "auctionTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    buy(
      vaultId: BytesLike,
      art: BigNumberish,
      min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "buy(bytes12,uint128,uint128)"(
      vaultId: BytesLike,
      art: BigNumberish,
      min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cauldron(overrides?: CallOverrides): Promise<string>;

    "cauldron()"(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes4)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    grab(vaultId: BytesLike, overrides?: CallOverrides): Promise<void>;

    "grab(bytes12)"(
      vaultId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    grantRoles(
      roles: BytesLike[],
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRoles(bytes4[],address)"(
      roles: BytesLike[],
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialProportion(overrides?: CallOverrides): Promise<BigNumber>;

    "initialProportion()"(overrides?: CallOverrides): Promise<BigNumber>;

    ladle(overrides?: CallOverrides): Promise<string>;

    "ladle()"(overrides?: CallOverrides): Promise<string>;

    lockRole(role: BytesLike, overrides?: CallOverrides): Promise<void>;

    "lockRole(bytes4)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRoles(
      roles: BytesLike[],
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRoles(bytes4[],address)"(
      roles: BytesLike[],
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAuctionTime(
      auctionTime_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAuctionTime(uint128)"(
      auctionTime_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setInitialProportion(
      initialProportion_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setInitialProportion(uint128)"(
      initialProportion_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoleAdmin(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRoleAdmin(bytes4,bytes4)"(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    vaultOwners(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    "vaultOwners(bytes12)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    AuctionTimeSet(
      auctionTime: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { auctionTime: BigNumber }>;

    Bought(
      vaultId: BytesLike | null,
      buyer: string | null,
      ink: null,
      art: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { vaultId: string; buyer: string; ink: BigNumber; art: BigNumber }
    >;

    InitialProportionSet(
      initialProportion: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { initialProportion: BigNumber }>;

    RoleAdminChanged(
      role: BytesLike | null,
      newAdminRole: BytesLike | null
    ): TypedEventFilter<
      [string, string],
      { role: string; newAdminRole: string }
    >;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;
  };

  estimateGas: {
    LOCK(overrides?: CallOverrides): Promise<BigNumber>;

    "LOCK()"(overrides?: CallOverrides): Promise<BigNumber>;

    ROOT(overrides?: CallOverrides): Promise<BigNumber>;

    "ROOT()"(overrides?: CallOverrides): Promise<BigNumber>;

    auctionTime(overrides?: CallOverrides): Promise<BigNumber>;

    "auctionTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    buy(
      vaultId: BytesLike,
      art: BigNumberish,
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "buy(bytes12,uint128,uint128)"(
      vaultId: BytesLike,
      art: BigNumberish,
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    cauldron(overrides?: CallOverrides): Promise<BigNumber>;

    "cauldron()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes4)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grab(vaultId: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    "grab(bytes12)"(
      vaultId: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    grantRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRoles(bytes4[],address)"(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialProportion(overrides?: CallOverrides): Promise<BigNumber>;

    "initialProportion()"(overrides?: CallOverrides): Promise<BigNumber>;

    ladle(overrides?: CallOverrides): Promise<BigNumber>;

    "ladle()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockRole(role: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    "lockRole(bytes4)"(
      role: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "renounceRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRoles(bytes4[],address)"(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setAuctionTime(
      auctionTime_: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAuctionTime(uint128)"(
      auctionTime_: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setInitialProportion(
      initialProportion_: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setInitialProportion(uint128)"(
      initialProportion_: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRoleAdmin(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRoleAdmin(bytes4,bytes4)"(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    vaultOwners(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "vaultOwners(bytes12)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    LOCK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "LOCK()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROOT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ROOT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auctionTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "auctionTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buy(
      vaultId: BytesLike,
      art: BigNumberish,
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "buy(bytes12,uint128,uint128)"(
      vaultId: BytesLike,
      art: BigNumberish,
      min: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cauldron(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cauldron()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes4)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grab(
      vaultId: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grab(bytes12)"(
      vaultId: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    grantRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRoles(bytes4[],address)"(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialProportion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "initialProportion()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ladle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ladle()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockRole(
      role: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "lockRole(bytes4)"(
      role: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRoles(bytes4[],address)"(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setAuctionTime(
      auctionTime_: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAuctionTime(uint128)"(
      auctionTime_: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setInitialProportion(
      initialProportion_: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setInitialProportion(uint128)"(
      initialProportion_: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRoleAdmin(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRoleAdmin(bytes4,bytes4)"(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    vaultOwners(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "vaultOwners(bytes12)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ILadleGovInterface extends ethers.utils.Interface {
  functions: {
    "addJoin(bytes6,address)": FunctionFragment;
    "addPool(bytes6,address)": FunctionFragment;
    "joins(bytes6)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addJoin",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addPool",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "joins", values: [BytesLike]): string;

  decodeFunctionResult(functionFragment: "addJoin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joins", data: BytesLike): Result;

  events: {};
}

export class ILadleGov extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: ILadleGovInterface;

  functions: {
    addJoin(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addJoin(bytes6,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addPool(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addPool(bytes6,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    joins(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "joins(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  addJoin(
    arg0: BytesLike,
    arg1: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addJoin(bytes6,address)"(
    arg0: BytesLike,
    arg1: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addPool(
    arg0: BytesLike,
    arg1: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addPool(bytes6,address)"(
    arg0: BytesLike,
    arg1: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  joins(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  "joins(bytes6)"(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addJoin(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addJoin(bytes6,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addPool(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addPool(bytes6,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<void>;

    joins(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    "joins(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    addJoin(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addJoin(bytes6,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addPool(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addPool(bytes6,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    joins(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "joins(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addJoin(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addJoin(bytes6,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addPool(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addPool(bytes6,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    joins(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "joins(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

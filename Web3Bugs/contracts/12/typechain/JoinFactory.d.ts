/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface JoinFactoryInterface extends ethers.utils.Interface {
  functions: {
    "JOIN_BYTECODE_HASH()": FunctionFragment;
    "calculateJoinAddress(address)": FunctionFragment;
    "createJoin(address)": FunctionFragment;
    "getJoin(address)": FunctionFragment;
    "nextAsset()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "JOIN_BYTECODE_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateJoinAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "createJoin", values: [string]): string;
  encodeFunctionData(functionFragment: "getJoin", values: [string]): string;
  encodeFunctionData(functionFragment: "nextAsset", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "JOIN_BYTECODE_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateJoinAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createJoin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getJoin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextAsset", data: BytesLike): Result;

  events: {
    "JoinCreated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "JoinCreated"): EventFragment;
}

export class JoinFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: JoinFactoryInterface;

  functions: {
    JOIN_BYTECODE_HASH(overrides?: CallOverrides): Promise<[string]>;

    "JOIN_BYTECODE_HASH()"(overrides?: CallOverrides): Promise<[string]>;

    calculateJoinAddress(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "calculateJoinAddress(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    createJoin(
      asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createJoin(address)"(
      asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getJoin(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[string] & { join: string }>;

    "getJoin(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[string] & { join: string }>;

    nextAsset(overrides?: CallOverrides): Promise<[string]>;

    "nextAsset()"(overrides?: CallOverrides): Promise<[string]>;
  };

  JOIN_BYTECODE_HASH(overrides?: CallOverrides): Promise<string>;

  "JOIN_BYTECODE_HASH()"(overrides?: CallOverrides): Promise<string>;

  calculateJoinAddress(
    asset: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "calculateJoinAddress(address)"(
    asset: string,
    overrides?: CallOverrides
  ): Promise<string>;

  createJoin(
    asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createJoin(address)"(
    asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getJoin(asset: string, overrides?: CallOverrides): Promise<string>;

  "getJoin(address)"(asset: string, overrides?: CallOverrides): Promise<string>;

  nextAsset(overrides?: CallOverrides): Promise<string>;

  "nextAsset()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    JOIN_BYTECODE_HASH(overrides?: CallOverrides): Promise<string>;

    "JOIN_BYTECODE_HASH()"(overrides?: CallOverrides): Promise<string>;

    calculateJoinAddress(
      asset: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "calculateJoinAddress(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<string>;

    createJoin(asset: string, overrides?: CallOverrides): Promise<string>;

    "createJoin(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getJoin(asset: string, overrides?: CallOverrides): Promise<string>;

    "getJoin(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<string>;

    nextAsset(overrides?: CallOverrides): Promise<string>;

    "nextAsset()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    JoinCreated(
      asset: string | null,
      pool: null
    ): TypedEventFilter<[string, string], { asset: string; pool: string }>;
  };

  estimateGas: {
    JOIN_BYTECODE_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    "JOIN_BYTECODE_HASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    calculateJoinAddress(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateJoinAddress(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createJoin(asset: string, overrides?: Overrides): Promise<BigNumber>;

    "createJoin(address)"(
      asset: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getJoin(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getJoin(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextAsset(overrides?: CallOverrides): Promise<BigNumber>;

    "nextAsset()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    JOIN_BYTECODE_HASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "JOIN_BYTECODE_HASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateJoinAddress(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateJoinAddress(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createJoin(
      asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createJoin(address)"(
      asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getJoin(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getJoin(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nextAsset()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

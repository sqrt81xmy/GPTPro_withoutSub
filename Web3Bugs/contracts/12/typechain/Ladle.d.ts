/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface LadleInterface extends ethers.utils.Interface {
  functions: {
    "LOCK()": FunctionFragment;
    "ROOT()": FunctionFragment;
    "addJoin(bytes6,address)": FunctionFragment;
    "addPool(bytes6,address)": FunctionFragment;
    "batch(uint8[],bytes[])": FunctionFragment;
    "borrowingFee()": FunctionFragment;
    "cauldron()": FunctionFragment;
    "getRoleAdmin(bytes4)": FunctionFragment;
    "grantRole(bytes4,address)": FunctionFragment;
    "grantRoles(bytes4[],address)": FunctionFragment;
    "hasRole(bytes4,address)": FunctionFragment;
    "joins(bytes6)": FunctionFragment;
    "lockRole(bytes4)": FunctionFragment;
    "modules(address)": FunctionFragment;
    "pools(bytes6)": FunctionFragment;
    "renounceRole(bytes4,address)": FunctionFragment;
    "revokeRole(bytes4,address)": FunctionFragment;
    "revokeRoles(bytes4[],address)": FunctionFragment;
    "setFee(uint256)": FunctionFragment;
    "setModule(address,bool)": FunctionFragment;
    "setRoleAdmin(bytes4,bytes4)": FunctionFragment;
    "settle(bytes12,address,uint128,uint128)": FunctionFragment;
    "weth()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "LOCK", values?: undefined): string;
  encodeFunctionData(functionFragment: "ROOT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addJoin",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addPool",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "batch",
    values: [BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowingFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cauldron", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRoles",
    values: [BytesLike[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "joins", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "lockRole", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "modules", values: [string]): string;
  encodeFunctionData(functionFragment: "pools", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRoles",
    values: [BytesLike[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setModule",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoleAdmin",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "settle",
    values: [BytesLike, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(functionFragment: "LOCK", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ROOT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addJoin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "batch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cauldron", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRoles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "modules", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setModule", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;

  events: {
    "FeeSet(uint256)": EventFragment;
    "JoinAdded(bytes6,address)": EventFragment;
    "ModuleSet(address,bool)": EventFragment;
    "PoolAdded(bytes6,address)": EventFragment;
    "RoleAdminChanged(bytes4,bytes4)": EventFragment;
    "RoleGranted(bytes4,address,address)": EventFragment;
    "RoleRevoked(bytes4,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JoinAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModuleSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export class Ladle extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: LadleInterface;

  functions: {
    LOCK(overrides?: CallOverrides): Promise<[string]>;

    "LOCK()"(overrides?: CallOverrides): Promise<[string]>;

    ROOT(overrides?: CallOverrides): Promise<[string]>;

    "ROOT()"(overrides?: CallOverrides): Promise<[string]>;

    addJoin(
      assetId: BytesLike,
      join: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addJoin(bytes6,address)"(
      assetId: BytesLike,
      join: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addPool(
      seriesId: BytesLike,
      pool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addPool(bytes6,address)"(
      seriesId: BytesLike,
      pool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    batch(
      operations: BigNumberish[],
      data: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "batch(uint8[],bytes[])"(
      operations: BigNumberish[],
      data: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    borrowingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "borrowingFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    cauldron(overrides?: CallOverrides): Promise<[string]>;

    "cauldron()"(overrides?: CallOverrides): Promise<[string]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "getRoleAdmin(bytes4)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    grantRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRoles(bytes4[],address)"(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    joins(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "joins(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    lockRole(
      role: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "lockRole(bytes4)"(
      role: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    modules(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "modules(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    pools(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "pools(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRoles(bytes4[],address)"(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFee(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFee(uint256)"(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setModule(
      module: string,
      set: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setModule(address,bool)"(
      module: string,
      set: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRoleAdmin(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRoleAdmin(bytes4,bytes4)"(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    settle(
      vaultId: BytesLike,
      user: string,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "settle(bytes12,address,uint128,uint128)"(
      vaultId: BytesLike,
      user: string,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    "weth()"(overrides?: CallOverrides): Promise<[string]>;
  };

  LOCK(overrides?: CallOverrides): Promise<string>;

  "LOCK()"(overrides?: CallOverrides): Promise<string>;

  ROOT(overrides?: CallOverrides): Promise<string>;

  "ROOT()"(overrides?: CallOverrides): Promise<string>;

  addJoin(
    assetId: BytesLike,
    join: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addJoin(bytes6,address)"(
    assetId: BytesLike,
    join: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addPool(
    seriesId: BytesLike,
    pool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addPool(bytes6,address)"(
    seriesId: BytesLike,
    pool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  batch(
    operations: BigNumberish[],
    data: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "batch(uint8[],bytes[])"(
    operations: BigNumberish[],
    data: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  borrowingFee(overrides?: CallOverrides): Promise<BigNumber>;

  "borrowingFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  cauldron(overrides?: CallOverrides): Promise<string>;

  "cauldron()"(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes4)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRole(bytes4,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  grantRoles(
    roles: BytesLike[],
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRoles(bytes4[],address)"(
    roles: BytesLike[],
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes4,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  joins(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  "joins(bytes6)"(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  lockRole(
    role: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "lockRole(bytes4)"(
    role: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  modules(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "modules(address)"(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  pools(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  "pools(bytes6)"(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceRole(bytes4,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRole(bytes4,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeRoles(
    roles: BytesLike[],
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRoles(bytes4[],address)"(
    roles: BytesLike[],
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFee(
    fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFee(uint256)"(
    fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setModule(
    module: string,
    set: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setModule(address,bool)"(
    module: string,
    set: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRoleAdmin(
    role: BytesLike,
    adminRole: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRoleAdmin(bytes4,bytes4)"(
    role: BytesLike,
    adminRole: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  settle(
    vaultId: BytesLike,
    user: string,
    ink: BigNumberish,
    art: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "settle(bytes12,address,uint128,uint128)"(
    vaultId: BytesLike,
    user: string,
    ink: BigNumberish,
    art: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  weth(overrides?: CallOverrides): Promise<string>;

  "weth()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    LOCK(overrides?: CallOverrides): Promise<string>;

    "LOCK()"(overrides?: CallOverrides): Promise<string>;

    ROOT(overrides?: CallOverrides): Promise<string>;

    "ROOT()"(overrides?: CallOverrides): Promise<string>;

    addJoin(
      assetId: BytesLike,
      join: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addJoin(bytes6,address)"(
      assetId: BytesLike,
      join: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addPool(
      seriesId: BytesLike,
      pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addPool(bytes6,address)"(
      seriesId: BytesLike,
      pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    batch(
      operations: BigNumberish[],
      data: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "batch(uint8[],bytes[])"(
      operations: BigNumberish[],
      data: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    borrowingFee(overrides?: CallOverrides): Promise<BigNumber>;

    "borrowingFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    cauldron(overrides?: CallOverrides): Promise<string>;

    "cauldron()"(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes4)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    grantRoles(
      roles: BytesLike[],
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRoles(bytes4[],address)"(
      roles: BytesLike[],
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    joins(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    "joins(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    lockRole(role: BytesLike, overrides?: CallOverrides): Promise<void>;

    "lockRole(bytes4)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    modules(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "modules(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    pools(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    "pools(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRoles(
      roles: BytesLike[],
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRoles(bytes4[],address)"(
      roles: BytesLike[],
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFee(fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setFee(uint256)"(
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setModule(
      module: string,
      set: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setModule(address,bool)"(
      module: string,
      set: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoleAdmin(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRoleAdmin(bytes4,bytes4)"(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    settle(
      vaultId: BytesLike,
      user: string,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "settle(bytes12,address,uint128,uint128)"(
      vaultId: BytesLike,
      user: string,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    weth(overrides?: CallOverrides): Promise<string>;

    "weth()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    FeeSet(fee: null): TypedEventFilter<[BigNumber], { fee: BigNumber }>;

    JoinAdded(
      assetId: BytesLike | null,
      join: string | null
    ): TypedEventFilter<[string, string], { assetId: string; join: string }>;

    ModuleSet(
      module: string | null,
      set: boolean | null
    ): TypedEventFilter<[string, boolean], { module: string; set: boolean }>;

    PoolAdded(
      seriesId: BytesLike | null,
      pool: string | null
    ): TypedEventFilter<[string, string], { seriesId: string; pool: string }>;

    RoleAdminChanged(
      role: BytesLike | null,
      newAdminRole: BytesLike | null
    ): TypedEventFilter<
      [string, string],
      { role: string; newAdminRole: string }
    >;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;
  };

  estimateGas: {
    LOCK(overrides?: CallOverrides): Promise<BigNumber>;

    "LOCK()"(overrides?: CallOverrides): Promise<BigNumber>;

    ROOT(overrides?: CallOverrides): Promise<BigNumber>;

    "ROOT()"(overrides?: CallOverrides): Promise<BigNumber>;

    addJoin(
      assetId: BytesLike,
      join: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addJoin(bytes6,address)"(
      assetId: BytesLike,
      join: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addPool(
      seriesId: BytesLike,
      pool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addPool(bytes6,address)"(
      seriesId: BytesLike,
      pool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    batch(
      operations: BigNumberish[],
      data: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "batch(uint8[],bytes[])"(
      operations: BigNumberish[],
      data: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    borrowingFee(overrides?: CallOverrides): Promise<BigNumber>;

    "borrowingFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    cauldron(overrides?: CallOverrides): Promise<BigNumber>;

    "cauldron()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes4)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    grantRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRoles(bytes4[],address)"(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joins(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "joins(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockRole(role: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    "lockRole(bytes4)"(
      role: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    modules(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "modules(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pools(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "pools(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "renounceRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRoles(bytes4[],address)"(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFee(fee: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setFee(uint256)"(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setModule(
      module: string,
      set: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setModule(address,bool)"(
      module: string,
      set: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRoleAdmin(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRoleAdmin(bytes4,bytes4)"(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    settle(
      vaultId: BytesLike,
      user: string,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "settle(bytes12,address,uint128,uint128)"(
      vaultId: BytesLike,
      user: string,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    "weth()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    LOCK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "LOCK()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROOT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ROOT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addJoin(
      assetId: BytesLike,
      join: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addJoin(bytes6,address)"(
      assetId: BytesLike,
      join: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addPool(
      seriesId: BytesLike,
      pool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addPool(bytes6,address)"(
      seriesId: BytesLike,
      pool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    batch(
      operations: BigNumberish[],
      data: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "batch(uint8[],bytes[])"(
      operations: BigNumberish[],
      data: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    borrowingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "borrowingFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cauldron(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cauldron()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes4)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    grantRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRoles(bytes4[],address)"(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joins(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "joins(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockRole(
      role: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "lockRole(bytes4)"(
      role: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    modules(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "modules(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pools(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pools(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRoles(bytes4[],address)"(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFee(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFee(uint256)"(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setModule(
      module: string,
      set: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setModule(address,bool)"(
      module: string,
      set: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRoleAdmin(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRoleAdmin(bytes4,bytes4)"(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    settle(
      vaultId: BytesLike,
      user: string,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "settle(bytes12,address,uint128,uint128)"(
      vaultId: BytesLike,
      user: string,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "weth()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IOracleInterface extends ethers.utils.Interface {
  functions: {
    "get(bytes32,bytes32,uint256)": FunctionFragment;
    "peek(bytes32,bytes32,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "get",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "peek",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "peek", data: BytesLike): Result;

  events: {};
}

export class IOracle extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: IOracleInterface;

  functions: {
    get(
      base: BytesLike,
      quote: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "get(bytes32,bytes32,uint256)"(
      base: BytesLike,
      quote: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    peek(
      base: BytesLike,
      quote: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { value: BigNumber; updateTime: BigNumber }
    >;

    "peek(bytes32,bytes32,uint256)"(
      base: BytesLike,
      quote: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { value: BigNumber; updateTime: BigNumber }
    >;
  };

  get(
    base: BytesLike,
    quote: BytesLike,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "get(bytes32,bytes32,uint256)"(
    base: BytesLike,
    quote: BytesLike,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  peek(
    base: BytesLike,
    quote: BytesLike,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { value: BigNumber; updateTime: BigNumber }
  >;

  "peek(bytes32,bytes32,uint256)"(
    base: BytesLike,
    quote: BytesLike,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { value: BigNumber; updateTime: BigNumber }
  >;

  callStatic: {
    get(
      base: BytesLike,
      quote: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { value: BigNumber; updateTime: BigNumber }
    >;

    "get(bytes32,bytes32,uint256)"(
      base: BytesLike,
      quote: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { value: BigNumber; updateTime: BigNumber }
    >;

    peek(
      base: BytesLike,
      quote: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { value: BigNumber; updateTime: BigNumber }
    >;

    "peek(bytes32,bytes32,uint256)"(
      base: BytesLike,
      quote: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { value: BigNumber; updateTime: BigNumber }
    >;
  };

  filters: {};

  estimateGas: {
    get(
      base: BytesLike,
      quote: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "get(bytes32,bytes32,uint256)"(
      base: BytesLike,
      quote: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    peek(
      base: BytesLike,
      quote: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "peek(bytes32,bytes32,uint256)"(
      base: BytesLike,
      quote: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    get(
      base: BytesLike,
      quote: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "get(bytes32,bytes32,uint256)"(
      base: BytesLike,
      quote: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    peek(
      base: BytesLike,
      quote: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "peek(bytes32,bytes32,uint256)"(
      base: BytesLike,
      quote: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

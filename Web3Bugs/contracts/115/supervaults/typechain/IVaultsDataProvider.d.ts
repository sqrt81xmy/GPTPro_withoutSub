/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IVaultsDataProviderInterface extends ethers.utils.Interface {
  functions: {
    "a()": FunctionFragment;
    "baseDebt(address)": FunctionFragment;
    "collateralDebt(address)": FunctionFragment;
    "createVault(address,address)": FunctionFragment;
    "debt()": FunctionFragment;
    "setBaseDebt(uint256,uint256)": FunctionFragment;
    "setCollateralBalance(uint256,uint256)": FunctionFragment;
    "vaultBaseDebt(uint256)": FunctionFragment;
    "vaultCollateralBalance(uint256)": FunctionFragment;
    "vaultCollateralType(uint256)": FunctionFragment;
    "vaultCount()": FunctionFragment;
    "vaultDebt(uint256)": FunctionFragment;
    "vaultExists(uint256)": FunctionFragment;
    "vaultId(address,address)": FunctionFragment;
    "vaultOwner(uint256)": FunctionFragment;
    "vaults(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "a", values?: undefined): string;
  encodeFunctionData(functionFragment: "baseDebt", values: [string]): string;
  encodeFunctionData(
    functionFragment: "collateralDebt",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createVault",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "debt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBaseDebt",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralBalance",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultBaseDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultCollateralBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultCollateralType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vaultDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultExists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultId",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaults",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "a", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBaseDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultBaseDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultCollateralBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultCollateralType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vaultDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vaultOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vaults", data: BytesLike): Result;

  events: {};
}

export class IVaultsDataProvider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IVaultsDataProviderInterface;

  functions: {
    a(overrides?: CallOverrides): Promise<[string]>;

    baseDebt(
      _collateralType: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    collateralDebt(
      _collateralType: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    createVault(
      _collateralType: string,
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    debt(overrides?: CallOverrides): Promise<[BigNumber]>;

    setBaseDebt(
      _id: BigNumberish,
      _newBaseDebt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCollateralBalance(
      _id: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vaultBaseDebt(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vaultCollateralBalance(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vaultCollateralType(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    vaultCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    vaultDebt(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vaultExists(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    vaultId(
      _collateralType: string,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vaultOwner(_id: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    vaults(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, BigNumber, BigNumber, BigNumber] & {
          collateralType: string;
          owner: string;
          collateralBalance: BigNumber;
          baseDebt: BigNumber;
          createdAt: BigNumber;
        }
      ]
    >;
  };

  a(overrides?: CallOverrides): Promise<string>;

  baseDebt(
    _collateralType: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collateralDebt(
    _collateralType: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createVault(
    _collateralType: string,
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  debt(overrides?: CallOverrides): Promise<BigNumber>;

  setBaseDebt(
    _id: BigNumberish,
    _newBaseDebt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCollateralBalance(
    _id: BigNumberish,
    _balance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vaultBaseDebt(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vaultCollateralBalance(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vaultCollateralType(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  vaultCount(overrides?: CallOverrides): Promise<BigNumber>;

  vaultDebt(
    _vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vaultExists(_id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  vaultId(
    _collateralType: string,
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vaultOwner(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  vaults(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber] & {
      collateralType: string;
      owner: string;
      collateralBalance: BigNumber;
      baseDebt: BigNumber;
      createdAt: BigNumber;
    }
  >;

  callStatic: {
    a(overrides?: CallOverrides): Promise<string>;

    baseDebt(
      _collateralType: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralDebt(
      _collateralType: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createVault(
      _collateralType: string,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debt(overrides?: CallOverrides): Promise<BigNumber>;

    setBaseDebt(
      _id: BigNumberish,
      _newBaseDebt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollateralBalance(
      _id: BigNumberish,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    vaultBaseDebt(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultCollateralBalance(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultCollateralType(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    vaultCount(overrides?: CallOverrides): Promise<BigNumber>;

    vaultDebt(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultExists(_id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    vaultId(
      _collateralType: string,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultOwner(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    vaults(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber] & {
        collateralType: string;
        owner: string;
        collateralBalance: BigNumber;
        baseDebt: BigNumber;
        createdAt: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    a(overrides?: CallOverrides): Promise<BigNumber>;

    baseDebt(
      _collateralType: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralDebt(
      _collateralType: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createVault(
      _collateralType: string,
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    debt(overrides?: CallOverrides): Promise<BigNumber>;

    setBaseDebt(
      _id: BigNumberish,
      _newBaseDebt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCollateralBalance(
      _id: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vaultBaseDebt(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultCollateralBalance(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultCollateralType(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultCount(overrides?: CallOverrides): Promise<BigNumber>;

    vaultDebt(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultExists(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultId(
      _collateralType: string,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultOwner(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaults(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    a(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseDebt(
      _collateralType: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralDebt(
      _collateralType: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createVault(
      _collateralType: string,
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    debt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBaseDebt(
      _id: BigNumberish,
      _newBaseDebt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCollateralBalance(
      _id: BigNumberish,
      _balance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vaultBaseDebt(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultCollateralBalance(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultCollateralType(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultDebt(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultExists(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultId(
      _collateralType: string,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultOwner(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaults(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

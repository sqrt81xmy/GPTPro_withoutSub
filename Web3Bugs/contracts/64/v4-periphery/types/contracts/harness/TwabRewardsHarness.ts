/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace ITwabRewards {
  export type PromotionStruct = {
    creator: PromiseOrValue<string>;
    startTimestamp: PromiseOrValue<BigNumberish>;
    numberOfEpochs: PromiseOrValue<BigNumberish>;
    epochDuration: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
    token: PromiseOrValue<string>;
    tokensPerEpoch: PromiseOrValue<BigNumberish>;
    rewardsUnclaimed: PromiseOrValue<BigNumberish>;
  };

  export type PromotionStructOutput = [
    string,
    BigNumber,
    number,
    number,
    number,
    string,
    BigNumber,
    BigNumber
  ] & {
    creator: string;
    startTimestamp: BigNumber;
    numberOfEpochs: number;
    epochDuration: number;
    createdAt: number;
    token: string;
    tokensPerEpoch: BigNumber;
    rewardsUnclaimed: BigNumber;
  };
}

export interface TwabRewardsHarnessInterface extends utils.Interface {
  functions: {
    "GRACE_PERIOD()": FunctionFragment;
    "claimRewards(address,uint256,uint8[])": FunctionFragment;
    "createPromotion(address,uint64,uint256,uint48,uint8)": FunctionFragment;
    "destroyPromotion(uint256,address)": FunctionFragment;
    "endPromotion(uint256,address)": FunctionFragment;
    "extendPromotion(uint256,uint8)": FunctionFragment;
    "getCurrentEpochId(uint256)": FunctionFragment;
    "getPromotion(uint256)": FunctionFragment;
    "getRemainingRewards(uint256)": FunctionFragment;
    "getRewardsAmount(address,uint256,uint8[])": FunctionFragment;
    "isClaimedEpoch(uint256,uint8)": FunctionFragment;
    "requireTicket(address)": FunctionFragment;
    "ticket()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "GRACE_PERIOD"
      | "claimRewards"
      | "createPromotion"
      | "destroyPromotion"
      | "endPromotion"
      | "extendPromotion"
      | "getCurrentEpochId"
      | "getPromotion"
      | "getRemainingRewards"
      | "getRewardsAmount"
      | "isClaimedEpoch"
      | "requireTicket"
      | "ticket"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "GRACE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createPromotion",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "destroyPromotion",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "endPromotion",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "extendPromotion",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentEpochId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPromotion",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRemainingRewards",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsAmount",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isClaimedEpoch",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "requireTicket",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "ticket", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "GRACE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPromotion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "destroyPromotion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endPromotion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extendPromotion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentEpochId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPromotion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isClaimedEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ticket", data: BytesLike): Result;

  events: {
    "PromotionCreated(uint256)": EventFragment;
    "PromotionDestroyed(uint256,address,uint256)": EventFragment;
    "PromotionEnded(uint256,address,uint256,uint8)": EventFragment;
    "PromotionExtended(uint256,uint256)": EventFragment;
    "RewardsClaimed(uint256,uint8[],address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PromotionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PromotionDestroyed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PromotionEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PromotionExtended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
}

export interface PromotionCreatedEventObject {
  promotionId: BigNumber;
}
export type PromotionCreatedEvent = TypedEvent<
  [BigNumber],
  PromotionCreatedEventObject
>;

export type PromotionCreatedEventFilter =
  TypedEventFilter<PromotionCreatedEvent>;

export interface PromotionDestroyedEventObject {
  promotionId: BigNumber;
  recipient: string;
  amount: BigNumber;
}
export type PromotionDestroyedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  PromotionDestroyedEventObject
>;

export type PromotionDestroyedEventFilter =
  TypedEventFilter<PromotionDestroyedEvent>;

export interface PromotionEndedEventObject {
  promotionId: BigNumber;
  recipient: string;
  amount: BigNumber;
  epochNumber: number;
}
export type PromotionEndedEvent = TypedEvent<
  [BigNumber, string, BigNumber, number],
  PromotionEndedEventObject
>;

export type PromotionEndedEventFilter = TypedEventFilter<PromotionEndedEvent>;

export interface PromotionExtendedEventObject {
  promotionId: BigNumber;
  numberOfEpochs: BigNumber;
}
export type PromotionExtendedEvent = TypedEvent<
  [BigNumber, BigNumber],
  PromotionExtendedEventObject
>;

export type PromotionExtendedEventFilter =
  TypedEventFilter<PromotionExtendedEvent>;

export interface RewardsClaimedEventObject {
  promotionId: BigNumber;
  epochIds: number[];
  user: string;
  amount: BigNumber;
}
export type RewardsClaimedEvent = TypedEvent<
  [BigNumber, number[], string, BigNumber],
  RewardsClaimedEventObject
>;

export type RewardsClaimedEventFilter = TypedEventFilter<RewardsClaimedEvent>;

export interface TwabRewardsHarness extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TwabRewardsHarnessInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    GRACE_PERIOD(overrides?: CallOverrides): Promise<[number]>;

    claimRewards(
      _user: PromiseOrValue<string>,
      _promotionId: PromiseOrValue<BigNumberish>,
      _epochIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createPromotion(
      _token: PromiseOrValue<string>,
      _startTimestamp: PromiseOrValue<BigNumberish>,
      _tokensPerEpoch: PromiseOrValue<BigNumberish>,
      _epochDuration: PromiseOrValue<BigNumberish>,
      _numberOfEpochs: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    destroyPromotion(
      _promotionId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    endPromotion(
      _promotionId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    extendPromotion(
      _promotionId: PromiseOrValue<BigNumberish>,
      _numberOfEpochs: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCurrentEpochId(
      _promotionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPromotion(
      _promotionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ITwabRewards.PromotionStructOutput]>;

    getRemainingRewards(
      _promotionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRewardsAmount(
      _user: PromiseOrValue<string>,
      _promotionId: PromiseOrValue<BigNumberish>,
      _epochIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    isClaimedEpoch(
      _userClaimedEpochs: PromiseOrValue<BigNumberish>,
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    requireTicket(
      _ticket: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    ticket(overrides?: CallOverrides): Promise<[string]>;
  };

  GRACE_PERIOD(overrides?: CallOverrides): Promise<number>;

  claimRewards(
    _user: PromiseOrValue<string>,
    _promotionId: PromiseOrValue<BigNumberish>,
    _epochIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createPromotion(
    _token: PromiseOrValue<string>,
    _startTimestamp: PromiseOrValue<BigNumberish>,
    _tokensPerEpoch: PromiseOrValue<BigNumberish>,
    _epochDuration: PromiseOrValue<BigNumberish>,
    _numberOfEpochs: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  destroyPromotion(
    _promotionId: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  endPromotion(
    _promotionId: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  extendPromotion(
    _promotionId: PromiseOrValue<BigNumberish>,
    _numberOfEpochs: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCurrentEpochId(
    _promotionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPromotion(
    _promotionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ITwabRewards.PromotionStructOutput>;

  getRemainingRewards(
    _promotionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRewardsAmount(
    _user: PromiseOrValue<string>,
    _promotionId: PromiseOrValue<BigNumberish>,
    _epochIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  isClaimedEpoch(
    _userClaimedEpochs: PromiseOrValue<BigNumberish>,
    _epochId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  requireTicket(
    _ticket: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  ticket(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    GRACE_PERIOD(overrides?: CallOverrides): Promise<number>;

    claimRewards(
      _user: PromiseOrValue<string>,
      _promotionId: PromiseOrValue<BigNumberish>,
      _epochIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createPromotion(
      _token: PromiseOrValue<string>,
      _startTimestamp: PromiseOrValue<BigNumberish>,
      _tokensPerEpoch: PromiseOrValue<BigNumberish>,
      _epochDuration: PromiseOrValue<BigNumberish>,
      _numberOfEpochs: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    destroyPromotion(
      _promotionId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    endPromotion(
      _promotionId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    extendPromotion(
      _promotionId: PromiseOrValue<BigNumberish>,
      _numberOfEpochs: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getCurrentEpochId(
      _promotionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPromotion(
      _promotionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ITwabRewards.PromotionStructOutput>;

    getRemainingRewards(
      _promotionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardsAmount(
      _user: PromiseOrValue<string>,
      _promotionId: PromiseOrValue<BigNumberish>,
      _epochIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    isClaimedEpoch(
      _userClaimedEpochs: PromiseOrValue<BigNumberish>,
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    requireTicket(
      _ticket: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    ticket(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "PromotionCreated(uint256)"(
      promotionId?: PromiseOrValue<BigNumberish> | null
    ): PromotionCreatedEventFilter;
    PromotionCreated(
      promotionId?: PromiseOrValue<BigNumberish> | null
    ): PromotionCreatedEventFilter;

    "PromotionDestroyed(uint256,address,uint256)"(
      promotionId?: PromiseOrValue<BigNumberish> | null,
      recipient?: PromiseOrValue<string> | null,
      amount?: null
    ): PromotionDestroyedEventFilter;
    PromotionDestroyed(
      promotionId?: PromiseOrValue<BigNumberish> | null,
      recipient?: PromiseOrValue<string> | null,
      amount?: null
    ): PromotionDestroyedEventFilter;

    "PromotionEnded(uint256,address,uint256,uint8)"(
      promotionId?: PromiseOrValue<BigNumberish> | null,
      recipient?: PromiseOrValue<string> | null,
      amount?: null,
      epochNumber?: null
    ): PromotionEndedEventFilter;
    PromotionEnded(
      promotionId?: PromiseOrValue<BigNumberish> | null,
      recipient?: PromiseOrValue<string> | null,
      amount?: null,
      epochNumber?: null
    ): PromotionEndedEventFilter;

    "PromotionExtended(uint256,uint256)"(
      promotionId?: PromiseOrValue<BigNumberish> | null,
      numberOfEpochs?: null
    ): PromotionExtendedEventFilter;
    PromotionExtended(
      promotionId?: PromiseOrValue<BigNumberish> | null,
      numberOfEpochs?: null
    ): PromotionExtendedEventFilter;

    "RewardsClaimed(uint256,uint8[],address,uint256)"(
      promotionId?: PromiseOrValue<BigNumberish> | null,
      epochIds?: null,
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): RewardsClaimedEventFilter;
    RewardsClaimed(
      promotionId?: PromiseOrValue<BigNumberish> | null,
      epochIds?: null,
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): RewardsClaimedEventFilter;
  };

  estimateGas: {
    GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    claimRewards(
      _user: PromiseOrValue<string>,
      _promotionId: PromiseOrValue<BigNumberish>,
      _epochIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createPromotion(
      _token: PromiseOrValue<string>,
      _startTimestamp: PromiseOrValue<BigNumberish>,
      _tokensPerEpoch: PromiseOrValue<BigNumberish>,
      _epochDuration: PromiseOrValue<BigNumberish>,
      _numberOfEpochs: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    destroyPromotion(
      _promotionId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    endPromotion(
      _promotionId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    extendPromotion(
      _promotionId: PromiseOrValue<BigNumberish>,
      _numberOfEpochs: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCurrentEpochId(
      _promotionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPromotion(
      _promotionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRemainingRewards(
      _promotionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardsAmount(
      _user: PromiseOrValue<string>,
      _promotionId: PromiseOrValue<BigNumberish>,
      _epochIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isClaimedEpoch(
      _userClaimedEpochs: PromiseOrValue<BigNumberish>,
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requireTicket(
      _ticket: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ticket(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    GRACE_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimRewards(
      _user: PromiseOrValue<string>,
      _promotionId: PromiseOrValue<BigNumberish>,
      _epochIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createPromotion(
      _token: PromiseOrValue<string>,
      _startTimestamp: PromiseOrValue<BigNumberish>,
      _tokensPerEpoch: PromiseOrValue<BigNumberish>,
      _epochDuration: PromiseOrValue<BigNumberish>,
      _numberOfEpochs: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    destroyPromotion(
      _promotionId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    endPromotion(
      _promotionId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    extendPromotion(
      _promotionId: PromiseOrValue<BigNumberish>,
      _numberOfEpochs: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentEpochId(
      _promotionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPromotion(
      _promotionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRemainingRewards(
      _promotionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardsAmount(
      _user: PromiseOrValue<string>,
      _promotionId: PromiseOrValue<BigNumberish>,
      _epochIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isClaimedEpoch(
      _userClaimedEpochs: PromiseOrValue<BigNumberish>,
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requireTicket(
      _ticket: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ticket(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

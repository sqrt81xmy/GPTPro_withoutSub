/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace IDrawBeacon {
  export type DrawStruct = {
    winningRandomNumber: PromiseOrValue<BigNumberish>;
    drawId: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
    beaconPeriodStartedAt: PromiseOrValue<BigNumberish>;
    beaconPeriodSeconds: PromiseOrValue<BigNumberish>;
  };

  export type DrawStructOutput = [
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    number
  ] & {
    winningRandomNumber: BigNumber;
    drawId: number;
    timestamp: BigNumber;
    beaconPeriodStartedAt: BigNumber;
    beaconPeriodSeconds: number;
  };
}

export interface DrawDispatcherInterface extends utils.Interface {
  functions: {
    "dispatchDraw(address,uint256,address,uint32)": FunctionFragment;
    "dispatchDraws(address,uint256,address,uint32[])": FunctionFragment;
    "dispatchNewestDraw(address,uint256,address)": FunctionFragment;
    "drawBuffer()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "dispatchDraw"
      | "dispatchDraws"
      | "dispatchNewestDraw"
      | "drawBuffer"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "dispatchDraw",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "dispatchDraws",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "dispatchNewestDraw",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "drawBuffer",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "dispatchDraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dispatchDraws",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dispatchNewestDraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "drawBuffer", data: BytesLike): Result;

  events: {
    "DrawDispatched(address,uint256,address,tuple)": EventFragment;
    "DrawsDispatched(address,uint256,address,tuple[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DrawDispatched"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DrawsDispatched"): EventFragment;
}

export interface DrawDispatchedEventObject {
  dispatcher: string;
  toChainId: BigNumber;
  drawExecutor: string;
  draw: IDrawBeacon.DrawStructOutput;
}
export type DrawDispatchedEvent = TypedEvent<
  [string, BigNumber, string, IDrawBeacon.DrawStructOutput],
  DrawDispatchedEventObject
>;

export type DrawDispatchedEventFilter = TypedEventFilter<DrawDispatchedEvent>;

export interface DrawsDispatchedEventObject {
  dispatcher: string;
  toChainId: BigNumber;
  drawExecutor: string;
  draws: IDrawBeacon.DrawStructOutput[];
}
export type DrawsDispatchedEvent = TypedEvent<
  [string, BigNumber, string, IDrawBeacon.DrawStructOutput[]],
  DrawsDispatchedEventObject
>;

export type DrawsDispatchedEventFilter = TypedEventFilter<DrawsDispatchedEvent>;

export interface DrawDispatcher extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DrawDispatcherInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    dispatchDraw(
      _dispatcher: PromiseOrValue<string>,
      _toChainId: PromiseOrValue<BigNumberish>,
      _drawExecutor: PromiseOrValue<string>,
      _drawId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dispatchDraws(
      _dispatcher: PromiseOrValue<string>,
      _toChainId: PromiseOrValue<BigNumberish>,
      _drawExecutor: PromiseOrValue<string>,
      _drawIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dispatchNewestDraw(
      _dispatcher: PromiseOrValue<string>,
      _toChainId: PromiseOrValue<BigNumberish>,
      _drawExecutor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    drawBuffer(overrides?: CallOverrides): Promise<[string]>;
  };

  dispatchDraw(
    _dispatcher: PromiseOrValue<string>,
    _toChainId: PromiseOrValue<BigNumberish>,
    _drawExecutor: PromiseOrValue<string>,
    _drawId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dispatchDraws(
    _dispatcher: PromiseOrValue<string>,
    _toChainId: PromiseOrValue<BigNumberish>,
    _drawExecutor: PromiseOrValue<string>,
    _drawIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dispatchNewestDraw(
    _dispatcher: PromiseOrValue<string>,
    _toChainId: PromiseOrValue<BigNumberish>,
    _drawExecutor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  drawBuffer(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    dispatchDraw(
      _dispatcher: PromiseOrValue<string>,
      _toChainId: PromiseOrValue<BigNumberish>,
      _drawExecutor: PromiseOrValue<string>,
      _drawId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    dispatchDraws(
      _dispatcher: PromiseOrValue<string>,
      _toChainId: PromiseOrValue<BigNumberish>,
      _drawExecutor: PromiseOrValue<string>,
      _drawIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    dispatchNewestDraw(
      _dispatcher: PromiseOrValue<string>,
      _toChainId: PromiseOrValue<BigNumberish>,
      _drawExecutor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    drawBuffer(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "DrawDispatched(address,uint256,address,tuple)"(
      dispatcher?: PromiseOrValue<string> | null,
      toChainId?: PromiseOrValue<BigNumberish> | null,
      drawExecutor?: PromiseOrValue<string> | null,
      draw?: null
    ): DrawDispatchedEventFilter;
    DrawDispatched(
      dispatcher?: PromiseOrValue<string> | null,
      toChainId?: PromiseOrValue<BigNumberish> | null,
      drawExecutor?: PromiseOrValue<string> | null,
      draw?: null
    ): DrawDispatchedEventFilter;

    "DrawsDispatched(address,uint256,address,tuple[])"(
      dispatcher?: PromiseOrValue<string> | null,
      toChainId?: PromiseOrValue<BigNumberish> | null,
      drawExecutor?: PromiseOrValue<string> | null,
      draws?: null
    ): DrawsDispatchedEventFilter;
    DrawsDispatched(
      dispatcher?: PromiseOrValue<string> | null,
      toChainId?: PromiseOrValue<BigNumberish> | null,
      drawExecutor?: PromiseOrValue<string> | null,
      draws?: null
    ): DrawsDispatchedEventFilter;
  };

  estimateGas: {
    dispatchDraw(
      _dispatcher: PromiseOrValue<string>,
      _toChainId: PromiseOrValue<BigNumberish>,
      _drawExecutor: PromiseOrValue<string>,
      _drawId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dispatchDraws(
      _dispatcher: PromiseOrValue<string>,
      _toChainId: PromiseOrValue<BigNumberish>,
      _drawExecutor: PromiseOrValue<string>,
      _drawIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dispatchNewestDraw(
      _dispatcher: PromiseOrValue<string>,
      _toChainId: PromiseOrValue<BigNumberish>,
      _drawExecutor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    drawBuffer(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    dispatchDraw(
      _dispatcher: PromiseOrValue<string>,
      _toChainId: PromiseOrValue<BigNumberish>,
      _drawExecutor: PromiseOrValue<string>,
      _drawId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dispatchDraws(
      _dispatcher: PromiseOrValue<string>,
      _toChainId: PromiseOrValue<BigNumberish>,
      _drawExecutor: PromiseOrValue<string>,
      _drawIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dispatchNewestDraw(
      _dispatcher: PromiseOrValue<string>,
      _toChainId: PromiseOrValue<BigNumberish>,
      _drawExecutor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    drawBuffer(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

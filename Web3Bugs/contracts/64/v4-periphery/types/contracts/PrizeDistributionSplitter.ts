/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace IPrizeDistributionSource {
  export type PrizeDistributionStruct = {
    bitRangeSize: PromiseOrValue<BigNumberish>;
    matchCardinality: PromiseOrValue<BigNumberish>;
    startTimestampOffset: PromiseOrValue<BigNumberish>;
    endTimestampOffset: PromiseOrValue<BigNumberish>;
    maxPicksPerUser: PromiseOrValue<BigNumberish>;
    expiryDuration: PromiseOrValue<BigNumberish>;
    numberOfPicks: PromiseOrValue<BigNumberish>;
    tiers: PromiseOrValue<BigNumberish>[];
    prize: PromiseOrValue<BigNumberish>;
  };

  export type PrizeDistributionStructOutput = [
    number,
    number,
    number,
    number,
    number,
    number,
    BigNumber,
    number[],
    BigNumber
  ] & {
    bitRangeSize: number;
    matchCardinality: number;
    startTimestampOffset: number;
    endTimestampOffset: number;
    maxPicksPerUser: number;
    expiryDuration: number;
    numberOfPicks: BigNumber;
    tiers: number[];
    prize: BigNumber;
  };
}

export interface PrizeDistributionSplitterInterface extends utils.Interface {
  functions: {
    "drawId()": FunctionFragment;
    "getPrizeDistributions(uint32[])": FunctionFragment;
    "prizeDistributionSourceAtOrAfter()": FunctionFragment;
    "prizeDistributionSourceBefore()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "drawId"
      | "getPrizeDistributions"
      | "prizeDistributionSourceAtOrAfter"
      | "prizeDistributionSourceBefore"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "drawId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPrizeDistributions",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "prizeDistributionSourceAtOrAfter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "prizeDistributionSourceBefore",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "drawId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPrizeDistributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prizeDistributionSourceAtOrAfter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prizeDistributionSourceBefore",
    data: BytesLike
  ): Result;

  events: {
    "DrawIdSet(uint32)": EventFragment;
    "PrizeDistributionSourcesSet(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DrawIdSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PrizeDistributionSourcesSet"
  ): EventFragment;
}

export interface DrawIdSetEventObject {
  drawId: number;
}
export type DrawIdSetEvent = TypedEvent<[number], DrawIdSetEventObject>;

export type DrawIdSetEventFilter = TypedEventFilter<DrawIdSetEvent>;

export interface PrizeDistributionSourcesSetEventObject {
  prizeDistributionSourceBefore: string;
  prizeDistributionSourceAtOrAfter: string;
}
export type PrizeDistributionSourcesSetEvent = TypedEvent<
  [string, string],
  PrizeDistributionSourcesSetEventObject
>;

export type PrizeDistributionSourcesSetEventFilter =
  TypedEventFilter<PrizeDistributionSourcesSetEvent>;

export interface PrizeDistributionSplitter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PrizeDistributionSplitterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    drawId(overrides?: CallOverrides): Promise<[number]>;

    getPrizeDistributions(
      _drawIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[IPrizeDistributionSource.PrizeDistributionStructOutput[]]>;

    prizeDistributionSourceAtOrAfter(
      overrides?: CallOverrides
    ): Promise<[string]>;

    prizeDistributionSourceBefore(overrides?: CallOverrides): Promise<[string]>;
  };

  drawId(overrides?: CallOverrides): Promise<number>;

  getPrizeDistributions(
    _drawIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<IPrizeDistributionSource.PrizeDistributionStructOutput[]>;

  prizeDistributionSourceAtOrAfter(overrides?: CallOverrides): Promise<string>;

  prizeDistributionSourceBefore(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    drawId(overrides?: CallOverrides): Promise<number>;

    getPrizeDistributions(
      _drawIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<IPrizeDistributionSource.PrizeDistributionStructOutput[]>;

    prizeDistributionSourceAtOrAfter(
      overrides?: CallOverrides
    ): Promise<string>;

    prizeDistributionSourceBefore(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "DrawIdSet(uint32)"(drawId?: null): DrawIdSetEventFilter;
    DrawIdSet(drawId?: null): DrawIdSetEventFilter;

    "PrizeDistributionSourcesSet(address,address)"(
      prizeDistributionSourceBefore?: null,
      prizeDistributionSourceAtOrAfter?: null
    ): PrizeDistributionSourcesSetEventFilter;
    PrizeDistributionSourcesSet(
      prizeDistributionSourceBefore?: null,
      prizeDistributionSourceAtOrAfter?: null
    ): PrizeDistributionSourcesSetEventFilter;
  };

  estimateGas: {
    drawId(overrides?: CallOverrides): Promise<BigNumber>;

    getPrizeDistributions(
      _drawIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prizeDistributionSourceAtOrAfter(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prizeDistributionSourceBefore(
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    drawId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPrizeDistributions(
      _drawIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prizeDistributionSourceAtOrAfter(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prizeDistributionSourceBefore(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

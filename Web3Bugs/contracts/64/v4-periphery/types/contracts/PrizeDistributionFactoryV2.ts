/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace IPrizeDistributionSource {
  export type PrizeDistributionStruct = {
    bitRangeSize: PromiseOrValue<BigNumberish>;
    matchCardinality: PromiseOrValue<BigNumberish>;
    startTimestampOffset: PromiseOrValue<BigNumberish>;
    endTimestampOffset: PromiseOrValue<BigNumberish>;
    maxPicksPerUser: PromiseOrValue<BigNumberish>;
    expiryDuration: PromiseOrValue<BigNumberish>;
    numberOfPicks: PromiseOrValue<BigNumberish>;
    tiers: PromiseOrValue<BigNumberish>[];
    prize: PromiseOrValue<BigNumberish>;
  };

  export type PrizeDistributionStructOutput = [
    number,
    number,
    number,
    number,
    number,
    number,
    BigNumber,
    number[],
    BigNumber
  ] & {
    bitRangeSize: number;
    matchCardinality: number;
    startTimestampOffset: number;
    endTimestampOffset: number;
    maxPicksPerUser: number;
    expiryDuration: number;
    numberOfPicks: BigNumber;
    tiers: number[];
    prize: BigNumber;
  };
}

export interface PrizeDistributionFactoryV2Interface extends utils.Interface {
  functions: {
    "RATE_NORMALIZATION()": FunctionFragment;
    "calculatePrizeDistribution(uint32)": FunctionFragment;
    "claimOwnership()": FunctionFragment;
    "drawBuffer()": FunctionFragment;
    "minPickCost()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "prizeDistributionBuffer()": FunctionFragment;
    "prizeTierHistory()": FunctionFragment;
    "pushPrizeDistribution(uint32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setPrizeDistribution(uint32)": FunctionFragment;
    "ticket()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "RATE_NORMALIZATION"
      | "calculatePrizeDistribution"
      | "claimOwnership"
      | "drawBuffer"
      | "minPickCost"
      | "owner"
      | "pendingOwner"
      | "prizeDistributionBuffer"
      | "prizeTierHistory"
      | "pushPrizeDistribution"
      | "renounceOwnership"
      | "setPrizeDistribution"
      | "ticket"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "RATE_NORMALIZATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePrizeDistribution",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "drawBuffer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minPickCost",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "prizeDistributionBuffer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "prizeTierHistory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pushPrizeDistribution",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPrizeDistribution",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "ticket", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "RATE_NORMALIZATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePrizeDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "drawBuffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minPickCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prizeDistributionBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prizeTierHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pushPrizeDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPrizeDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ticket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipOffered(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PrizeDistributionPushed(uint32)": EventFragment;
    "PrizeDistributionSet(uint32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipOffered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PrizeDistributionPushed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PrizeDistributionSet"): EventFragment;
}

export interface OwnershipOfferedEventObject {
  pendingOwner: string;
}
export type OwnershipOfferedEvent = TypedEvent<
  [string],
  OwnershipOfferedEventObject
>;

export type OwnershipOfferedEventFilter =
  TypedEventFilter<OwnershipOfferedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PrizeDistributionPushedEventObject {
  drawId: number;
}
export type PrizeDistributionPushedEvent = TypedEvent<
  [number],
  PrizeDistributionPushedEventObject
>;

export type PrizeDistributionPushedEventFilter =
  TypedEventFilter<PrizeDistributionPushedEvent>;

export interface PrizeDistributionSetEventObject {
  drawId: number;
}
export type PrizeDistributionSetEvent = TypedEvent<
  [number],
  PrizeDistributionSetEventObject
>;

export type PrizeDistributionSetEventFilter =
  TypedEventFilter<PrizeDistributionSetEvent>;

export interface PrizeDistributionFactoryV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PrizeDistributionFactoryV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    RATE_NORMALIZATION(overrides?: CallOverrides): Promise<[number]>;

    calculatePrizeDistribution(
      _drawId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IPrizeDistributionSource.PrizeDistributionStructOutput]>;

    claimOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    drawBuffer(overrides?: CallOverrides): Promise<[string]>;

    minPickCost(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    prizeDistributionBuffer(overrides?: CallOverrides): Promise<[string]>;

    prizeTierHistory(overrides?: CallOverrides): Promise<[string]>;

    pushPrizeDistribution(
      _drawId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPrizeDistribution(
      _drawId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ticket(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  RATE_NORMALIZATION(overrides?: CallOverrides): Promise<number>;

  calculatePrizeDistribution(
    _drawId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IPrizeDistributionSource.PrizeDistributionStructOutput>;

  claimOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  drawBuffer(overrides?: CallOverrides): Promise<string>;

  minPickCost(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  prizeDistributionBuffer(overrides?: CallOverrides): Promise<string>;

  prizeTierHistory(overrides?: CallOverrides): Promise<string>;

  pushPrizeDistribution(
    _drawId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPrizeDistribution(
    _drawId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ticket(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    _newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    RATE_NORMALIZATION(overrides?: CallOverrides): Promise<number>;

    calculatePrizeDistribution(
      _drawId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IPrizeDistributionSource.PrizeDistributionStructOutput>;

    claimOwnership(overrides?: CallOverrides): Promise<void>;

    drawBuffer(overrides?: CallOverrides): Promise<string>;

    minPickCost(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    prizeDistributionBuffer(overrides?: CallOverrides): Promise<string>;

    prizeTierHistory(overrides?: CallOverrides): Promise<string>;

    pushPrizeDistribution(
      _drawId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IPrizeDistributionSource.PrizeDistributionStructOutput>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setPrizeDistribution(
      _drawId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IPrizeDistributionSource.PrizeDistributionStructOutput>;

    ticket(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipOffered(address)"(
      pendingOwner?: PromiseOrValue<string> | null
    ): OwnershipOfferedEventFilter;
    OwnershipOffered(
      pendingOwner?: PromiseOrValue<string> | null
    ): OwnershipOfferedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PrizeDistributionPushed(uint32)"(
      drawId?: PromiseOrValue<BigNumberish> | null
    ): PrizeDistributionPushedEventFilter;
    PrizeDistributionPushed(
      drawId?: PromiseOrValue<BigNumberish> | null
    ): PrizeDistributionPushedEventFilter;

    "PrizeDistributionSet(uint32)"(
      drawId?: PromiseOrValue<BigNumberish> | null
    ): PrizeDistributionSetEventFilter;
    PrizeDistributionSet(
      drawId?: PromiseOrValue<BigNumberish> | null
    ): PrizeDistributionSetEventFilter;
  };

  estimateGas: {
    RATE_NORMALIZATION(overrides?: CallOverrides): Promise<BigNumber>;

    calculatePrizeDistribution(
      _drawId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    drawBuffer(overrides?: CallOverrides): Promise<BigNumber>;

    minPickCost(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    prizeDistributionBuffer(overrides?: CallOverrides): Promise<BigNumber>;

    prizeTierHistory(overrides?: CallOverrides): Promise<BigNumber>;

    pushPrizeDistribution(
      _drawId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPrizeDistribution(
      _drawId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ticket(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    RATE_NORMALIZATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculatePrizeDistribution(
      _drawId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    drawBuffer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minPickCost(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prizeDistributionBuffer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prizeTierHistory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pushPrizeDistribution(
      _drawId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPrizeDistribution(
      _drawId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ticket(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

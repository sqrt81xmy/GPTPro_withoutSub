/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IMessageExecutor {
  export type MessageStruct = {
    to: PromiseOrValue<string>;
    data: PromiseOrValue<BytesLike>;
  };

  export type MessageStructOutput = [string, string] & {
    to: string;
    data: string;
  };
}

export interface IMessageExecutorInterface extends utils.Interface {
  functions: {
    "executeMessage(address,bytes,bytes32,uint256,address)": FunctionFragment;
    "executeMessageBatch((address,bytes)[],bytes32,uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "executeMessage" | "executeMessageBatch"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "executeMessage",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeMessageBatch",
    values: [
      IMessageExecutor.MessageStruct[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "executeMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMessageBatch",
    data: BytesLike
  ): Result;

  events: {
    "MessageIdExecuted(uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MessageIdExecuted"): EventFragment;
}

export interface MessageIdExecutedEventObject {
  fromChainId: BigNumber;
  messageId: string;
}
export type MessageIdExecutedEvent = TypedEvent<
  [BigNumber, string],
  MessageIdExecutedEventObject
>;

export type MessageIdExecutedEventFilter =
  TypedEventFilter<MessageIdExecutedEvent>;

export interface IMessageExecutor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMessageExecutorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    executeMessage(
      to: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      messageId: PromiseOrValue<BytesLike>,
      fromChainId: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeMessageBatch(
      messages: IMessageExecutor.MessageStruct[],
      messageId: PromiseOrValue<BytesLike>,
      fromChainId: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  executeMessage(
    to: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    messageId: PromiseOrValue<BytesLike>,
    fromChainId: PromiseOrValue<BigNumberish>,
    from: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeMessageBatch(
    messages: IMessageExecutor.MessageStruct[],
    messageId: PromiseOrValue<BytesLike>,
    fromChainId: PromiseOrValue<BigNumberish>,
    from: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    executeMessage(
      to: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      messageId: PromiseOrValue<BytesLike>,
      fromChainId: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeMessageBatch(
      messages: IMessageExecutor.MessageStruct[],
      messageId: PromiseOrValue<BytesLike>,
      fromChainId: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "MessageIdExecuted(uint256,bytes32)"(
      fromChainId?: PromiseOrValue<BigNumberish> | null,
      messageId?: PromiseOrValue<BytesLike> | null
    ): MessageIdExecutedEventFilter;
    MessageIdExecuted(
      fromChainId?: PromiseOrValue<BigNumberish> | null,
      messageId?: PromiseOrValue<BytesLike> | null
    ): MessageIdExecutedEventFilter;
  };

  estimateGas: {
    executeMessage(
      to: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      messageId: PromiseOrValue<BytesLike>,
      fromChainId: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeMessageBatch(
      messages: IMessageExecutor.MessageStruct[],
      messageId: PromiseOrValue<BytesLike>,
      fromChainId: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    executeMessage(
      to: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      messageId: PromiseOrValue<BytesLike>,
      fromChainId: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeMessageBatch(
      messages: IMessageExecutor.MessageStruct[],
      messageId: PromiseOrValue<BytesLike>,
      fromChainId: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

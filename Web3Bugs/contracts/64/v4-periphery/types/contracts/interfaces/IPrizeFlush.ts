/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IPrizeFlushInterface extends utils.Interface {
  functions: {
    "flush()": FunctionFragment;
    "getDestination()": FunctionFragment;
    "getReserve()": FunctionFragment;
    "getStrategy()": FunctionFragment;
    "setDestination(address)": FunctionFragment;
    "setReserve(address)": FunctionFragment;
    "setStrategy(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "flush"
      | "getDestination"
      | "getReserve"
      | "getStrategy"
      | "setDestination"
      | "setReserve"
      | "setStrategy"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "flush", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getDestination",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReserve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStrategy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDestination",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserve",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategy",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "flush", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDestination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReserve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDestination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setReserve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStrategy",
    data: BytesLike
  ): Result;

  events: {
    "DestinationSet(address)": EventFragment;
    "Flushed(address,uint256)": EventFragment;
    "ReserveSet(address)": EventFragment;
    "StrategySet(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DestinationSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Flushed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategySet"): EventFragment;
}

export interface DestinationSetEventObject {
  destination: string;
}
export type DestinationSetEvent = TypedEvent<
  [string],
  DestinationSetEventObject
>;

export type DestinationSetEventFilter = TypedEventFilter<DestinationSetEvent>;

export interface FlushedEventObject {
  destination: string;
  amount: BigNumber;
}
export type FlushedEvent = TypedEvent<[string, BigNumber], FlushedEventObject>;

export type FlushedEventFilter = TypedEventFilter<FlushedEvent>;

export interface ReserveSetEventObject {
  reserve: string;
}
export type ReserveSetEvent = TypedEvent<[string], ReserveSetEventObject>;

export type ReserveSetEventFilter = TypedEventFilter<ReserveSetEvent>;

export interface StrategySetEventObject {
  strategy: string;
}
export type StrategySetEvent = TypedEvent<[string], StrategySetEventObject>;

export type StrategySetEventFilter = TypedEventFilter<StrategySetEvent>;

export interface IPrizeFlush extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPrizeFlushInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    flush(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getDestination(overrides?: CallOverrides): Promise<[string]>;

    getReserve(overrides?: CallOverrides): Promise<[string]>;

    getStrategy(overrides?: CallOverrides): Promise<[string]>;

    setDestination(
      _destination: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReserve(
      _reserve: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStrategy(
      _strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  flush(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getDestination(overrides?: CallOverrides): Promise<string>;

  getReserve(overrides?: CallOverrides): Promise<string>;

  getStrategy(overrides?: CallOverrides): Promise<string>;

  setDestination(
    _destination: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReserve(
    _reserve: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStrategy(
    _strategy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    flush(overrides?: CallOverrides): Promise<boolean>;

    getDestination(overrides?: CallOverrides): Promise<string>;

    getReserve(overrides?: CallOverrides): Promise<string>;

    getStrategy(overrides?: CallOverrides): Promise<string>;

    setDestination(
      _destination: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    setReserve(
      _reserve: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    setStrategy(
      _strategy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "DestinationSet(address)"(destination?: null): DestinationSetEventFilter;
    DestinationSet(destination?: null): DestinationSetEventFilter;

    "Flushed(address,uint256)"(
      destination?: PromiseOrValue<string> | null,
      amount?: null
    ): FlushedEventFilter;
    Flushed(
      destination?: PromiseOrValue<string> | null,
      amount?: null
    ): FlushedEventFilter;

    "ReserveSet(address)"(reserve?: null): ReserveSetEventFilter;
    ReserveSet(reserve?: null): ReserveSetEventFilter;

    "StrategySet(address)"(strategy?: null): StrategySetEventFilter;
    StrategySet(strategy?: null): StrategySetEventFilter;
  };

  estimateGas: {
    flush(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getDestination(overrides?: CallOverrides): Promise<BigNumber>;

    getReserve(overrides?: CallOverrides): Promise<BigNumber>;

    getStrategy(overrides?: CallOverrides): Promise<BigNumber>;

    setDestination(
      _destination: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReserve(
      _reserve: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStrategy(
      _strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    flush(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getDestination(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStrategy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDestination(
      _destination: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReserve(
      _reserve: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStrategy(
      _strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

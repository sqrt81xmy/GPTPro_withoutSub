/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IPrizeTierHistory {
  export type PrizeTierStruct = {
    bitRangeSize: PromiseOrValue<BigNumberish>;
    drawId: PromiseOrValue<BigNumberish>;
    maxPicksPerUser: PromiseOrValue<BigNumberish>;
    expiryDuration: PromiseOrValue<BigNumberish>;
    endTimestampOffset: PromiseOrValue<BigNumberish>;
    prize: PromiseOrValue<BigNumberish>;
    tiers: PromiseOrValue<BigNumberish>[];
  };

  export type PrizeTierStructOutput = [
    number,
    number,
    number,
    number,
    number,
    BigNumber,
    number[]
  ] & {
    bitRangeSize: number;
    drawId: number;
    maxPicksPerUser: number;
    expiryDuration: number;
    endTimestampOffset: number;
    prize: BigNumber;
    tiers: number[];
  };
}

export interface IPrizeTierHistoryInterface extends utils.Interface {
  functions: {
    "count()": FunctionFragment;
    "getNewestDrawId()": FunctionFragment;
    "getOldestDrawId()": FunctionFragment;
    "getPrizeTier(uint32)": FunctionFragment;
    "getPrizeTierAtIndex(uint256)": FunctionFragment;
    "getPrizeTierList(uint32[])": FunctionFragment;
    "popAndPush((uint8,uint32,uint32,uint32,uint32,uint256,uint32[16]))": FunctionFragment;
    "push((uint8,uint32,uint32,uint32,uint32,uint256,uint32[16]))": FunctionFragment;
    "replace((uint8,uint32,uint32,uint32,uint32,uint256,uint32[16]))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "count"
      | "getNewestDrawId"
      | "getOldestDrawId"
      | "getPrizeTier"
      | "getPrizeTierAtIndex"
      | "getPrizeTierList"
      | "popAndPush"
      | "push"
      | "replace"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "count", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getNewestDrawId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOldestDrawId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPrizeTier",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrizeTierAtIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrizeTierList",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "popAndPush",
    values: [IPrizeTierHistory.PrizeTierStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "push",
    values: [IPrizeTierHistory.PrizeTierStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "replace",
    values: [IPrizeTierHistory.PrizeTierStruct]
  ): string;

  decodeFunctionResult(functionFragment: "count", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNewestDrawId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOldestDrawId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrizeTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrizeTierAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrizeTierList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "popAndPush", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "push", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "replace", data: BytesLike): Result;

  events: {
    "PrizeTierPushed(uint32,tuple)": EventFragment;
    "PrizeTierSet(uint32,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PrizeTierPushed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PrizeTierSet"): EventFragment;
}

export interface PrizeTierPushedEventObject {
  drawId: number;
  prizeTier: IPrizeTierHistory.PrizeTierStructOutput;
}
export type PrizeTierPushedEvent = TypedEvent<
  [number, IPrizeTierHistory.PrizeTierStructOutput],
  PrizeTierPushedEventObject
>;

export type PrizeTierPushedEventFilter = TypedEventFilter<PrizeTierPushedEvent>;

export interface PrizeTierSetEventObject {
  drawId: number;
  prizeTier: IPrizeTierHistory.PrizeTierStructOutput;
}
export type PrizeTierSetEvent = TypedEvent<
  [number, IPrizeTierHistory.PrizeTierStructOutput],
  PrizeTierSetEventObject
>;

export type PrizeTierSetEventFilter = TypedEventFilter<PrizeTierSetEvent>;

export interface IPrizeTierHistory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPrizeTierHistoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    count(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNewestDrawId(overrides?: CallOverrides): Promise<[number]>;

    getOldestDrawId(overrides?: CallOverrides): Promise<[number]>;

    getPrizeTier(
      drawId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IPrizeTierHistory.PrizeTierStructOutput] & {
        prizeTier: IPrizeTierHistory.PrizeTierStructOutput;
      }
    >;

    getPrizeTierAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IPrizeTierHistory.PrizeTierStructOutput]>;

    getPrizeTierList(
      drawIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<
      [IPrizeTierHistory.PrizeTierStructOutput[]] & {
        prizeTierList: IPrizeTierHistory.PrizeTierStructOutput[];
      }
    >;

    popAndPush(
      newPrizeTier: IPrizeTierHistory.PrizeTierStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    push(
      nextPrizeTier: IPrizeTierHistory.PrizeTierStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    replace(
      newPrizeTier: IPrizeTierHistory.PrizeTierStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  count(overrides?: CallOverrides): Promise<BigNumber>;

  getNewestDrawId(overrides?: CallOverrides): Promise<number>;

  getOldestDrawId(overrides?: CallOverrides): Promise<number>;

  getPrizeTier(
    drawId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IPrizeTierHistory.PrizeTierStructOutput>;

  getPrizeTierAtIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IPrizeTierHistory.PrizeTierStructOutput>;

  getPrizeTierList(
    drawIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<IPrizeTierHistory.PrizeTierStructOutput[]>;

  popAndPush(
    newPrizeTier: IPrizeTierHistory.PrizeTierStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  push(
    nextPrizeTier: IPrizeTierHistory.PrizeTierStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  replace(
    newPrizeTier: IPrizeTierHistory.PrizeTierStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    count(overrides?: CallOverrides): Promise<BigNumber>;

    getNewestDrawId(overrides?: CallOverrides): Promise<number>;

    getOldestDrawId(overrides?: CallOverrides): Promise<number>;

    getPrizeTier(
      drawId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IPrizeTierHistory.PrizeTierStructOutput>;

    getPrizeTierAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IPrizeTierHistory.PrizeTierStructOutput>;

    getPrizeTierList(
      drawIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<IPrizeTierHistory.PrizeTierStructOutput[]>;

    popAndPush(
      newPrizeTier: IPrizeTierHistory.PrizeTierStruct,
      overrides?: CallOverrides
    ): Promise<number>;

    push(
      nextPrizeTier: IPrizeTierHistory.PrizeTierStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    replace(
      newPrizeTier: IPrizeTierHistory.PrizeTierStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "PrizeTierPushed(uint32,tuple)"(
      drawId?: PromiseOrValue<BigNumberish> | null,
      prizeTier?: null
    ): PrizeTierPushedEventFilter;
    PrizeTierPushed(
      drawId?: PromiseOrValue<BigNumberish> | null,
      prizeTier?: null
    ): PrizeTierPushedEventFilter;

    "PrizeTierSet(uint32,tuple)"(
      drawId?: PromiseOrValue<BigNumberish> | null,
      prizeTier?: null
    ): PrizeTierSetEventFilter;
    PrizeTierSet(
      drawId?: PromiseOrValue<BigNumberish> | null,
      prizeTier?: null
    ): PrizeTierSetEventFilter;
  };

  estimateGas: {
    count(overrides?: CallOverrides): Promise<BigNumber>;

    getNewestDrawId(overrides?: CallOverrides): Promise<BigNumber>;

    getOldestDrawId(overrides?: CallOverrides): Promise<BigNumber>;

    getPrizeTier(
      drawId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrizeTierAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrizeTierList(
      drawIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    popAndPush(
      newPrizeTier: IPrizeTierHistory.PrizeTierStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    push(
      nextPrizeTier: IPrizeTierHistory.PrizeTierStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    replace(
      newPrizeTier: IPrizeTierHistory.PrizeTierStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNewestDrawId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOldestDrawId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPrizeTier(
      drawId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrizeTierAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrizeTierList(
      drawIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    popAndPush(
      newPrizeTier: IPrizeTierHistory.PrizeTierStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    push(
      nextPrizeTier: IPrizeTierHistory.PrizeTierStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    replace(
      newPrizeTier: IPrizeTierHistory.PrizeTierStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

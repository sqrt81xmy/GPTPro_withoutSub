/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace IDrawBeacon {
  export type DrawStruct = {
    winningRandomNumber: PromiseOrValue<BigNumberish>;
    drawId: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
    beaconPeriodStartedAt: PromiseOrValue<BigNumberish>;
    beaconPeriodSeconds: PromiseOrValue<BigNumberish>;
  };

  export type DrawStructOutput = [
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    number
  ] & {
    winningRandomNumber: BigNumber;
    drawId: number;
    timestamp: BigNumber;
    beaconPeriodStartedAt: BigNumber;
    beaconPeriodSeconds: number;
  };
}

export interface DrawExecutorInterface extends utils.Interface {
  functions: {
    "drawBuffer()": FunctionFragment;
    "drawDispatcher()": FunctionFragment;
    "isTrustedExecutor(address)": FunctionFragment;
    "originChainId()": FunctionFragment;
    "pushDraw((uint256,uint32,uint64,uint64,uint32))": FunctionFragment;
    "pushDraws((uint256,uint32,uint64,uint64,uint32)[])": FunctionFragment;
    "trustedExecutor()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "drawBuffer"
      | "drawDispatcher"
      | "isTrustedExecutor"
      | "originChainId"
      | "pushDraw"
      | "pushDraws"
      | "trustedExecutor"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "drawBuffer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "drawDispatcher",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedExecutor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "originChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pushDraw",
    values: [IDrawBeacon.DrawStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "pushDraws",
    values: [IDrawBeacon.DrawStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedExecutor",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "drawBuffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "drawDispatcher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "originChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pushDraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pushDraws", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "trustedExecutor",
    data: BytesLike
  ): Result;

  events: {
    "DrawPushed(tuple)": EventFragment;
    "DrawsPushed(tuple[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DrawPushed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DrawsPushed"): EventFragment;
}

export interface DrawPushedEventObject {
  draw: IDrawBeacon.DrawStructOutput;
}
export type DrawPushedEvent = TypedEvent<
  [IDrawBeacon.DrawStructOutput],
  DrawPushedEventObject
>;

export type DrawPushedEventFilter = TypedEventFilter<DrawPushedEvent>;

export interface DrawsPushedEventObject {
  draws: IDrawBeacon.DrawStructOutput[];
}
export type DrawsPushedEvent = TypedEvent<
  [IDrawBeacon.DrawStructOutput[]],
  DrawsPushedEventObject
>;

export type DrawsPushedEventFilter = TypedEventFilter<DrawsPushedEvent>;

export interface DrawExecutor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DrawExecutorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    drawBuffer(overrides?: CallOverrides): Promise<[string]>;

    drawDispatcher(overrides?: CallOverrides): Promise<[string]>;

    isTrustedExecutor(
      _executor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    originChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    pushDraw(
      _draw: IDrawBeacon.DrawStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pushDraws(
      _draws: IDrawBeacon.DrawStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    trustedExecutor(overrides?: CallOverrides): Promise<[string]>;
  };

  drawBuffer(overrides?: CallOverrides): Promise<string>;

  drawDispatcher(overrides?: CallOverrides): Promise<string>;

  isTrustedExecutor(
    _executor: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  originChainId(overrides?: CallOverrides): Promise<BigNumber>;

  pushDraw(
    _draw: IDrawBeacon.DrawStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pushDraws(
    _draws: IDrawBeacon.DrawStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  trustedExecutor(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    drawBuffer(overrides?: CallOverrides): Promise<string>;

    drawDispatcher(overrides?: CallOverrides): Promise<string>;

    isTrustedExecutor(
      _executor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    originChainId(overrides?: CallOverrides): Promise<BigNumber>;

    pushDraw(
      _draw: IDrawBeacon.DrawStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    pushDraws(
      _draws: IDrawBeacon.DrawStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    trustedExecutor(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "DrawPushed(tuple)"(draw?: null): DrawPushedEventFilter;
    DrawPushed(draw?: null): DrawPushedEventFilter;

    "DrawsPushed(tuple[])"(draws?: null): DrawsPushedEventFilter;
    DrawsPushed(draws?: null): DrawsPushedEventFilter;
  };

  estimateGas: {
    drawBuffer(overrides?: CallOverrides): Promise<BigNumber>;

    drawDispatcher(overrides?: CallOverrides): Promise<BigNumber>;

    isTrustedExecutor(
      _executor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    originChainId(overrides?: CallOverrides): Promise<BigNumber>;

    pushDraw(
      _draw: IDrawBeacon.DrawStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pushDraws(
      _draws: IDrawBeacon.DrawStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    trustedExecutor(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    drawBuffer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    drawDispatcher(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isTrustedExecutor(
      _executor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    originChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pushDraw(
      _draw: IDrawBeacon.DrawStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pushDraws(
      _draws: IDrawBeacon.DrawStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    trustedExecutor(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

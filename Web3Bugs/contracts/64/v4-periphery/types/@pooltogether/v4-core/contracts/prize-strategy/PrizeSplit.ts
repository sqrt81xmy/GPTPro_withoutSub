/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace IPrizeSplit {
  export type PrizeSplitConfigStruct = {
    target: PromiseOrValue<string>;
    percentage: PromiseOrValue<BigNumberish>;
  };

  export type PrizeSplitConfigStructOutput = [string, number] & {
    target: string;
    percentage: number;
  };
}

export interface PrizeSplitInterface extends utils.Interface {
  functions: {
    "ONE_AS_FIXED_POINT_3()": FunctionFragment;
    "claimOwnership()": FunctionFragment;
    "getPrizePool()": FunctionFragment;
    "getPrizeSplit(uint256)": FunctionFragment;
    "getPrizeSplits()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setPrizeSplit((address,uint16),uint8)": FunctionFragment;
    "setPrizeSplits((address,uint16)[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ONE_AS_FIXED_POINT_3"
      | "claimOwnership"
      | "getPrizePool"
      | "getPrizeSplit"
      | "getPrizeSplits"
      | "owner"
      | "pendingOwner"
      | "renounceOwnership"
      | "setPrizeSplit"
      | "setPrizeSplits"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ONE_AS_FIXED_POINT_3",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPrizePool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPrizeSplit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrizeSplits",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPrizeSplit",
    values: [IPrizeSplit.PrizeSplitConfigStruct, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrizeSplits",
    values: [IPrizeSplit.PrizeSplitConfigStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "ONE_AS_FIXED_POINT_3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrizePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrizeSplit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrizeSplits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPrizeSplit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPrizeSplits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipOffered(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PrizeSplitAwarded(address,uint256,address)": EventFragment;
    "PrizeSplitRemoved(uint256)": EventFragment;
    "PrizeSplitSet(address,uint16,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipOffered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PrizeSplitAwarded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PrizeSplitRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PrizeSplitSet"): EventFragment;
}

export interface OwnershipOfferedEventObject {
  pendingOwner: string;
}
export type OwnershipOfferedEvent = TypedEvent<
  [string],
  OwnershipOfferedEventObject
>;

export type OwnershipOfferedEventFilter =
  TypedEventFilter<OwnershipOfferedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PrizeSplitAwardedEventObject {
  user: string;
  prizeAwarded: BigNumber;
  token: string;
}
export type PrizeSplitAwardedEvent = TypedEvent<
  [string, BigNumber, string],
  PrizeSplitAwardedEventObject
>;

export type PrizeSplitAwardedEventFilter =
  TypedEventFilter<PrizeSplitAwardedEvent>;

export interface PrizeSplitRemovedEventObject {
  target: BigNumber;
}
export type PrizeSplitRemovedEvent = TypedEvent<
  [BigNumber],
  PrizeSplitRemovedEventObject
>;

export type PrizeSplitRemovedEventFilter =
  TypedEventFilter<PrizeSplitRemovedEvent>;

export interface PrizeSplitSetEventObject {
  target: string;
  percentage: number;
  index: BigNumber;
}
export type PrizeSplitSetEvent = TypedEvent<
  [string, number, BigNumber],
  PrizeSplitSetEventObject
>;

export type PrizeSplitSetEventFilter = TypedEventFilter<PrizeSplitSetEvent>;

export interface PrizeSplit extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PrizeSplitInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ONE_AS_FIXED_POINT_3(overrides?: CallOverrides): Promise<[number]>;

    claimOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPrizePool(overrides?: CallOverrides): Promise<[string]>;

    getPrizeSplit(
      _prizeSplitIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IPrizeSplit.PrizeSplitConfigStructOutput]>;

    getPrizeSplits(
      overrides?: CallOverrides
    ): Promise<[IPrizeSplit.PrizeSplitConfigStructOutput[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPrizeSplit(
      _prizeSplit: IPrizeSplit.PrizeSplitConfigStruct,
      _prizeSplitIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPrizeSplits(
      _newPrizeSplits: IPrizeSplit.PrizeSplitConfigStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ONE_AS_FIXED_POINT_3(overrides?: CallOverrides): Promise<number>;

  claimOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPrizePool(overrides?: CallOverrides): Promise<string>;

  getPrizeSplit(
    _prizeSplitIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IPrizeSplit.PrizeSplitConfigStructOutput>;

  getPrizeSplits(
    overrides?: CallOverrides
  ): Promise<IPrizeSplit.PrizeSplitConfigStructOutput[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPrizeSplit(
    _prizeSplit: IPrizeSplit.PrizeSplitConfigStruct,
    _prizeSplitIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPrizeSplits(
    _newPrizeSplits: IPrizeSplit.PrizeSplitConfigStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    _newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ONE_AS_FIXED_POINT_3(overrides?: CallOverrides): Promise<number>;

    claimOwnership(overrides?: CallOverrides): Promise<void>;

    getPrizePool(overrides?: CallOverrides): Promise<string>;

    getPrizeSplit(
      _prizeSplitIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IPrizeSplit.PrizeSplitConfigStructOutput>;

    getPrizeSplits(
      overrides?: CallOverrides
    ): Promise<IPrizeSplit.PrizeSplitConfigStructOutput[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setPrizeSplit(
      _prizeSplit: IPrizeSplit.PrizeSplitConfigStruct,
      _prizeSplitIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrizeSplits(
      _newPrizeSplits: IPrizeSplit.PrizeSplitConfigStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipOffered(address)"(
      pendingOwner?: PromiseOrValue<string> | null
    ): OwnershipOfferedEventFilter;
    OwnershipOffered(
      pendingOwner?: PromiseOrValue<string> | null
    ): OwnershipOfferedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PrizeSplitAwarded(address,uint256,address)"(
      user?: PromiseOrValue<string> | null,
      prizeAwarded?: null,
      token?: PromiseOrValue<string> | null
    ): PrizeSplitAwardedEventFilter;
    PrizeSplitAwarded(
      user?: PromiseOrValue<string> | null,
      prizeAwarded?: null,
      token?: PromiseOrValue<string> | null
    ): PrizeSplitAwardedEventFilter;

    "PrizeSplitRemoved(uint256)"(
      target?: PromiseOrValue<BigNumberish> | null
    ): PrizeSplitRemovedEventFilter;
    PrizeSplitRemoved(
      target?: PromiseOrValue<BigNumberish> | null
    ): PrizeSplitRemovedEventFilter;

    "PrizeSplitSet(address,uint16,uint256)"(
      target?: PromiseOrValue<string> | null,
      percentage?: null,
      index?: null
    ): PrizeSplitSetEventFilter;
    PrizeSplitSet(
      target?: PromiseOrValue<string> | null,
      percentage?: null,
      index?: null
    ): PrizeSplitSetEventFilter;
  };

  estimateGas: {
    ONE_AS_FIXED_POINT_3(overrides?: CallOverrides): Promise<BigNumber>;

    claimOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPrizePool(overrides?: CallOverrides): Promise<BigNumber>;

    getPrizeSplit(
      _prizeSplitIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrizeSplits(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPrizeSplit(
      _prizeSplit: IPrizeSplit.PrizeSplitConfigStruct,
      _prizeSplitIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPrizeSplits(
      _newPrizeSplits: IPrizeSplit.PrizeSplitConfigStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ONE_AS_FIXED_POINT_3(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPrizePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPrizeSplit(
      _prizeSplitIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrizeSplits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPrizeSplit(
      _prizeSplit: IPrizeSplit.PrizeSplitConfigStruct,
      _prizeSplitIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPrizeSplits(
      _newPrizeSplits: IPrizeSplit.PrizeSplitConfigStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

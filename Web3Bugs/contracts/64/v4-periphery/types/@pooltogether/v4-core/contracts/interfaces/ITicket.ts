/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace ObservationLib {
  export type ObservationStruct = {
    amount: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
  };

  export type ObservationStructOutput = [BigNumber, number] & {
    amount: BigNumber;
    timestamp: number;
  };
}

export declare namespace TwabLib {
  export type AccountDetailsStruct = {
    balance: PromiseOrValue<BigNumberish>;
    nextTwabIndex: PromiseOrValue<BigNumberish>;
    cardinality: PromiseOrValue<BigNumberish>;
  };

  export type AccountDetailsStructOutput = [BigNumber, number, number] & {
    balance: BigNumber;
    nextTwabIndex: number;
    cardinality: number;
  };
}

export interface ITicketInterface extends utils.Interface {
  functions: {
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "controller()": FunctionFragment;
    "controllerBurn(address,uint256)": FunctionFragment;
    "controllerBurnFrom(address,address,uint256)": FunctionFragment;
    "controllerDelegateFor(address,address)": FunctionFragment;
    "controllerMint(address,uint256)": FunctionFragment;
    "delegate(address)": FunctionFragment;
    "delegateOf(address)": FunctionFragment;
    "delegateWithSignature(address,address,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "getAccountDetails(address)": FunctionFragment;
    "getAverageBalanceBetween(address,uint64,uint64)": FunctionFragment;
    "getAverageBalancesBetween(address,uint64[],uint64[])": FunctionFragment;
    "getAverageTotalSuppliesBetween(uint64[],uint64[])": FunctionFragment;
    "getBalanceAt(address,uint64)": FunctionFragment;
    "getBalancesAt(address,uint64[])": FunctionFragment;
    "getTotalSuppliesAt(uint64[])": FunctionFragment;
    "getTotalSupplyAt(uint64)": FunctionFragment;
    "getTwab(address,uint16)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allowance"
      | "approve"
      | "balanceOf"
      | "controller"
      | "controllerBurn"
      | "controllerBurnFrom"
      | "controllerDelegateFor"
      | "controllerMint"
      | "delegate"
      | "delegateOf"
      | "delegateWithSignature"
      | "getAccountDetails"
      | "getAverageBalanceBetween"
      | "getAverageBalancesBetween"
      | "getAverageTotalSuppliesBetween"
      | "getBalanceAt"
      | "getBalancesAt"
      | "getTotalSuppliesAt"
      | "getTotalSupplyAt"
      | "getTwab"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "controllerBurn",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "controllerBurnFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "controllerDelegateFor",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "controllerMint",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "delegate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateWithSignature",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountDetails",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAverageBalanceBetween",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAverageBalancesBetween",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAverageTotalSuppliesBetween",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalanceAt",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalancesAt",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalSuppliesAt",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalSupplyAt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTwab",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "controllerBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controllerBurnFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controllerDelegateFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controllerMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delegateOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegateWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAverageBalanceBetween",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAverageBalancesBetween",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAverageTotalSuppliesBetween",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalanceAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalancesAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSuppliesAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSupplyAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTwab", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Delegated(address,address)": EventFragment;
    "NewTotalSupplyTwab(tuple)": EventFragment;
    "NewUserTwab(address,tuple)": EventFragment;
    "TicketInitialized(string,string,uint8,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Delegated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTotalSupplyTwab"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewUserTwab"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TicketInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface DelegatedEventObject {
  delegator: string;
  delegate: string;
}
export type DelegatedEvent = TypedEvent<[string, string], DelegatedEventObject>;

export type DelegatedEventFilter = TypedEventFilter<DelegatedEvent>;

export interface NewTotalSupplyTwabEventObject {
  newTotalSupplyTwab: ObservationLib.ObservationStructOutput;
}
export type NewTotalSupplyTwabEvent = TypedEvent<
  [ObservationLib.ObservationStructOutput],
  NewTotalSupplyTwabEventObject
>;

export type NewTotalSupplyTwabEventFilter =
  TypedEventFilter<NewTotalSupplyTwabEvent>;

export interface NewUserTwabEventObject {
  delegate: string;
  newTwab: ObservationLib.ObservationStructOutput;
}
export type NewUserTwabEvent = TypedEvent<
  [string, ObservationLib.ObservationStructOutput],
  NewUserTwabEventObject
>;

export type NewUserTwabEventFilter = TypedEventFilter<NewUserTwabEvent>;

export interface TicketInitializedEventObject {
  name: string;
  symbol: string;
  decimals: number;
  controller: string;
}
export type TicketInitializedEvent = TypedEvent<
  [string, string, number, string],
  TicketInitializedEventObject
>;

export type TicketInitializedEventFilter =
  TypedEventFilter<TicketInitializedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface ITicket extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITicketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    controllerBurn(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    controllerBurnFrom(
      operator: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    controllerDelegateFor(
      user: PromiseOrValue<string>,
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    controllerMint(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    delegate(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    delegateOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    delegateWithSignature(
      user: PromiseOrValue<string>,
      delegate: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAccountDetails(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[TwabLib.AccountDetailsStructOutput]>;

    getAverageBalanceBetween(
      user: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAverageBalancesBetween(
      user: PromiseOrValue<string>,
      startTimes: PromiseOrValue<BigNumberish>[],
      endTimes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getAverageTotalSuppliesBetween(
      startTimes: PromiseOrValue<BigNumberish>[],
      endTimes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getBalanceAt(
      user: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBalancesAt(
      user: PromiseOrValue<string>,
      timestamps: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getTotalSuppliesAt(
      timestamps: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getTotalSupplyAt(
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTwab(
      user: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ObservationLib.ObservationStructOutput]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  controller(overrides?: CallOverrides): Promise<string>;

  controllerBurn(
    user: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  controllerBurnFrom(
    operator: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  controllerDelegateFor(
    user: PromiseOrValue<string>,
    delegate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  controllerMint(
    user: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  delegate(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  delegateOf(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  delegateWithSignature(
    user: PromiseOrValue<string>,
    delegate: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAccountDetails(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<TwabLib.AccountDetailsStructOutput>;

  getAverageBalanceBetween(
    user: PromiseOrValue<string>,
    startTime: PromiseOrValue<BigNumberish>,
    endTime: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAverageBalancesBetween(
    user: PromiseOrValue<string>,
    startTimes: PromiseOrValue<BigNumberish>[],
    endTimes: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getAverageTotalSuppliesBetween(
    startTimes: PromiseOrValue<BigNumberish>[],
    endTimes: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getBalanceAt(
    user: PromiseOrValue<string>,
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBalancesAt(
    user: PromiseOrValue<string>,
    timestamps: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getTotalSuppliesAt(
    timestamps: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getTotalSupplyAt(
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTwab(
    user: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ObservationLib.ObservationStructOutput>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<string>;

    controllerBurn(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    controllerBurnFrom(
      operator: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    controllerDelegateFor(
      user: PromiseOrValue<string>,
      delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    controllerMint(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    delegate(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    delegateOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    delegateWithSignature(
      user: PromiseOrValue<string>,
      delegate: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAccountDetails(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<TwabLib.AccountDetailsStructOutput>;

    getAverageBalanceBetween(
      user: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAverageBalancesBetween(
      user: PromiseOrValue<string>,
      startTimes: PromiseOrValue<BigNumberish>[],
      endTimes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getAverageTotalSuppliesBetween(
      startTimes: PromiseOrValue<BigNumberish>[],
      endTimes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getBalanceAt(
      user: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalancesAt(
      user: PromiseOrValue<string>,
      timestamps: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getTotalSuppliesAt(
      timestamps: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getTotalSupplyAt(
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTwab(
      user: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ObservationLib.ObservationStructOutput>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "Delegated(address,address)"(
      delegator?: PromiseOrValue<string> | null,
      delegate?: PromiseOrValue<string> | null
    ): DelegatedEventFilter;
    Delegated(
      delegator?: PromiseOrValue<string> | null,
      delegate?: PromiseOrValue<string> | null
    ): DelegatedEventFilter;

    "NewTotalSupplyTwab(tuple)"(
      newTotalSupplyTwab?: null
    ): NewTotalSupplyTwabEventFilter;
    NewTotalSupplyTwab(
      newTotalSupplyTwab?: null
    ): NewTotalSupplyTwabEventFilter;

    "NewUserTwab(address,tuple)"(
      delegate?: PromiseOrValue<string> | null,
      newTwab?: null
    ): NewUserTwabEventFilter;
    NewUserTwab(
      delegate?: PromiseOrValue<string> | null,
      newTwab?: null
    ): NewUserTwabEventFilter;

    "TicketInitialized(string,string,uint8,address)"(
      name?: null,
      symbol?: null,
      decimals?: null,
      controller?: PromiseOrValue<string> | null
    ): TicketInitializedEventFilter;
    TicketInitialized(
      name?: null,
      symbol?: null,
      decimals?: null,
      controller?: PromiseOrValue<string> | null
    ): TicketInitializedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    controllerBurn(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    controllerBurnFrom(
      operator: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    controllerDelegateFor(
      user: PromiseOrValue<string>,
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    controllerMint(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    delegate(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    delegateOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegateWithSignature(
      user: PromiseOrValue<string>,
      delegate: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAccountDetails(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAverageBalanceBetween(
      user: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAverageBalancesBetween(
      user: PromiseOrValue<string>,
      startTimes: PromiseOrValue<BigNumberish>[],
      endTimes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAverageTotalSuppliesBetween(
      startTimes: PromiseOrValue<BigNumberish>[],
      endTimes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalanceAt(
      user: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalancesAt(
      user: PromiseOrValue<string>,
      timestamps: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalSuppliesAt(
      timestamps: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalSupplyAt(
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTwab(
      user: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controllerBurn(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    controllerBurnFrom(
      operator: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    controllerDelegateFor(
      user: PromiseOrValue<string>,
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    controllerMint(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    delegate(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    delegateOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegateWithSignature(
      user: PromiseOrValue<string>,
      delegate: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAccountDetails(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAverageBalanceBetween(
      user: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAverageBalancesBetween(
      user: PromiseOrValue<string>,
      startTimes: PromiseOrValue<BigNumberish>[],
      endTimes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAverageTotalSuppliesBetween(
      startTimes: PromiseOrValue<BigNumberish>[],
      endTimes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalanceAt(
      user: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalancesAt(
      user: PromiseOrValue<string>,
      timestamps: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalSuppliesAt(
      timestamps: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalSupplyAt(
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTwab(
      user: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

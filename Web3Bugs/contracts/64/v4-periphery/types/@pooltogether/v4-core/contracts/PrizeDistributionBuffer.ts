/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IPrizeDistributionSource {
  export type PrizeDistributionStruct = {
    bitRangeSize: PromiseOrValue<BigNumberish>;
    matchCardinality: PromiseOrValue<BigNumberish>;
    startTimestampOffset: PromiseOrValue<BigNumberish>;
    endTimestampOffset: PromiseOrValue<BigNumberish>;
    maxPicksPerUser: PromiseOrValue<BigNumberish>;
    expiryDuration: PromiseOrValue<BigNumberish>;
    numberOfPicks: PromiseOrValue<BigNumberish>;
    tiers: PromiseOrValue<BigNumberish>[];
    prize: PromiseOrValue<BigNumberish>;
  };

  export type PrizeDistributionStructOutput = [
    number,
    number,
    number,
    number,
    number,
    number,
    BigNumber,
    number[],
    BigNumber
  ] & {
    bitRangeSize: number;
    matchCardinality: number;
    startTimestampOffset: number;
    endTimestampOffset: number;
    maxPicksPerUser: number;
    expiryDuration: number;
    numberOfPicks: BigNumber;
    tiers: number[];
    prize: BigNumber;
  };
}

export interface PrizeDistributionBufferInterface extends utils.Interface {
  functions: {
    "claimOwnership()": FunctionFragment;
    "getBufferCardinality()": FunctionFragment;
    "getNewestPrizeDistribution()": FunctionFragment;
    "getOldestPrizeDistribution()": FunctionFragment;
    "getPrizeDistribution(uint32)": FunctionFragment;
    "getPrizeDistributionCount()": FunctionFragment;
    "getPrizeDistributions(uint32[])": FunctionFragment;
    "manager()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "pushPrizeDistribution(uint32,(uint8,uint8,uint32,uint32,uint32,uint32,uint104,uint32[16],uint256))": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setManager(address)": FunctionFragment;
    "setPrizeDistribution(uint32,(uint8,uint8,uint32,uint32,uint32,uint32,uint104,uint32[16],uint256))": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimOwnership"
      | "getBufferCardinality"
      | "getNewestPrizeDistribution"
      | "getOldestPrizeDistribution"
      | "getPrizeDistribution"
      | "getPrizeDistributionCount"
      | "getPrizeDistributions"
      | "manager"
      | "owner"
      | "pendingOwner"
      | "pushPrizeDistribution"
      | "renounceOwnership"
      | "setManager"
      | "setPrizeDistribution"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBufferCardinality",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNewestPrizeDistribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOldestPrizeDistribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPrizeDistribution",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrizeDistributionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPrizeDistributions",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pushPrizeDistribution",
    values: [
      PromiseOrValue<BigNumberish>,
      IPrizeDistributionSource.PrizeDistributionStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrizeDistribution",
    values: [
      PromiseOrValue<BigNumberish>,
      IPrizeDistributionSource.PrizeDistributionStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBufferCardinality",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNewestPrizeDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOldestPrizeDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrizeDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrizeDistributionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrizeDistributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pushPrizeDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPrizeDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Deployed(uint8)": EventFragment;
    "ManagerTransferred(address,address)": EventFragment;
    "OwnershipOffered(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PrizeDistributionSet(uint32,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ManagerTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipOffered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PrizeDistributionSet"): EventFragment;
}

export interface DeployedEventObject {
  cardinality: number;
}
export type DeployedEvent = TypedEvent<[number], DeployedEventObject>;

export type DeployedEventFilter = TypedEventFilter<DeployedEvent>;

export interface ManagerTransferredEventObject {
  previousManager: string;
  newManager: string;
}
export type ManagerTransferredEvent = TypedEvent<
  [string, string],
  ManagerTransferredEventObject
>;

export type ManagerTransferredEventFilter =
  TypedEventFilter<ManagerTransferredEvent>;

export interface OwnershipOfferedEventObject {
  pendingOwner: string;
}
export type OwnershipOfferedEvent = TypedEvent<
  [string],
  OwnershipOfferedEventObject
>;

export type OwnershipOfferedEventFilter =
  TypedEventFilter<OwnershipOfferedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PrizeDistributionSetEventObject {
  drawId: number;
  prizeDistribution: IPrizeDistributionSource.PrizeDistributionStructOutput;
}
export type PrizeDistributionSetEvent = TypedEvent<
  [number, IPrizeDistributionSource.PrizeDistributionStructOutput],
  PrizeDistributionSetEventObject
>;

export type PrizeDistributionSetEventFilter =
  TypedEventFilter<PrizeDistributionSetEvent>;

export interface PrizeDistributionBuffer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PrizeDistributionBufferInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBufferCardinality(overrides?: CallOverrides): Promise<[number]>;

    getNewestPrizeDistribution(
      overrides?: CallOverrides
    ): Promise<
      [IPrizeDistributionSource.PrizeDistributionStructOutput, number] & {
        prizeDistribution: IPrizeDistributionSource.PrizeDistributionStructOutput;
        drawId: number;
      }
    >;

    getOldestPrizeDistribution(
      overrides?: CallOverrides
    ): Promise<
      [IPrizeDistributionSource.PrizeDistributionStructOutput, number] & {
        prizeDistribution: IPrizeDistributionSource.PrizeDistributionStructOutput;
        drawId: number;
      }
    >;

    getPrizeDistribution(
      _drawId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IPrizeDistributionSource.PrizeDistributionStructOutput]>;

    getPrizeDistributionCount(overrides?: CallOverrides): Promise<[number]>;

    getPrizeDistributions(
      _drawIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[IPrizeDistributionSource.PrizeDistributionStructOutput[]]>;

    manager(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    pushPrizeDistribution(
      _drawId: PromiseOrValue<BigNumberish>,
      _prizeDistribution: IPrizeDistributionSource.PrizeDistributionStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setManager(
      _newManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPrizeDistribution(
      _drawId: PromiseOrValue<BigNumberish>,
      _prizeDistribution: IPrizeDistributionSource.PrizeDistributionStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  claimOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBufferCardinality(overrides?: CallOverrides): Promise<number>;

  getNewestPrizeDistribution(
    overrides?: CallOverrides
  ): Promise<
    [IPrizeDistributionSource.PrizeDistributionStructOutput, number] & {
      prizeDistribution: IPrizeDistributionSource.PrizeDistributionStructOutput;
      drawId: number;
    }
  >;

  getOldestPrizeDistribution(
    overrides?: CallOverrides
  ): Promise<
    [IPrizeDistributionSource.PrizeDistributionStructOutput, number] & {
      prizeDistribution: IPrizeDistributionSource.PrizeDistributionStructOutput;
      drawId: number;
    }
  >;

  getPrizeDistribution(
    _drawId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IPrizeDistributionSource.PrizeDistributionStructOutput>;

  getPrizeDistributionCount(overrides?: CallOverrides): Promise<number>;

  getPrizeDistributions(
    _drawIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<IPrizeDistributionSource.PrizeDistributionStructOutput[]>;

  manager(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  pushPrizeDistribution(
    _drawId: PromiseOrValue<BigNumberish>,
    _prizeDistribution: IPrizeDistributionSource.PrizeDistributionStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setManager(
    _newManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPrizeDistribution(
    _drawId: PromiseOrValue<BigNumberish>,
    _prizeDistribution: IPrizeDistributionSource.PrizeDistributionStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    _newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimOwnership(overrides?: CallOverrides): Promise<void>;

    getBufferCardinality(overrides?: CallOverrides): Promise<number>;

    getNewestPrizeDistribution(
      overrides?: CallOverrides
    ): Promise<
      [IPrizeDistributionSource.PrizeDistributionStructOutput, number] & {
        prizeDistribution: IPrizeDistributionSource.PrizeDistributionStructOutput;
        drawId: number;
      }
    >;

    getOldestPrizeDistribution(
      overrides?: CallOverrides
    ): Promise<
      [IPrizeDistributionSource.PrizeDistributionStructOutput, number] & {
        prizeDistribution: IPrizeDistributionSource.PrizeDistributionStructOutput;
        drawId: number;
      }
    >;

    getPrizeDistribution(
      _drawId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IPrizeDistributionSource.PrizeDistributionStructOutput>;

    getPrizeDistributionCount(overrides?: CallOverrides): Promise<number>;

    getPrizeDistributions(
      _drawIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<IPrizeDistributionSource.PrizeDistributionStructOutput[]>;

    manager(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    pushPrizeDistribution(
      _drawId: PromiseOrValue<BigNumberish>,
      _prizeDistribution: IPrizeDistributionSource.PrizeDistributionStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setManager(
      _newManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setPrizeDistribution(
      _drawId: PromiseOrValue<BigNumberish>,
      _prizeDistribution: IPrizeDistributionSource.PrizeDistributionStruct,
      overrides?: CallOverrides
    ): Promise<number>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Deployed(uint8)"(cardinality?: null): DeployedEventFilter;
    Deployed(cardinality?: null): DeployedEventFilter;

    "ManagerTransferred(address,address)"(
      previousManager?: PromiseOrValue<string> | null,
      newManager?: PromiseOrValue<string> | null
    ): ManagerTransferredEventFilter;
    ManagerTransferred(
      previousManager?: PromiseOrValue<string> | null,
      newManager?: PromiseOrValue<string> | null
    ): ManagerTransferredEventFilter;

    "OwnershipOffered(address)"(
      pendingOwner?: PromiseOrValue<string> | null
    ): OwnershipOfferedEventFilter;
    OwnershipOffered(
      pendingOwner?: PromiseOrValue<string> | null
    ): OwnershipOfferedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PrizeDistributionSet(uint32,tuple)"(
      drawId?: PromiseOrValue<BigNumberish> | null,
      prizeDistribution?: null
    ): PrizeDistributionSetEventFilter;
    PrizeDistributionSet(
      drawId?: PromiseOrValue<BigNumberish> | null,
      prizeDistribution?: null
    ): PrizeDistributionSetEventFilter;
  };

  estimateGas: {
    claimOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBufferCardinality(overrides?: CallOverrides): Promise<BigNumber>;

    getNewestPrizeDistribution(overrides?: CallOverrides): Promise<BigNumber>;

    getOldestPrizeDistribution(overrides?: CallOverrides): Promise<BigNumber>;

    getPrizeDistribution(
      _drawId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrizeDistributionCount(overrides?: CallOverrides): Promise<BigNumber>;

    getPrizeDistributions(
      _drawIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    pushPrizeDistribution(
      _drawId: PromiseOrValue<BigNumberish>,
      _prizeDistribution: IPrizeDistributionSource.PrizeDistributionStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setManager(
      _newManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPrizeDistribution(
      _drawId: PromiseOrValue<BigNumberish>,
      _prizeDistribution: IPrizeDistributionSource.PrizeDistributionStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBufferCardinality(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNewestPrizeDistribution(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOldestPrizeDistribution(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrizeDistribution(
      _drawId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrizeDistributionCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrizeDistributions(
      _drawIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pushPrizeDistribution(
      _drawId: PromiseOrValue<BigNumberish>,
      _prizeDistribution: IPrizeDistributionSource.PrizeDistributionStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setManager(
      _newManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPrizeDistribution(
      _drawId: PromiseOrValue<BigNumberish>,
      _prizeDistribution: IPrizeDistributionSource.PrizeDistributionStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface DrawBeaconInterface extends utils.Interface {
  functions: {
    "beaconPeriodEndAt()": FunctionFragment;
    "beaconPeriodRemainingSeconds()": FunctionFragment;
    "calculateNextBeaconPeriodStartTime(uint64)": FunctionFragment;
    "calculateNextBeaconPeriodStartTimeFromCurrentTime()": FunctionFragment;
    "canCompleteDraw()": FunctionFragment;
    "canStartDraw()": FunctionFragment;
    "cancelDraw()": FunctionFragment;
    "claimOwnership()": FunctionFragment;
    "completeDraw()": FunctionFragment;
    "getBeaconPeriodSeconds()": FunctionFragment;
    "getBeaconPeriodStartedAt()": FunctionFragment;
    "getDrawBuffer()": FunctionFragment;
    "getLastRngLockBlock()": FunctionFragment;
    "getLastRngRequestId()": FunctionFragment;
    "getNextDrawId()": FunctionFragment;
    "getRngService()": FunctionFragment;
    "getRngTimeout()": FunctionFragment;
    "isBeaconPeriodOver()": FunctionFragment;
    "isRngCompleted()": FunctionFragment;
    "isRngRequested()": FunctionFragment;
    "isRngTimedOut()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBeaconPeriodSeconds(uint32)": FunctionFragment;
    "setDrawBuffer(address)": FunctionFragment;
    "setRngService(address)": FunctionFragment;
    "setRngTimeout(uint32)": FunctionFragment;
    "startDraw()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "beaconPeriodEndAt"
      | "beaconPeriodRemainingSeconds"
      | "calculateNextBeaconPeriodStartTime"
      | "calculateNextBeaconPeriodStartTimeFromCurrentTime"
      | "canCompleteDraw"
      | "canStartDraw"
      | "cancelDraw"
      | "claimOwnership"
      | "completeDraw"
      | "getBeaconPeriodSeconds"
      | "getBeaconPeriodStartedAt"
      | "getDrawBuffer"
      | "getLastRngLockBlock"
      | "getLastRngRequestId"
      | "getNextDrawId"
      | "getRngService"
      | "getRngTimeout"
      | "isBeaconPeriodOver"
      | "isRngCompleted"
      | "isRngRequested"
      | "isRngTimedOut"
      | "owner"
      | "pendingOwner"
      | "renounceOwnership"
      | "setBeaconPeriodSeconds"
      | "setDrawBuffer"
      | "setRngService"
      | "setRngTimeout"
      | "startDraw"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "beaconPeriodEndAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "beaconPeriodRemainingSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateNextBeaconPeriodStartTime",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateNextBeaconPeriodStartTimeFromCurrentTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canCompleteDraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canStartDraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelDraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completeDraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBeaconPeriodSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBeaconPeriodStartedAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDrawBuffer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastRngLockBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastRngRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextDrawId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRngService",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRngTimeout",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isBeaconPeriodOver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isRngCompleted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isRngRequested",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isRngTimedOut",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBeaconPeriodSeconds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDrawBuffer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRngService",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRngTimeout",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "startDraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "beaconPeriodEndAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beaconPeriodRemainingSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateNextBeaconPeriodStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateNextBeaconPeriodStartTimeFromCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canCompleteDraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canStartDraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancelDraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeDraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBeaconPeriodSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBeaconPeriodStartedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDrawBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastRngLockBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastRngRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextDrawId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRngService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRngTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBeaconPeriodOver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRngCompleted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRngRequested",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRngTimedOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBeaconPeriodSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDrawBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRngService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRngTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startDraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "BeaconPeriodSecondsUpdated(uint32)": EventFragment;
    "BeaconPeriodStarted(uint64)": EventFragment;
    "Deployed(uint32,uint64)": EventFragment;
    "DrawBufferUpdated(address)": EventFragment;
    "DrawCancelled(uint32,uint32)": EventFragment;
    "DrawCompleted(uint256)": EventFragment;
    "DrawStarted(uint32,uint32)": EventFragment;
    "OwnershipOffered(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RngServiceUpdated(address)": EventFragment;
    "RngTimeoutSet(uint32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BeaconPeriodSecondsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconPeriodStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DrawBufferUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DrawCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DrawCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DrawStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipOffered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RngServiceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RngTimeoutSet"): EventFragment;
}

export interface BeaconPeriodSecondsUpdatedEventObject {
  drawPeriodSeconds: number;
}
export type BeaconPeriodSecondsUpdatedEvent = TypedEvent<
  [number],
  BeaconPeriodSecondsUpdatedEventObject
>;

export type BeaconPeriodSecondsUpdatedEventFilter =
  TypedEventFilter<BeaconPeriodSecondsUpdatedEvent>;

export interface BeaconPeriodStartedEventObject {
  startedAt: BigNumber;
}
export type BeaconPeriodStartedEvent = TypedEvent<
  [BigNumber],
  BeaconPeriodStartedEventObject
>;

export type BeaconPeriodStartedEventFilter =
  TypedEventFilter<BeaconPeriodStartedEvent>;

export interface DeployedEventObject {
  nextDrawId: number;
  beaconPeriodStartedAt: BigNumber;
}
export type DeployedEvent = TypedEvent<
  [number, BigNumber],
  DeployedEventObject
>;

export type DeployedEventFilter = TypedEventFilter<DeployedEvent>;

export interface DrawBufferUpdatedEventObject {
  newDrawBuffer: string;
}
export type DrawBufferUpdatedEvent = TypedEvent<
  [string],
  DrawBufferUpdatedEventObject
>;

export type DrawBufferUpdatedEventFilter =
  TypedEventFilter<DrawBufferUpdatedEvent>;

export interface DrawCancelledEventObject {
  rngRequestId: number;
  rngLockBlock: number;
}
export type DrawCancelledEvent = TypedEvent<
  [number, number],
  DrawCancelledEventObject
>;

export type DrawCancelledEventFilter = TypedEventFilter<DrawCancelledEvent>;

export interface DrawCompletedEventObject {
  randomNumber: BigNumber;
}
export type DrawCompletedEvent = TypedEvent<
  [BigNumber],
  DrawCompletedEventObject
>;

export type DrawCompletedEventFilter = TypedEventFilter<DrawCompletedEvent>;

export interface DrawStartedEventObject {
  rngRequestId: number;
  rngLockBlock: number;
}
export type DrawStartedEvent = TypedEvent<
  [number, number],
  DrawStartedEventObject
>;

export type DrawStartedEventFilter = TypedEventFilter<DrawStartedEvent>;

export interface OwnershipOfferedEventObject {
  pendingOwner: string;
}
export type OwnershipOfferedEvent = TypedEvent<
  [string],
  OwnershipOfferedEventObject
>;

export type OwnershipOfferedEventFilter =
  TypedEventFilter<OwnershipOfferedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RngServiceUpdatedEventObject {
  rngService: string;
}
export type RngServiceUpdatedEvent = TypedEvent<
  [string],
  RngServiceUpdatedEventObject
>;

export type RngServiceUpdatedEventFilter =
  TypedEventFilter<RngServiceUpdatedEvent>;

export interface RngTimeoutSetEventObject {
  rngTimeout: number;
}
export type RngTimeoutSetEvent = TypedEvent<[number], RngTimeoutSetEventObject>;

export type RngTimeoutSetEventFilter = TypedEventFilter<RngTimeoutSetEvent>;

export interface DrawBeacon extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DrawBeaconInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    beaconPeriodEndAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    beaconPeriodRemainingSeconds(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateNextBeaconPeriodStartTime(
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateNextBeaconPeriodStartTimeFromCurrentTime(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    canCompleteDraw(overrides?: CallOverrides): Promise<[boolean]>;

    canStartDraw(overrides?: CallOverrides): Promise<[boolean]>;

    cancelDraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    completeDraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBeaconPeriodSeconds(overrides?: CallOverrides): Promise<[number]>;

    getBeaconPeriodStartedAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDrawBuffer(overrides?: CallOverrides): Promise<[string]>;

    getLastRngLockBlock(overrides?: CallOverrides): Promise<[number]>;

    getLastRngRequestId(overrides?: CallOverrides): Promise<[number]>;

    getNextDrawId(overrides?: CallOverrides): Promise<[number]>;

    getRngService(overrides?: CallOverrides): Promise<[string]>;

    getRngTimeout(overrides?: CallOverrides): Promise<[number]>;

    isBeaconPeriodOver(overrides?: CallOverrides): Promise<[boolean]>;

    isRngCompleted(overrides?: CallOverrides): Promise<[boolean]>;

    isRngRequested(overrides?: CallOverrides): Promise<[boolean]>;

    isRngTimedOut(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBeaconPeriodSeconds(
      _beaconPeriodSeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDrawBuffer(
      newDrawBuffer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRngService(
      _rngService: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRngTimeout(
      _rngTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startDraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  beaconPeriodEndAt(overrides?: CallOverrides): Promise<BigNumber>;

  beaconPeriodRemainingSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  calculateNextBeaconPeriodStartTime(
    _time: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateNextBeaconPeriodStartTimeFromCurrentTime(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  canCompleteDraw(overrides?: CallOverrides): Promise<boolean>;

  canStartDraw(overrides?: CallOverrides): Promise<boolean>;

  cancelDraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  completeDraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBeaconPeriodSeconds(overrides?: CallOverrides): Promise<number>;

  getBeaconPeriodStartedAt(overrides?: CallOverrides): Promise<BigNumber>;

  getDrawBuffer(overrides?: CallOverrides): Promise<string>;

  getLastRngLockBlock(overrides?: CallOverrides): Promise<number>;

  getLastRngRequestId(overrides?: CallOverrides): Promise<number>;

  getNextDrawId(overrides?: CallOverrides): Promise<number>;

  getRngService(overrides?: CallOverrides): Promise<string>;

  getRngTimeout(overrides?: CallOverrides): Promise<number>;

  isBeaconPeriodOver(overrides?: CallOverrides): Promise<boolean>;

  isRngCompleted(overrides?: CallOverrides): Promise<boolean>;

  isRngRequested(overrides?: CallOverrides): Promise<boolean>;

  isRngTimedOut(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBeaconPeriodSeconds(
    _beaconPeriodSeconds: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDrawBuffer(
    newDrawBuffer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRngService(
    _rngService: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRngTimeout(
    _rngTimeout: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startDraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    _newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    beaconPeriodEndAt(overrides?: CallOverrides): Promise<BigNumber>;

    beaconPeriodRemainingSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    calculateNextBeaconPeriodStartTime(
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateNextBeaconPeriodStartTimeFromCurrentTime(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canCompleteDraw(overrides?: CallOverrides): Promise<boolean>;

    canStartDraw(overrides?: CallOverrides): Promise<boolean>;

    cancelDraw(overrides?: CallOverrides): Promise<void>;

    claimOwnership(overrides?: CallOverrides): Promise<void>;

    completeDraw(overrides?: CallOverrides): Promise<void>;

    getBeaconPeriodSeconds(overrides?: CallOverrides): Promise<number>;

    getBeaconPeriodStartedAt(overrides?: CallOverrides): Promise<BigNumber>;

    getDrawBuffer(overrides?: CallOverrides): Promise<string>;

    getLastRngLockBlock(overrides?: CallOverrides): Promise<number>;

    getLastRngRequestId(overrides?: CallOverrides): Promise<number>;

    getNextDrawId(overrides?: CallOverrides): Promise<number>;

    getRngService(overrides?: CallOverrides): Promise<string>;

    getRngTimeout(overrides?: CallOverrides): Promise<number>;

    isBeaconPeriodOver(overrides?: CallOverrides): Promise<boolean>;

    isRngCompleted(overrides?: CallOverrides): Promise<boolean>;

    isRngRequested(overrides?: CallOverrides): Promise<boolean>;

    isRngTimedOut(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBeaconPeriodSeconds(
      _beaconPeriodSeconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDrawBuffer(
      newDrawBuffer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    setRngService(
      _rngService: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRngTimeout(
      _rngTimeout: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    startDraw(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BeaconPeriodSecondsUpdated(uint32)"(
      drawPeriodSeconds?: null
    ): BeaconPeriodSecondsUpdatedEventFilter;
    BeaconPeriodSecondsUpdated(
      drawPeriodSeconds?: null
    ): BeaconPeriodSecondsUpdatedEventFilter;

    "BeaconPeriodStarted(uint64)"(
      startedAt?: PromiseOrValue<BigNumberish> | null
    ): BeaconPeriodStartedEventFilter;
    BeaconPeriodStarted(
      startedAt?: PromiseOrValue<BigNumberish> | null
    ): BeaconPeriodStartedEventFilter;

    "Deployed(uint32,uint64)"(
      nextDrawId?: null,
      beaconPeriodStartedAt?: null
    ): DeployedEventFilter;
    Deployed(
      nextDrawId?: null,
      beaconPeriodStartedAt?: null
    ): DeployedEventFilter;

    "DrawBufferUpdated(address)"(
      newDrawBuffer?: PromiseOrValue<string> | null
    ): DrawBufferUpdatedEventFilter;
    DrawBufferUpdated(
      newDrawBuffer?: PromiseOrValue<string> | null
    ): DrawBufferUpdatedEventFilter;

    "DrawCancelled(uint32,uint32)"(
      rngRequestId?: PromiseOrValue<BigNumberish> | null,
      rngLockBlock?: null
    ): DrawCancelledEventFilter;
    DrawCancelled(
      rngRequestId?: PromiseOrValue<BigNumberish> | null,
      rngLockBlock?: null
    ): DrawCancelledEventFilter;

    "DrawCompleted(uint256)"(randomNumber?: null): DrawCompletedEventFilter;
    DrawCompleted(randomNumber?: null): DrawCompletedEventFilter;

    "DrawStarted(uint32,uint32)"(
      rngRequestId?: PromiseOrValue<BigNumberish> | null,
      rngLockBlock?: null
    ): DrawStartedEventFilter;
    DrawStarted(
      rngRequestId?: PromiseOrValue<BigNumberish> | null,
      rngLockBlock?: null
    ): DrawStartedEventFilter;

    "OwnershipOffered(address)"(
      pendingOwner?: PromiseOrValue<string> | null
    ): OwnershipOfferedEventFilter;
    OwnershipOffered(
      pendingOwner?: PromiseOrValue<string> | null
    ): OwnershipOfferedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RngServiceUpdated(address)"(
      rngService?: PromiseOrValue<string> | null
    ): RngServiceUpdatedEventFilter;
    RngServiceUpdated(
      rngService?: PromiseOrValue<string> | null
    ): RngServiceUpdatedEventFilter;

    "RngTimeoutSet(uint32)"(rngTimeout?: null): RngTimeoutSetEventFilter;
    RngTimeoutSet(rngTimeout?: null): RngTimeoutSetEventFilter;
  };

  estimateGas: {
    beaconPeriodEndAt(overrides?: CallOverrides): Promise<BigNumber>;

    beaconPeriodRemainingSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    calculateNextBeaconPeriodStartTime(
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateNextBeaconPeriodStartTimeFromCurrentTime(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canCompleteDraw(overrides?: CallOverrides): Promise<BigNumber>;

    canStartDraw(overrides?: CallOverrides): Promise<BigNumber>;

    cancelDraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    completeDraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBeaconPeriodSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    getBeaconPeriodStartedAt(overrides?: CallOverrides): Promise<BigNumber>;

    getDrawBuffer(overrides?: CallOverrides): Promise<BigNumber>;

    getLastRngLockBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getLastRngRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    getNextDrawId(overrides?: CallOverrides): Promise<BigNumber>;

    getRngService(overrides?: CallOverrides): Promise<BigNumber>;

    getRngTimeout(overrides?: CallOverrides): Promise<BigNumber>;

    isBeaconPeriodOver(overrides?: CallOverrides): Promise<BigNumber>;

    isRngCompleted(overrides?: CallOverrides): Promise<BigNumber>;

    isRngRequested(overrides?: CallOverrides): Promise<BigNumber>;

    isRngTimedOut(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBeaconPeriodSeconds(
      _beaconPeriodSeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDrawBuffer(
      newDrawBuffer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRngService(
      _rngService: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRngTimeout(
      _rngTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startDraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    beaconPeriodEndAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    beaconPeriodRemainingSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateNextBeaconPeriodStartTime(
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateNextBeaconPeriodStartTimeFromCurrentTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canCompleteDraw(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canStartDraw(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelDraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    completeDraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBeaconPeriodSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBeaconPeriodStartedAt(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDrawBuffer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLastRngLockBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastRngRequestId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextDrawId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRngService(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRngTimeout(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isBeaconPeriodOver(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRngCompleted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isRngRequested(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isRngTimedOut(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBeaconPeriodSeconds(
      _beaconPeriodSeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDrawBuffer(
      newDrawBuffer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRngService(
      _rngService: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRngTimeout(
      _rngTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startDraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

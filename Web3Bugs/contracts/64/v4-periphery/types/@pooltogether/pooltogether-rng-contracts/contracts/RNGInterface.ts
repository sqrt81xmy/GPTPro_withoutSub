/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface RNGInterfaceInterface extends utils.Interface {
  functions: {
    "getLastRequestId()": FunctionFragment;
    "getRequestFee()": FunctionFragment;
    "isRequestComplete(uint32)": FunctionFragment;
    "randomNumber(uint32)": FunctionFragment;
    "requestRandomNumber()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getLastRequestId"
      | "getRequestFee"
      | "isRequestComplete"
      | "randomNumber"
      | "requestRandomNumber"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getLastRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isRequestComplete",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "randomNumber",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestRandomNumber",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getLastRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRequestComplete",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "randomNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRandomNumber",
    data: BytesLike
  ): Result;

  events: {
    "RandomNumberCompleted(uint32,uint256)": EventFragment;
    "RandomNumberRequested(uint32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RandomNumberCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RandomNumberRequested"): EventFragment;
}

export interface RandomNumberCompletedEventObject {
  requestId: number;
  randomNumber: BigNumber;
}
export type RandomNumberCompletedEvent = TypedEvent<
  [number, BigNumber],
  RandomNumberCompletedEventObject
>;

export type RandomNumberCompletedEventFilter =
  TypedEventFilter<RandomNumberCompletedEvent>;

export interface RandomNumberRequestedEventObject {
  requestId: number;
  sender: string;
}
export type RandomNumberRequestedEvent = TypedEvent<
  [number, string],
  RandomNumberRequestedEventObject
>;

export type RandomNumberRequestedEventFilter =
  TypedEventFilter<RandomNumberRequestedEvent>;

export interface RNGInterface extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RNGInterfaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getLastRequestId(
      overrides?: CallOverrides
    ): Promise<[number] & { requestId: number }>;

    getRequestFee(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { feeToken: string; requestFee: BigNumber }
    >;

    isRequestComplete(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isCompleted: boolean }>;

    randomNumber(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestRandomNumber(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getLastRequestId(overrides?: CallOverrides): Promise<number>;

  getRequestFee(
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { feeToken: string; requestFee: BigNumber }>;

  isRequestComplete(
    requestId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  randomNumber(
    requestId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestRandomNumber(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getLastRequestId(overrides?: CallOverrides): Promise<number>;

    getRequestFee(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { feeToken: string; requestFee: BigNumber }
    >;

    isRequestComplete(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    randomNumber(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestRandomNumber(
      overrides?: CallOverrides
    ): Promise<[number, number] & { requestId: number; lockBlock: number }>;
  };

  filters: {
    "RandomNumberCompleted(uint32,uint256)"(
      requestId?: PromiseOrValue<BigNumberish> | null,
      randomNumber?: null
    ): RandomNumberCompletedEventFilter;
    RandomNumberCompleted(
      requestId?: PromiseOrValue<BigNumberish> | null,
      randomNumber?: null
    ): RandomNumberCompletedEventFilter;

    "RandomNumberRequested(uint32,address)"(
      requestId?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null
    ): RandomNumberRequestedEventFilter;
    RandomNumberRequested(
      requestId?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null
    ): RandomNumberRequestedEventFilter;
  };

  estimateGas: {
    getLastRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    getRequestFee(overrides?: CallOverrides): Promise<BigNumber>;

    isRequestComplete(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    randomNumber(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestRandomNumber(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getLastRequestId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRequestFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isRequestComplete(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    randomNumber(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestRandomNumber(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

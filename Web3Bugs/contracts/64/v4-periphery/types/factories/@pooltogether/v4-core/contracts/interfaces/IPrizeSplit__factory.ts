/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IPrizeSplit,
  IPrizeSplitInterface,
} from "../../../../../@pooltogether/v4-core/contracts/interfaces/IPrizeSplit";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "prizeAwarded",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "contract IControlledToken",
        name: "token",
        type: "address",
      },
    ],
    name: "PrizeSplitAwarded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "target",
        type: "uint256",
      },
    ],
    name: "PrizeSplitRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "percentage",
        type: "uint16",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "PrizeSplitSet",
    type: "event",
  },
  {
    inputs: [],
    name: "getPrizePool",
    outputs: [
      {
        internalType: "contract IPrizePool",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "prizeSplitIndex",
        type: "uint256",
      },
    ],
    name: "getPrizeSplit",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "uint16",
            name: "percentage",
            type: "uint16",
          },
        ],
        internalType: "struct IPrizeSplit.PrizeSplitConfig",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPrizeSplits",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "uint16",
            name: "percentage",
            type: "uint16",
          },
        ],
        internalType: "struct IPrizeSplit.PrizeSplitConfig[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "uint16",
            name: "percentage",
            type: "uint16",
          },
        ],
        internalType: "struct IPrizeSplit.PrizeSplitConfig",
        name: "prizeStrategySplit",
        type: "tuple",
      },
      {
        internalType: "uint8",
        name: "prizeSplitIndex",
        type: "uint8",
      },
    ],
    name: "setPrizeSplit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "uint16",
            name: "percentage",
            type: "uint16",
          },
        ],
        internalType: "struct IPrizeSplit.PrizeSplitConfig[]",
        name: "newPrizeSplits",
        type: "tuple[]",
      },
    ],
    name: "setPrizeSplits",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IPrizeSplit__factory {
  static readonly abi = _abi;
  static createInterface(): IPrizeSplitInterface {
    return new utils.Interface(_abi) as IPrizeSplitInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IPrizeSplit {
    return new Contract(address, _abi, signerOrProvider) as IPrizeSplit;
  }
}

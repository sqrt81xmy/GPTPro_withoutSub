/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IPrizeDistributionSource,
  IPrizeDistributionSourceInterface,
} from "../../../../../@pooltogether/v4-core/contracts/interfaces/IPrizeDistributionSource";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint32[]",
        name: "drawIds",
        type: "uint32[]",
      },
    ],
    name: "getPrizeDistributions",
    outputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "bitRangeSize",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "matchCardinality",
            type: "uint8",
          },
          {
            internalType: "uint32",
            name: "startTimestampOffset",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "endTimestampOffset",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "maxPicksPerUser",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "expiryDuration",
            type: "uint32",
          },
          {
            internalType: "uint104",
            name: "numberOfPicks",
            type: "uint104",
          },
          {
            internalType: "uint32[16]",
            name: "tiers",
            type: "uint32[16]",
          },
          {
            internalType: "uint256",
            name: "prize",
            type: "uint256",
          },
        ],
        internalType: "struct IPrizeDistributionSource.PrizeDistribution[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class IPrizeDistributionSource__factory {
  static readonly abi = _abi;
  static createInterface(): IPrizeDistributionSourceInterface {
    return new utils.Interface(_abi) as IPrizeDistributionSourceInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IPrizeDistributionSource {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IPrizeDistributionSource;
  }
}

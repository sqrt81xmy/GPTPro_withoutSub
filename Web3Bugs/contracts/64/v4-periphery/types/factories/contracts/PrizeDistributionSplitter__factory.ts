/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  PrizeDistributionSplitter,
  PrizeDistributionSplitterInterface,
} from "../../contracts/PrizeDistributionSplitter";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_drawId",
        type: "uint32",
      },
      {
        internalType: "contract IPrizeDistributionSource",
        name: "_prizeDistributionSourceBefore",
        type: "address",
      },
      {
        internalType: "contract IPrizeDistributionSource",
        name: "_prizeDistributionSourceAtOrAfter",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint32",
        name: "drawId",
        type: "uint32",
      },
    ],
    name: "DrawIdSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "contract IPrizeDistributionSource",
        name: "prizeDistributionSourceBefore",
        type: "address",
      },
      {
        indexed: false,
        internalType: "contract IPrizeDistributionSource",
        name: "prizeDistributionSourceAtOrAfter",
        type: "address",
      },
    ],
    name: "PrizeDistributionSourcesSet",
    type: "event",
  },
  {
    inputs: [],
    name: "drawId",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32[]",
        name: "_drawIds",
        type: "uint32[]",
      },
    ],
    name: "getPrizeDistributions",
    outputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "bitRangeSize",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "matchCardinality",
            type: "uint8",
          },
          {
            internalType: "uint32",
            name: "startTimestampOffset",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "endTimestampOffset",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "maxPicksPerUser",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "expiryDuration",
            type: "uint32",
          },
          {
            internalType: "uint104",
            name: "numberOfPicks",
            type: "uint104",
          },
          {
            internalType: "uint32[16]",
            name: "tiers",
            type: "uint32[16]",
          },
          {
            internalType: "uint256",
            name: "prize",
            type: "uint256",
          },
        ],
        internalType: "struct IPrizeDistributionSource.PrizeDistribution[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "prizeDistributionSourceAtOrAfter",
    outputs: [
      {
        internalType: "contract IPrizeDistributionSource",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "prizeDistributionSourceBefore",
    outputs: [
      {
        internalType: "contract IPrizeDistributionSource",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60e060405234801561001057600080fd5b50604051610f17380380610f1783398101604081905261002f916101c1565b60008363ffffffff161161008a5760405162461bcd60e51b815260206004820181905260248201527f5072697a654469737453706c69747465722f6472617749642d67742d7a65726f60448201526064015b60405180910390fd5b6100938261014c565b61009c8161014c565b6001600160e01b031960e084901b166080526001600160601b0319606083811b821660a05282901b1660c05260405163ffffffff841681527f9e9447daae575bb951b92f397505298af8130447046ec63ac8336924314bb2d19060200160405180910390a1604080516001600160a01b038085168252831660208201527fa5da33bbb190eddb657769653955a72fd5e84fa70daebe862391f9859435d44f910160405180910390a150505061020f565b6001600160a01b0381166101a25760405162461bcd60e51b815260206004820152601f60248201527f5072697a654469737453706c69747465722f6e6f742d7a65726f2d61646472006044820152606401610081565b50565b80516001600160a01b03811681146101bc57600080fd5b919050565b6000806000606084860312156101d657600080fd5b835163ffffffff811681146101ea57600080fd5b92506101f8602085016101a5565b9150610206604085016101a5565b90509250925092565b60805160e01c60a05160601c60c05160601c610caf61026860003960008181610103015281816103ad015261055901526000818160560152818161046e01526104ca01526000818160c7015261012a0152610caf6000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806390beb6eb14610051578063d30a5daf146100a2578063eb0e81d4146100c2578063ede09c5d146100fe575b600080fd5b6100787f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100b56100b0366004610997565b610125565b6040516100999190610a5f565b6100e97f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff9091168152602001610099565b6100787f000000000000000000000000000000000000000000000000000000000000000081565b6060817f000000000000000000000000000000000000000000000000000000000000000060005b828110156101a4578163ffffffff1686868381811061016d5761016d610c38565b90506020020160208101906101829190610a0c565b63ffffffff1610610192576101a4565b8061019c81610be9565b91505061014c565b60608060006101b38487610bd2565b90508315610201578367ffffffffffffffff8111156101d4576101d4610c4e565b6040519080825280602002602001820160405280156101fd578160200160208202803683370190505b5092505b801561024d578067ffffffffffffffff81111561022057610220610c4e565b604051908082528060200260200182016040528015610249578160200160208202803683370190505b5091505b6000805b878110156103825760008b8b8381811061026d5761026d610c38565b90506020020160208101906102829190610a0c565b90508263ffffffff168163ffffffff16116102fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f5072697a654469737453706c69747465722f6472617749642d61736300000000604482015260640160405180910390fd5b86821015610337578086838151811061031857610318610c38565b602002602001019063ffffffff16908163ffffffff168152505061036e565b80856103438985610bd2565b8151811061035357610353610c38565b602002602001019063ffffffff16908163ffffffff16815250505b91508061037a81610be9565b915050610251565b5083516104445760405163d30a5daf60e01b815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063d30a5daf906103e2908690600401610b2d565b60006040518083038186803b1580156103fa57600080fd5b505afa15801561040e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104369190810190610845565b97505050505050505061070c565b82516104a35760405163d30a5daf60e01b815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063d30a5daf906103e2908790600401610b2d565b60405163d30a5daf60e01b815260009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063d30a5daf906104ff908890600401610b2d565b60006040518083038186803b15801561051757600080fd5b505afa15801561052b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105539190810190610845565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d30a5daf866040518263ffffffff1660e01b81526004016105b09190610b2d565b60006040518083038186803b1580156105c857600080fd5b505afa1580156105dc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106049190810190610845565b905060008967ffffffffffffffff81111561062157610621610c4e565b60405190808252806020026020018201604052801561065a57816020015b610647610712565b81526020019060019003908161063f5790505b50905060005b8a8110156106ff57888110156106ac5783818151811061068257610682610c38565b602002602001015182828151811061069c5761069c610c38565b60200260200101819052506106ed565b826106b78a83610bd2565b815181106106c7576106c7610c38565b60200260200101518282815181106106e1576106e1610c38565b60200260200101819052505b806106f781610be9565b915050610660565b5099505050505050505050505b92915050565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915260e08101610758610765565b8152602001600081525090565b6040518061020001604052806010906020820280368337509192915050565b600082601f83011261079557600080fd5b60405161020080820182811067ffffffffffffffff821117156107ba576107ba610c4e565b60405281848281018710156107ce57600080fd5b600092505b60108310156107fc5780516107e781610c64565b825260019290920191602091820191016107d3565b509195945050505050565b80516cffffffffffffffffffffffffff8116811461082457600080fd5b919050565b805161082481610c64565b805160ff8116811461082457600080fd5b6000602080838503121561085857600080fd5b825167ffffffffffffffff8082111561087057600080fd5b818501915085601f83011261088457600080fd5b81518181111561089657610896610c4e565b6108a4848260051b01610ba1565b8181528481019250838501610300808402860187018a10156108c557600080fd5b60009550855b848110156109885781838c0312156108e1578687fd5b6108e9610b77565b6108f284610834565b81526108ff898501610834565b898201526040610910818601610829565b908201526060610921858201610829565b908201526080610932858201610829565b9082015260a0610943858201610829565b9082015260c0610954858201610807565b9082015260e06109668d868301610784565b908201526102e0840151610100820152865294870194918101916001016108cb565b50919998505050505050505050565b600080602083850312156109aa57600080fd5b823567ffffffffffffffff808211156109c257600080fd5b818501915085601f8301126109d657600080fd5b8135818111156109e557600080fd5b8660208260051b85010111156109fa57600080fd5b60209290920196919550909350505050565b600060208284031215610a1e57600080fd5b8135610a2981610c64565b9392505050565b8060005b6010811015610a5957815163ffffffff16845260209384019390910190600101610a34565b50505050565b602080825282518282018190526000919060409081850190868401855b82811015610b2057815160ff815116855286810151610a9f8887018260ff169052565b508581015163ffffffff9081168688015260608083015182169087015260808083015182169087015260a0808301519091169086015260c0808201516cffffffffffffffffffffffffff169086015260e080820151610b0082880182610a30565b505061010001516102e08501526103009093019290850190600101610a7c565b5091979650505050505050565b6020808252825182820181905260009190848201906040850190845b81811015610b6b57835163ffffffff1683529284019291840191600101610b49565b50909695505050505050565b604051610120810167ffffffffffffffff81118282101715610b9b57610b9b610c4e565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610bca57610bca610c4e565b604052919050565b600082821015610be457610be4610c22565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c1b57610c1b610c22565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b63ffffffff81168114610c7657600080fd5b5056fea2646970667358221220a87a90a16f29fadc1d9d7c467f953346a6e307bab1e00bc2724f1e4b3dabb1bc64736f6c63430008060033";

type PrizeDistributionSplitterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PrizeDistributionSplitterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PrizeDistributionSplitter__factory extends ContractFactory {
  constructor(...args: PrizeDistributionSplitterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _drawId: PromiseOrValue<BigNumberish>,
    _prizeDistributionSourceBefore: PromiseOrValue<string>,
    _prizeDistributionSourceAtOrAfter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PrizeDistributionSplitter> {
    return super.deploy(
      _drawId,
      _prizeDistributionSourceBefore,
      _prizeDistributionSourceAtOrAfter,
      overrides || {}
    ) as Promise<PrizeDistributionSplitter>;
  }
  override getDeployTransaction(
    _drawId: PromiseOrValue<BigNumberish>,
    _prizeDistributionSourceBefore: PromiseOrValue<string>,
    _prizeDistributionSourceAtOrAfter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _drawId,
      _prizeDistributionSourceBefore,
      _prizeDistributionSourceAtOrAfter,
      overrides || {}
    );
  }
  override attach(address: string): PrizeDistributionSplitter {
    return super.attach(address) as PrizeDistributionSplitter;
  }
  override connect(signer: Signer): PrizeDistributionSplitter__factory {
    return super.connect(signer) as PrizeDistributionSplitter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PrizeDistributionSplitterInterface {
    return new utils.Interface(_abi) as PrizeDistributionSplitterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PrizeDistributionSplitter {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as PrizeDistributionSplitter;
  }
}

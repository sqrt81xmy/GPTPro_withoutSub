/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  PrizeTierHistory,
  PrizeTierHistoryInterface,
} from "../../contracts/PrizeTierHistory";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousManager",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newManager",
        type: "address",
      },
    ],
    name: "ManagerTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "pendingOwner",
        type: "address",
      },
    ],
    name: "OwnershipOffered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint32",
        name: "drawId",
        type: "uint32",
      },
      {
        components: [
          {
            internalType: "uint8",
            name: "bitRangeSize",
            type: "uint8",
          },
          {
            internalType: "uint32",
            name: "drawId",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "maxPicksPerUser",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "expiryDuration",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "endTimestampOffset",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "prize",
            type: "uint256",
          },
          {
            internalType: "uint32[16]",
            name: "tiers",
            type: "uint32[16]",
          },
        ],
        indexed: false,
        internalType: "struct IPrizeTierHistory.PrizeTier",
        name: "prizeTier",
        type: "tuple",
      },
    ],
    name: "PrizeTierPushed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint32",
        name: "drawId",
        type: "uint32",
      },
      {
        components: [
          {
            internalType: "uint8",
            name: "bitRangeSize",
            type: "uint8",
          },
          {
            internalType: "uint32",
            name: "drawId",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "maxPicksPerUser",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "expiryDuration",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "endTimestampOffset",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "prize",
            type: "uint256",
          },
          {
            internalType: "uint32[16]",
            name: "tiers",
            type: "uint32[16]",
          },
        ],
        indexed: false,
        internalType: "struct IPrizeTierHistory.PrizeTier",
        name: "prizeTier",
        type: "tuple",
      },
    ],
    name: "PrizeTierSet",
    type: "event",
  },
  {
    inputs: [],
    name: "claimOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "count",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNewestDrawId",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getOldestDrawId",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "drawId",
        type: "uint32",
      },
    ],
    name: "getPrizeTier",
    outputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "bitRangeSize",
            type: "uint8",
          },
          {
            internalType: "uint32",
            name: "drawId",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "maxPicksPerUser",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "expiryDuration",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "endTimestampOffset",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "prize",
            type: "uint256",
          },
          {
            internalType: "uint32[16]",
            name: "tiers",
            type: "uint32[16]",
          },
        ],
        internalType: "struct IPrizeTierHistory.PrizeTier",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getPrizeTierAtIndex",
    outputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "bitRangeSize",
            type: "uint8",
          },
          {
            internalType: "uint32",
            name: "drawId",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "maxPicksPerUser",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "expiryDuration",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "endTimestampOffset",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "prize",
            type: "uint256",
          },
          {
            internalType: "uint32[16]",
            name: "tiers",
            type: "uint32[16]",
          },
        ],
        internalType: "struct IPrizeTierHistory.PrizeTier",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32[]",
        name: "_drawIds",
        type: "uint32[]",
      },
    ],
    name: "getPrizeTierList",
    outputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "bitRangeSize",
            type: "uint8",
          },
          {
            internalType: "uint32",
            name: "drawId",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "maxPicksPerUser",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "expiryDuration",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "endTimestampOffset",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "prize",
            type: "uint256",
          },
          {
            internalType: "uint32[16]",
            name: "tiers",
            type: "uint32[16]",
          },
        ],
        internalType: "struct IPrizeTierHistory.PrizeTier[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "manager",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "bitRangeSize",
            type: "uint8",
          },
          {
            internalType: "uint32",
            name: "drawId",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "maxPicksPerUser",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "expiryDuration",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "endTimestampOffset",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "prize",
            type: "uint256",
          },
          {
            internalType: "uint32[16]",
            name: "tiers",
            type: "uint32[16]",
          },
        ],
        internalType: "struct IPrizeTierHistory.PrizeTier",
        name: "newPrizeTier",
        type: "tuple",
      },
    ],
    name: "popAndPush",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "bitRangeSize",
            type: "uint8",
          },
          {
            internalType: "uint32",
            name: "drawId",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "maxPicksPerUser",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "expiryDuration",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "endTimestampOffset",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "prize",
            type: "uint256",
          },
          {
            internalType: "uint32[16]",
            name: "tiers",
            type: "uint32[16]",
          },
        ],
        internalType: "struct IPrizeTierHistory.PrizeTier",
        name: "nextPrizeTier",
        type: "tuple",
      },
    ],
    name: "push",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "bitRangeSize",
            type: "uint8",
          },
          {
            internalType: "uint32",
            name: "drawId",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "maxPicksPerUser",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "expiryDuration",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "endTimestampOffset",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "prize",
            type: "uint256",
          },
          {
            internalType: "uint32[16]",
            name: "tiers",
            type: "uint32[16]",
          },
        ],
        internalType: "struct IPrizeTierHistory.PrizeTier",
        name: "newPrizeTier",
        type: "tuple",
      },
    ],
    name: "replace",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newManager",
        type: "address",
      },
    ],
    name: "setManager",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001edb38038062001edb833981016040819052620000349162000098565b80620000408162000048565b5050620000ca565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215620000ab57600080fd5b81516001600160a01b0381168114620000c357600080fd5b9392505050565b611e0180620000da6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063715018a611610097578063e30c397811610066578063e30c397814610211578063e4dd269014610222578063f114376514610235578063f2fde38b1461024857600080fd5b8063715018a6146101c25780638da5cb5b146101ca578063d0ebdbe7146101db578063d365027d146101fe57600080fd5b8063481c6a75116100d3578063481c6a75146101555780634aac253d1461017a5780634e602cd81461019a5780634e71e0c8146101ba57600080fd5b806306661abd146101055780633659f5431461011b57806339dd7f0814610130578063472b619c1461014d575b600080fd5b6003546040519081526020015b60405180910390f35b61012e61012936600461181e565b61025b565b005b61013861032d565b60405163ffffffff9091168152602001610112565b61013861036e565b6002546001600160a01b03165b6040516001600160a01b039091168152602001610112565b61018d610188366004611901565b610392565b6040516101129190611aa9565b6101ad6101a83660046117a9565b610514565b604051610112919061199b565b61012e6106d2565b61012e610760565b6000546001600160a01b0316610162565b6101ee6101e9366004611780565b6107d5565b6040519015158152602001610112565b61012e61020c36600461181e565b610851565b6001546001600160a01b0316610162565b61018d6102303660046118e8565b6108c3565b61013861024336600461181e565b610986565b61012e610256366004611780565b610b05565b3361026e6002546001600160a01b031690565b6001600160a01b0316148061029c5750336102916000546001600160a01b031690565b6001600160a01b0316145b6103135760405162461bcd60e51b815260206004820152602660248201527f4d616e61676561626c652f63616c6c65722d6e6f742d6d616e616765722d6f7260448201527f2d6f776e6572000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61032a61032536839003830183611837565b610c41565b50565b6000600360008154811061034357610343611c1d565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff16905090565b600380546000919061038290600190611b29565b8154811061034357610343611c1d565b61039a6115df565b60008263ffffffff16116104165760405162461bcd60e51b815260206004820152602160248201527f5072697a6554696572486973746f72792f647261772d69642d6e6f742d7a657260448201527f6f00000000000000000000000000000000000000000000000000000000000000606482015260840161030a565b60046000610425600385610ed6565b63ffffffff90811682526020808301939093526040918201600020825160e081018452815460ff81168252610100810484169582019590955265010000000000850483168185015269010000000000000000008504831660608201526d01000000000000000000000000009094049091166080840152600181015460a0840152815161020081019092529060c08301906002830160108282826020028201916000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116104c85790505050505050815250509050919050565b60608160008167ffffffffffffffff81111561053257610532611c33565b60405190808252806020026020018201604052801561056b57816020015b6105586115df565b8152602001906001900390816105505790505b50905060005b828110156106c757600460006105af88888581811061059257610592611c1d565b90506020020160208101906105a79190611901565b600390610ed6565b63ffffffff90811682526020808301939093526040918201600020825160e081018452815460ff81168252610100810484169582019590955265010000000000850483168185015269010000000000000000008504831660608201526d01000000000000000000000000009094049091166080840152600181015460a0840152815161020081019092529060c08301906002830160108282826020028201916000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116106525790505050505050815250508282815181106106a9576106a9611c1d565b602002602001018190525080806106bf90611bce565b915050610571565b509150505b92915050565b6001546001600160a01b0316331461072c5760405162461bcd60e51b815260206004820152601f60248201527f4f776e61626c652f63616c6c65722d6e6f742d70656e64696e674f776e657200604482015260640161030a565b600154610741906001600160a01b0316611154565b6001805473ffffffffffffffffffffffffffffffffffffffff19169055565b336107736000546001600160a01b031690565b6001600160a01b0316146107c95760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e65720000000000000000604482015260640161030a565b6107d36000611154565b565b6000336107ea6000546001600160a01b031690565b6001600160a01b0316146108405760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e65720000000000000000604482015260640161030a565b610849826111b1565b90505b919050565b336108646000546001600160a01b031690565b6001600160a01b0316146108ba5760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e65720000000000000000604482015260640161030a565b61032a8161129d565b6108cb6115df565b63ffffffff828116600090815260046020818152604092839020835160e081018552815460ff81168252610100810487168285015265010000000000810487168287015269010000000000000000008104871660608301526d0100000000000000000000000000900486166080820152600182015460a0820152845161020081019586905260028301805490971681529095919460c08701949193601092849186018084116104c85790505050505050815250509050919050565b60003361099b6000546001600160a01b031690565b6001600160a01b0316146109f15760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e65720000000000000000604482015260640161030a565b60035480610a415760405162461bcd60e51b815260206004820152601e60248201527f5072697a6554696572486973746f72792f686973746f72792d656d7074790000604482015260640161030a565b610a516040840160208501611901565b63ffffffff166003610a64600184611b29565b81548110610a7457610a74611c1d565b6000918252602090912060088204015460079091166004026101000a900463ffffffff1614610ae55760405162461bcd60e51b815260206004820181905260248201527f5072697a6554696572486973746f72792f696e76616c69642d647261772d6964604482015260640161030a565b610aee8361129d565b610afe6040840160208501611901565b9392505050565b33610b186000546001600160a01b031690565b6001600160a01b031614610b6e5760405162461bcd60e51b815260206004820152601860248201527f4f776e61626c652f63616c6c65722d6e6f742d6f776e65720000000000000000604482015260640161030a565b6001600160a01b038116610bea5760405162461bcd60e51b815260206004820152602560248201527f4f776e61626c652f70656e64696e674f776e65722d6e6f742d7a65726f2d616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161030a565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f239a2ddded15777fa246aed5f7e1a9bc69a39d4eb4a397034d1d85766cca7d4c90600090a250565b60035463ffffffff811615610d245760006003610c5f600184611b40565b63ffffffff1681548110610c7557610c75611c1d565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1690508063ffffffff16836020015163ffffffff1611610d225760405162461bcd60e51b815260206004820152602260248201527f5072697a6554696572486973746f72792f6e6f6e2d73657175656e7469616c2d60448201527f6964000000000000000000000000000000000000000000000000000000000000606482015260840161030a565b505b610d318260c0015161153c565b60208083018051600380546001818101909255600881047fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01805463ffffffff94851660046007909416840261010090810a91820291870219909216179091558684166000908152919095526040908190208751815495519289015160608a015160808b015187166d0100000000000000000000000000027fffffffffffffffffffffffffffffff00000000ffffffffffffffffffffffffff9188166901000000000000000000026cffffffff000000000000000000199389166501000000000002939093167fffffffffffffffffffffffffffffffffffffff0000000000000000ffffffffff9690981690990264ffffffffff1990981660ff90931692909217969096179290921693909317939093179290921692909217825560a08401519082015560c0830151839190610e8d9060028301906010611622565b50905050816020015163ffffffff167efa6c2cd74e788568ac0c75b649897ed491b894d237486258b420d7e77490bf83604051610eca9190611aa9565b60405180910390a25050565b60008060008060018680549050610eed9190611b29565b9050600086600081548110610f0457610f04611c1d565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1690506000878363ffffffff1681548110610f4657610f46611c1d565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1690508163ffffffff168763ffffffff161015610fef5760405162461bcd60e51b8152602060048201526024808201527f42696e6172795365617263684c69622f647261772d69642d6f75742d6f662d7260448201527f616e676500000000000000000000000000000000000000000000000000000000606482015260840161030a565b8063ffffffff168763ffffffff161061100f5782955050505050506106cc565b8163ffffffff168763ffffffff1614156110305783955050505050506106cc565b600061103c8585611b40565b9050600061104b600283611af8565b6110559087611ad0565b905060008a8263ffffffff168154811061107157611071611c1d565b6000918252602090912060088204015460079091166004026101000a900463ffffffff90811691508a168114156110ac575095506111489050565b60018363ffffffff1611611116578963ffffffff168b8763ffffffff16815481106110d9576110d9611c1d565b6000918252602090912060088204015460079091166004026101000a900463ffffffff161161110a5785975061110e565b8697505b505050611148565b8963ffffffff168163ffffffff16101561113257819650611140565b61113d600183611b40565b95505b505050611030565b50929695505050505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6002546000906001600160a01b0390811690831681141561123a5760405162461bcd60e51b815260206004820152602360248201527f4d616e61676561626c652f6578697374696e672d6d616e616765722d6164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015260840161030a565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385811691821790925560405190918316907f9cb45c728de594dab506a1f1a8554e24c8eeaf983618d5ec5dd7bc6f3c49feee90600090a350600192915050565b600354806112ed5760405162461bcd60e51b815260206004820152601f60248201527f5072697a6554696572486973746f72792f6e6f2d7072697a652d746965727300604482015260640161030a565b6000600360008154811061130357611303611c1d565b600091825260209182902060088204015460079091166004026101000a900463ffffffff169150819061133c9060408601908601611901565b63ffffffff1610156113b65760405162461bcd60e51b815260206004820152602560248201527f5072697a6554696572486973746f72792f647261772d69642d6f75742d6f662d60448201527f72616e6765000000000000000000000000000000000000000000000000000000606482015260840161030a565b60006113cb6105a76040860160208701611901565b90506113dd6040850160208601611901565b63ffffffff1660038263ffffffff16815481106113fc576113fc611c1d565b6000918252602090912060088204015460079091166004026101000a900463ffffffff16146114935760405162461bcd60e51b815260206004820152602360248201527f5072697a6554696572486973746f72792f647261772d69642d6d7573742d6d6160448201527f7463680000000000000000000000000000000000000000000000000000000000606482015260840161030a565b604080516102008181019092526114c59160c0870190601090839083908082843760009201919091525061153c915050565b63ffffffff8116600090815260046020526040902084906114e68282611c56565b506114f990506040850160208601611901565b63ffffffff167fec70f602a8e5c0eab140e799c5b7bb34035bd73c6eb882fad555c7c8860817e78560405161152e91906119ea565b60405180910390a250505050565b60006010815b818110156115855783816010811061155c5761155c611c1d565b60200201516115719063ffffffff1684611ab8565b92508061157d81611bce565b915050611542565b50633b9aca008211156115da5760405162461bcd60e51b815260206004820152601e60248201527f5072697a6554696572486973746f72792f74696572732d67742d313030250000604482015260640161030a565b505050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915260c0810161161d6116be565b905290565b6002830191839082156116ae5791602002820160005b8382111561167c57835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302611638565b80156116ac5782816101000a81549063ffffffff021916905560040160208160030104928301926001030261167c565b505b506116ba9291506116dd565b5090565b6040518061020001604052806010906020820280368337509192915050565b5b808211156116ba57600081556001016116de565b600082601f83011261170357600080fd5b60405161020080820182811067ffffffffffffffff8211171561172857611728611c33565b604052818482810187101561173c57600080fd5b600092505b601083101561176a57803561175581611daa565b82526001929092019160209182019101611741565b509195945050505050565b803561084c81611daa565b60006020828403121561179257600080fd5b81356001600160a01b0381168114610afe57600080fd5b600080602083850312156117bc57600080fd5b823567ffffffffffffffff808211156117d457600080fd5b818501915085601f8301126117e857600080fd5b8135818111156117f757600080fd5b8660208260051b850101111561180c57600080fd5b60209290920196919550909350505050565b60006102c0828403121561183157600080fd5b50919050565b60006102c0828403121561184a57600080fd5b60405160e0810181811067ffffffffffffffff8211171561186d5761186d611c33565b604052823561187b81611dbc565b8152602083013561188b81611daa565b6020820152604083013561189e81611daa565b60408201526118af60608401611775565b60608201526118c060808401611775565b608082015260a083013560a08201526118dc8460c085016116f2565b60c08201529392505050565b6000602082840312156118fa57600080fd5b5035919050565b60006020828403121561191357600080fd5b8135610afe81611daa565b60ff815116825260208082015163ffffffff8082168386015280604085015116604086015280606085015116606086015280608085015116608086015260a084015160a086015260c0840151915060c0850160005b6010811015611992578351831682529284019290840190600101611973565b50505050505050565b6020808252825182820181905260009190848201906040850190845b818110156119de576119ca83855161191e565b928401926102c092909201916001016119b7565b50909695505050505050565b6102c0810182356119fa81611dbc565b60ff168252602083810135611a0e81611daa565b63ffffffff90811684830152604085013590611a2982611daa565b9081166040850152606085013590611a4082611daa565b9081166060850152608085013590611a5782611daa565b808216608086015260a086013560a086015260c08501915060c0860160005b6010811015611a9e578135611a8a81611daa565b831684529284019290840190600101611a76565b505050505092915050565b6102c081016106cc828461191e565b60008219821115611acb57611acb611c07565b500190565b600063ffffffff808316818516808303821115611aef57611aef611c07565b01949350505050565b600063ffffffff80841680611b1d57634e487b7160e01b600052601260045260246000fd5b92169190910492915050565b600082821015611b3b57611b3b611c07565b500390565b600063ffffffff83811690831681811015611b5d57611b5d611c07565b039392505050565b81816000805b6010811015611bc6578335611b7f81611daa565b835463ffffffff600385901b81811b801990931693909116901b1617835560209390930192600490910190601c821115611bbe57600091506001830192505b600101611b6b565b505050505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611c0057611c00611c07565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600081356106cc81611daa565b8135611c6181611dbc565b60ff811690508154817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082161783556020840135611c9e81611daa565b64ffffffff008160081b168364ffffffffff198416171784555050506040820135611cc881611daa565b81547fffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffffff16602882901b68ffffffff00000000001617825550611d3b611d0f60608401611c49565b82546cffffffff000000000000000000191660489190911b6cffffffff00000000000000000016178255565b611d8c611d4a60808401611c49565b82547fffffffffffffffffffffffffffffff00000000ffffffffffffffffffffffffff1660689190911b70ffffffff0000000000000000000000000016178255565b60a08201356001820155611da660c0830160028301611b65565b5050565b63ffffffff8116811461032a57600080fd5b60ff8116811461032a57600080fdfea26469706673582212202ac1fdc1b366a364f838a64f3d4785836bde89630619e2c9fc393143565af17964736f6c63430008060033";

type PrizeTierHistoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PrizeTierHistoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PrizeTierHistory__factory extends ContractFactory {
  constructor(...args: PrizeTierHistoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PrizeTierHistory> {
    return super.deploy(owner, overrides || {}) as Promise<PrizeTierHistory>;
  }
  override getDeployTransaction(
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(owner, overrides || {});
  }
  override attach(address: string): PrizeTierHistory {
    return super.attach(address) as PrizeTierHistory;
  }
  override connect(signer: Signer): PrizeTierHistory__factory {
    return super.connect(signer) as PrizeTierHistory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PrizeTierHistoryInterface {
    return new utils.Interface(_abi) as PrizeTierHistoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PrizeTierHistory {
    return new Contract(address, _abi, signerOrProvider) as PrizeTierHistory;
  }
}

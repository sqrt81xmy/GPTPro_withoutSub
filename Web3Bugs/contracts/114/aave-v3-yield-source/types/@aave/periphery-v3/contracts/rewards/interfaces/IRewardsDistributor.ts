/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../common";

export interface IRewardsDistributorInterface extends utils.Interface {
  functions: {
    "getAllUserRewardsBalance(address[],address)": FunctionFragment;
    "getAssetDecimals(address)": FunctionFragment;
    "getDistributionEnd(address,address)": FunctionFragment;
    "getRewardsByAsset(address)": FunctionFragment;
    "getRewardsData(address,address)": FunctionFragment;
    "getRewardsList()": FunctionFragment;
    "getUserAssetData(address,address,address)": FunctionFragment;
    "getUserRewardsBalance(address[],address,address)": FunctionFragment;
    "getUserUnclaimedRewardsFromStorage(address,address)": FunctionFragment;
    "setDistributionEnd(address,address,uint32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAllUserRewardsBalance"
      | "getAssetDecimals"
      | "getDistributionEnd"
      | "getRewardsByAsset"
      | "getRewardsData"
      | "getRewardsList"
      | "getUserAssetData"
      | "getUserRewardsBalance"
      | "getUserUnclaimedRewardsFromStorage"
      | "setDistributionEnd"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAllUserRewardsBalance",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetDecimals",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDistributionEnd",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsByAsset",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsData",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAssetData",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRewardsBalance",
    values: [string[], string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserUnclaimedRewardsFromStorage",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDistributionEnd",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAllUserRewardsBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDistributionEnd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsByAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAssetData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRewardsBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserUnclaimedRewardsFromStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDistributionEnd",
    data: BytesLike
  ): Result;

  events: {
    "AssetConfigUpdated(address,address,uint256,uint256)": EventFragment;
    "AssetIndexUpdated(address,address,uint256)": EventFragment;
    "RewardsAccrued(address,address,uint256)": EventFragment;
    "UserIndexUpdated(address,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetConfigUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetIndexUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsAccrued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserIndexUpdated"): EventFragment;
}

export interface AssetConfigUpdatedEventObject {
  asset: string;
  reward: string;
  emission: BigNumber;
  distributionEnd: BigNumber;
}
export type AssetConfigUpdatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  AssetConfigUpdatedEventObject
>;

export type AssetConfigUpdatedEventFilter =
  TypedEventFilter<AssetConfigUpdatedEvent>;

export interface AssetIndexUpdatedEventObject {
  asset: string;
  reward: string;
  index: BigNumber;
}
export type AssetIndexUpdatedEvent = TypedEvent<
  [string, string, BigNumber],
  AssetIndexUpdatedEventObject
>;

export type AssetIndexUpdatedEventFilter =
  TypedEventFilter<AssetIndexUpdatedEvent>;

export interface RewardsAccruedEventObject {
  user: string;
  reward: string;
  amount: BigNumber;
}
export type RewardsAccruedEvent = TypedEvent<
  [string, string, BigNumber],
  RewardsAccruedEventObject
>;

export type RewardsAccruedEventFilter = TypedEventFilter<RewardsAccruedEvent>;

export interface UserIndexUpdatedEventObject {
  user: string;
  asset: string;
  reward: string;
  index: BigNumber;
}
export type UserIndexUpdatedEvent = TypedEvent<
  [string, string, string, BigNumber],
  UserIndexUpdatedEventObject
>;

export type UserIndexUpdatedEventFilter =
  TypedEventFilter<UserIndexUpdatedEvent>;

export interface IRewardsDistributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRewardsDistributorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAllUserRewardsBalance(
      assets: string[],
      user: string,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getAssetDecimals(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getDistributionEnd(
      asset: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRewardsByAsset(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getRewardsData(
      asset: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    getRewardsList(overrides?: CallOverrides): Promise<[string[]]>;

    getUserAssetData(
      user: string,
      asset: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserRewardsBalance(
      assets: string[],
      user: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserUnclaimedRewardsFromStorage(
      user: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setDistributionEnd(
      asset: string,
      reward: string,
      distributionEnd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getAllUserRewardsBalance(
    assets: string[],
    user: string,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  getAssetDecimals(asset: string, overrides?: CallOverrides): Promise<number>;

  getDistributionEnd(
    asset: string,
    reward: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRewardsByAsset(
    asset: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getRewardsData(
    asset: string,
    reward: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  getRewardsList(overrides?: CallOverrides): Promise<string[]>;

  getUserAssetData(
    user: string,
    asset: string,
    reward: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserRewardsBalance(
    assets: string[],
    user: string,
    reward: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserUnclaimedRewardsFromStorage(
    user: string,
    reward: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setDistributionEnd(
    asset: string,
    reward: string,
    distributionEnd: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getAllUserRewardsBalance(
      assets: string[],
      user: string,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getAssetDecimals(asset: string, overrides?: CallOverrides): Promise<number>;

    getDistributionEnd(
      asset: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardsByAsset(
      asset: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getRewardsData(
      asset: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    getRewardsList(overrides?: CallOverrides): Promise<string[]>;

    getUserAssetData(
      user: string,
      asset: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserRewardsBalance(
      assets: string[],
      user: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserUnclaimedRewardsFromStorage(
      user: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDistributionEnd(
      asset: string,
      reward: string,
      distributionEnd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AssetConfigUpdated(address,address,uint256,uint256)"(
      asset?: string | null,
      reward?: string | null,
      emission?: null,
      distributionEnd?: null
    ): AssetConfigUpdatedEventFilter;
    AssetConfigUpdated(
      asset?: string | null,
      reward?: string | null,
      emission?: null,
      distributionEnd?: null
    ): AssetConfigUpdatedEventFilter;

    "AssetIndexUpdated(address,address,uint256)"(
      asset?: string | null,
      reward?: string | null,
      index?: null
    ): AssetIndexUpdatedEventFilter;
    AssetIndexUpdated(
      asset?: string | null,
      reward?: string | null,
      index?: null
    ): AssetIndexUpdatedEventFilter;

    "RewardsAccrued(address,address,uint256)"(
      user?: string | null,
      reward?: string | null,
      amount?: null
    ): RewardsAccruedEventFilter;
    RewardsAccrued(
      user?: string | null,
      reward?: string | null,
      amount?: null
    ): RewardsAccruedEventFilter;

    "UserIndexUpdated(address,address,address,uint256)"(
      user?: string | null,
      asset?: string | null,
      reward?: string | null,
      index?: null
    ): UserIndexUpdatedEventFilter;
    UserIndexUpdated(
      user?: string | null,
      asset?: string | null,
      reward?: string | null,
      index?: null
    ): UserIndexUpdatedEventFilter;
  };

  estimateGas: {
    getAllUserRewardsBalance(
      assets: string[],
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAssetDecimals(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDistributionEnd(
      asset: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardsByAsset(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardsData(
      asset: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardsList(overrides?: CallOverrides): Promise<BigNumber>;

    getUserAssetData(
      user: string,
      asset: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserRewardsBalance(
      assets: string[],
      user: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserUnclaimedRewardsFromStorage(
      user: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDistributionEnd(
      asset: string,
      reward: string,
      distributionEnd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAllUserRewardsBalance(
      assets: string[],
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAssetDecimals(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDistributionEnd(
      asset: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardsByAsset(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardsData(
      asset: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardsList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserAssetData(
      user: string,
      asset: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserRewardsBalance(
      assets: string[],
      user: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserUnclaimedRewardsFromStorage(
      user: string,
      reward: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDistributionEnd(
      asset: string,
      reward: string,
      distributionEnd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

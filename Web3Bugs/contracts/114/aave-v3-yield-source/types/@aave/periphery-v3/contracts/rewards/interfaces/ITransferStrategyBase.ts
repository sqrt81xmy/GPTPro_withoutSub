/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../common";

export interface ITransferStrategyBaseInterface extends utils.Interface {
  functions: {
    "emergencyWithdrawal(address,address,uint256)": FunctionFragment;
    "getIncentivesController()": FunctionFragment;
    "getRewardsAdmin()": FunctionFragment;
    "performTransfer(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "emergencyWithdrawal"
      | "getIncentivesController"
      | "getRewardsAdmin"
      | "performTransfer"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "emergencyWithdrawal",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIncentivesController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "performTransfer",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "emergencyWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIncentivesController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performTransfer",
    data: BytesLike
  ): Result;

  events: {
    "EmergencyWithdrawal(address,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EmergencyWithdrawal"): EventFragment;
}

export interface EmergencyWithdrawalEventObject {
  caller: string;
  token: string;
  to: string;
  amount: BigNumber;
}
export type EmergencyWithdrawalEvent = TypedEvent<
  [string, string, string, BigNumber],
  EmergencyWithdrawalEventObject
>;

export type EmergencyWithdrawalEventFilter =
  TypedEventFilter<EmergencyWithdrawalEvent>;

export interface ITransferStrategyBase extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITransferStrategyBaseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    emergencyWithdrawal(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getIncentivesController(overrides?: CallOverrides): Promise<[string]>;

    getRewardsAdmin(overrides?: CallOverrides): Promise<[string]>;

    performTransfer(
      to: string,
      reward: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  emergencyWithdrawal(
    token: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getIncentivesController(overrides?: CallOverrides): Promise<string>;

  getRewardsAdmin(overrides?: CallOverrides): Promise<string>;

  performTransfer(
    to: string,
    reward: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    emergencyWithdrawal(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getIncentivesController(overrides?: CallOverrides): Promise<string>;

    getRewardsAdmin(overrides?: CallOverrides): Promise<string>;

    performTransfer(
      to: string,
      reward: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "EmergencyWithdrawal(address,address,address,uint256)"(
      caller?: string | null,
      token?: string | null,
      to?: string | null,
      amount?: null
    ): EmergencyWithdrawalEventFilter;
    EmergencyWithdrawal(
      caller?: string | null,
      token?: string | null,
      to?: string | null,
      amount?: null
    ): EmergencyWithdrawalEventFilter;
  };

  estimateGas: {
    emergencyWithdrawal(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getIncentivesController(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardsAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    performTransfer(
      to: string,
      reward: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    emergencyWithdrawal(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getIncentivesController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardsAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    performTransfer(
      to: string,
      reward: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

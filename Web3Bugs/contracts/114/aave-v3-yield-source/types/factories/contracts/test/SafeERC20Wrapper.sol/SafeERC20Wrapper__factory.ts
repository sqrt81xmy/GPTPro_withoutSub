/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SafeERC20Wrapper,
  SafeERC20WrapperInterface,
} from "../../../../contracts/test/SafeERC20Wrapper.sol/SafeERC20Wrapper";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "allowance_",
        type: "uint256",
      },
    ],
    name: "setAllowance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610b6d380380610b6d83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610ada806100936000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80633ba93f261161005b5780633ba93f26146100db57806370a08231146100ee578063a9059cbb14610113578063dd62ed3e1461012657600080fd5b8063095ea7b31461008d57806310bad4cf146100a257806311e330b2146100b557806323b872dd146100c8575b600080fd5b6100a061009b3660046108fb565b610139565b005b6100a06100b0366004610925565b610154565b6100a06100c3366004610925565b610171565b6100a06100d636600461093e565b61018b565b6100a06100e9366004610925565b6101a8565b6101016100fc36600461097a565b610209565b60405190815260200160405180910390f35b6100a06101213660046108fb565b61027e565b610101610134366004610995565b610295565b600054610150906001600160a01b03168383610313565b5050565b6000805461016e916001600160a01b039091169083610460565b50565b6000805461016e916001600160a01b03909116908361056c565b6000546101a3906001600160a01b0316848484610624565b505050565b600054604051631dd49f9360e11b8152600481018390526001600160a01b0390911690633ba93f2690602401600060405180830381600087803b1580156101ee57600080fd5b505af1158015610202573d6000803e3d6000fd5b5050505050565b600080546040516370a0823160e01b81526001600160a01b038481166004830152909116906370a0823190602401602060405180830381865afa158015610254573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027891906109c8565b92915050565b600054610150906001600160a01b0316838361065c565b60008054604051636eb1769f60e11b81526001600160a01b03858116600483015284811660248301529091169063dd62ed3e90604401602060405180830381865afa1580156102e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030c91906109c8565b9392505050565b80158061038d5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015610367573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038b91906109c8565b155b6103fd5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084015b60405180910390fd5b6040516001600160a01b0383166024820152604481018290526101a390849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261068c565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa1580156104b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d491906109c8565b9050818110156105385760405162461bcd60e51b815260206004820152602960248201527f5361666545524332303a2064656372656173656420616c6c6f77616e63652062604482015268656c6f77207a65726f60b81b60648201526084016103f4565b6040516001600160a01b0384166024820152828203604482018190529061020290869063095ea7b360e01b90606401610429565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa1580156105bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e191906109c8565b6105eb91906109e1565b6040516001600160a01b03851660248201526044810182905290915061061e90859063095ea7b360e01b90606401610429565b50505050565b6040516001600160a01b038085166024830152831660448201526064810182905261061e9085906323b872dd60e01b90608401610429565b6040516001600160a01b0383166024820152604481018290526101a390849063a9059cbb60e01b90606401610429565b60006106e1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661075e9092919063ffffffff16565b8051909150156101a357808060200190518101906106ff9190610a07565b6101a35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103f4565b606061076d8484600085610775565b949350505050565b6060824710156107d65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103f4565b6001600160a01b0385163b61082d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103f4565b600080866001600160a01b031685876040516108499190610a55565b60006040518083038185875af1925050503d8060008114610886576040519150601f19603f3d011682016040523d82523d6000602084013e61088b565b606091505b509150915061089b8282866108a6565b979650505050505050565b606083156108b557508161030c565b8251156108c55782518084602001fd5b8160405162461bcd60e51b81526004016103f49190610a71565b80356001600160a01b03811681146108f657600080fd5b919050565b6000806040838503121561090e57600080fd5b610917836108df565b946020939093013593505050565b60006020828403121561093757600080fd5b5035919050565b60008060006060848603121561095357600080fd5b61095c846108df565b925061096a602085016108df565b9150604084013590509250925092565b60006020828403121561098c57600080fd5b61030c826108df565b600080604083850312156109a857600080fd5b6109b1836108df565b91506109bf602084016108df565b90509250929050565b6000602082840312156109da57600080fd5b5051919050565b60008219821115610a0257634e487b7160e01b600052601160045260246000fd5b500190565b600060208284031215610a1957600080fd5b8151801515811461030c57600080fd5b60005b83811015610a44578181015183820152602001610a2c565b8381111561061e5750506000910152565b60008251610a67818460208701610a29565b9190910192915050565b6020815260008251806020840152610a90816040850160208701610a29565b601f01601f1916919091016040019291505056fea2646970667358221220de274cd67d8ffb525a597b417fdc3b1aacd67163ded60c34316c37e752e340a064736f6c634300080a0033";

type SafeERC20WrapperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SafeERC20WrapperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SafeERC20Wrapper__factory extends ContractFactory {
  constructor(...args: SafeERC20WrapperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SafeERC20Wrapper> {
    return super.deploy(token, overrides || {}) as Promise<SafeERC20Wrapper>;
  }
  override getDeployTransaction(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(token, overrides || {});
  }
  override attach(address: string): SafeERC20Wrapper {
    return super.attach(address) as SafeERC20Wrapper;
  }
  override connect(signer: Signer): SafeERC20Wrapper__factory {
    return super.connect(signer) as SafeERC20Wrapper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SafeERC20WrapperInterface {
    return new utils.Interface(_abi) as SafeERC20WrapperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SafeERC20Wrapper {
    return new Contract(address, _abi, signerOrProvider) as SafeERC20Wrapper;
  }
}

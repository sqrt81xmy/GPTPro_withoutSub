{
  "version": "3.2",
  "log": [
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:58",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
            }
          ],
          "types": {
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:19",
        "version": {
          "withMetadata": "0964d80cbf9617720468c3fb036f169e68c625c8cee35523acf123f0bb8427fc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "91d9220eead569f94692a51c268a1e5713df65545133e08bf626d4baacdaa36c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DelegatedStaking": {
        "src": "contracts/DelegatedStaking.sol:8",
        "version": {
          "withMetadata": "a0a1ad62571f75cd037f559532906302d675c17b0c7596e45d13e3646d67cb61",
          "withoutMetadata": "6a0f967032e1c666bb5da962bb87c7fbb7cd4e69cb57a0806a5fe70def851d28",
          "linkedWithoutMetadata": "6a0f967032e1c666bb5da962bb87c7fbb7cd4e69cb57a0806a5fe70def851d28"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(uint128)",
          "depositRewardTokens(uint128)",
          "takeOutRewardTokens(uint128)",
          "stake(uint128,uint128)",
          "unstake(uint128,uint128)",
          "recoverUnstaking(uint128,uint128,uint128)",
          "redeemAllRewards(uint128,address)",
          "redeemRewards(uint128,address,uint128)",
          "addValidator(address,address,uint128)",
          "disableValidator(uint128)",
          "setAllocatedTokensPerEpoch(uint128)",
          "setMaxCapMultiplier(uint128)",
          "setValidatorCommissionRate(uint128,uint128)",
          "setValidatorMinStakedRequired(uint128)",
          "redelegateUnstaked(uint128,uint128,uint128,uint128)",
          "transferUnstakedOut(uint128,uint128,uint128)",
          "getValidatorsDetails()",
          "getDelegatorDetails(address)",
          "getMetadata()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "DelegatedStaking",
              "label": "validatorCoolDown",
              "type": "t_uint128",
              "src": "contracts/DelegatedStaking.sol:11"
            },
            {
              "contract": "DelegatedStaking",
              "label": "delegatorCoolDown",
              "type": "t_uint128",
              "src": "contracts/DelegatedStaking.sol:12"
            },
            {
              "contract": "DelegatedStaking",
              "label": "maxCapMultiplier",
              "type": "t_uint128",
              "src": "contracts/DelegatedStaking.sol:13"
            },
            {
              "contract": "DelegatedStaking",
              "label": "validatorMinStakedRequired",
              "type": "t_uint128",
              "src": "contracts/DelegatedStaking.sol:14"
            },
            {
              "contract": "DelegatedStaking",
              "label": "allocatedTokensPerEpoch",
              "type": "t_uint128",
              "src": "contracts/DelegatedStaking.sol:15"
            },
            {
              "contract": "DelegatedStaking",
              "label": "rewardsLocked",
              "type": "t_uint128",
              "src": "contracts/DelegatedStaking.sol:16"
            },
            {
              "contract": "DelegatedStaking",
              "label": "endEpoch",
              "type": "t_uint128",
              "src": "contracts/DelegatedStaking.sol:17"
            },
            {
              "contract": "DelegatedStaking",
              "label": "totalGlobalShares",
              "type": "t_uint128",
              "src": "contracts/DelegatedStaking.sol:18"
            },
            {
              "contract": "DelegatedStaking",
              "label": "lastUpdateEpoch",
              "type": "t_uint128",
              "src": "contracts/DelegatedStaking.sol:19"
            },
            {
              "contract": "DelegatedStaking",
              "label": "globalExchangeRate",
              "type": "t_uint128",
              "src": "contracts/DelegatedStaking.sol:20"
            },
            {
              "contract": "DelegatedStaking",
              "label": "validatorsN",
              "type": "t_uint128",
              "src": "contracts/DelegatedStaking.sol:21"
            },
            {
              "contract": "DelegatedStaking",
              "label": "validators",
              "type": "t_mapping(t_uint128,t_struct(Validator)1264_storage)",
              "src": "contracts/DelegatedStaking.sol:22"
            }
          ],
          "types": {
            "t_uint128": {
              "label": "uint128"
            },
            "t_mapping(t_uint128,t_struct(Validator)1264_storage)": {
              "label": "mapping(uint128 => struct DelegatedStaking.Validator)"
            },
            "t_struct(Validator)1264_storage": {
              "label": "struct DelegatedStaking.Validator",
              "members": [
                {
                  "label": "_address",
                  "type": "t_address"
                },
                {
                  "label": "operator",
                  "type": "t_address"
                },
                {
                  "label": "commissionRate",
                  "type": "t_uint128"
                },
                {
                  "label": "disabledEpoch",
                  "type": "t_uint128"
                },
                {
                  "label": "globalShares",
                  "type": "t_uint128"
                },
                {
                  "label": "lastUpdateGlobalRate",
                  "type": "t_uint128"
                },
                {
                  "label": "totalShares",
                  "type": "t_uint128"
                },
                {
                  "label": "delegated",
                  "type": "t_uint128"
                },
                {
                  "label": "exchangeRate",
                  "type": "t_uint128"
                },
                {
                  "label": "commissionAvailableToRedeem",
                  "type": "t_uint128"
                },
                {
                  "label": "stakings",
                  "type": "t_mapping(t_address,t_struct(Staking)1227_storage)"
                },
                {
                  "label": "unstakings",
                  "type": "t_mapping(t_address,t_array(t_struct(Unstaking)1232_storage)dyn_storage)"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_struct(Staking)1227_storage)": {
              "label": "mapping(address => struct DelegatedStaking.Staking)"
            },
            "t_struct(Staking)1227_storage": {
              "label": "struct DelegatedStaking.Staking",
              "members": [
                {
                  "label": "staked",
                  "type": "t_uint128"
                },
                {
                  "label": "shares",
                  "type": "t_uint128"
                }
              ]
            },
            "t_mapping(t_address,t_array(t_struct(Unstaking)1232_storage)dyn_storage)": {
              "label": "mapping(address => struct DelegatedStaking.Unstaking[])"
            },
            "t_array(t_struct(Unstaking)1232_storage)dyn_storage": {
              "label": "struct DelegatedStaking.Unstaking[]"
            },
            "t_struct(Unstaking)1232_storage": {
              "label": "struct DelegatedStaking.Unstaking",
              "members": [
                {
                  "label": "coolDownEnd",
                  "type": "t_uint128"
                },
                {
                  "label": "amount",
                  "type": "t_uint128"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      }
    }
  ]
}
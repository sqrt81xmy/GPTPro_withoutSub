/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface LadleStorageInterface extends ethers.utils.Interface {
  functions: {
    "borrowingFee()": FunctionFragment;
    "cauldron()": FunctionFragment;
    "joins(bytes6)": FunctionFragment;
    "modules(address)": FunctionFragment;
    "pools(bytes6)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "borrowingFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cauldron", values?: undefined): string;
  encodeFunctionData(functionFragment: "joins", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "modules", values: [string]): string;
  encodeFunctionData(functionFragment: "pools", values: [BytesLike]): string;

  decodeFunctionResult(
    functionFragment: "borrowingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cauldron", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "modules", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;

  events: {
    "FeeSet(uint256)": EventFragment;
    "JoinAdded(bytes6,address)": EventFragment;
    "ModuleSet(address,bool)": EventFragment;
    "PoolAdded(bytes6,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JoinAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModuleSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolAdded"): EventFragment;
}

export class LadleStorage extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: LadleStorageInterface;

  functions: {
    borrowingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "borrowingFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    cauldron(overrides?: CallOverrides): Promise<[string]>;

    "cauldron()"(overrides?: CallOverrides): Promise<[string]>;

    joins(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "joins(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    modules(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "modules(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    pools(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "pools(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  borrowingFee(overrides?: CallOverrides): Promise<BigNumber>;

  "borrowingFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  cauldron(overrides?: CallOverrides): Promise<string>;

  "cauldron()"(overrides?: CallOverrides): Promise<string>;

  joins(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  "joins(bytes6)"(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  modules(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "modules(address)"(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  pools(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  "pools(bytes6)"(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    borrowingFee(overrides?: CallOverrides): Promise<BigNumber>;

    "borrowingFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    cauldron(overrides?: CallOverrides): Promise<string>;

    "cauldron()"(overrides?: CallOverrides): Promise<string>;

    joins(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    "joins(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    modules(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "modules(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    pools(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    "pools(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    FeeSet(fee: null): TypedEventFilter<[BigNumber], { fee: BigNumber }>;

    JoinAdded(
      assetId: BytesLike | null,
      join: string | null
    ): TypedEventFilter<[string, string], { assetId: string; join: string }>;

    ModuleSet(
      module: string | null,
      set: boolean | null
    ): TypedEventFilter<[string, boolean], { module: string; set: boolean }>;

    PoolAdded(
      seriesId: BytesLike | null,
      pool: string | null
    ): TypedEventFilter<[string, string], { seriesId: string; pool: string }>;
  };

  estimateGas: {
    borrowingFee(overrides?: CallOverrides): Promise<BigNumber>;

    "borrowingFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    cauldron(overrides?: CallOverrides): Promise<BigNumber>;

    "cauldron()"(overrides?: CallOverrides): Promise<BigNumber>;

    joins(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "joins(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    modules(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "modules(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pools(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "pools(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    borrowingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "borrowingFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cauldron(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cauldron()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    joins(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "joins(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    modules(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "modules(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pools(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pools(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

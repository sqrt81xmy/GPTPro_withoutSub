/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TimeLockInterface extends ethers.utils.Interface {
  functions: {
    "GRACE_PERIOD()": FunctionFragment;
    "LOCK()": FunctionFragment;
    "MAXIMUM_DELAY()": FunctionFragment;
    "MINIMUM_DELAY()": FunctionFragment;
    "ROOT()": FunctionFragment;
    "cancel(address[],bytes[])": FunctionFragment;
    "delay()": FunctionFragment;
    "execute(address[],bytes[])": FunctionFragment;
    "getRoleAdmin(bytes4)": FunctionFragment;
    "grantRole(bytes4,address)": FunctionFragment;
    "grantRoles(bytes4[],address)": FunctionFragment;
    "hasRole(bytes4,address)": FunctionFragment;
    "lockRole(bytes4)": FunctionFragment;
    "renounceRole(bytes4,address)": FunctionFragment;
    "revokeRole(bytes4,address)": FunctionFragment;
    "revokeRoles(bytes4[],address)": FunctionFragment;
    "schedule(address[],bytes[],uint256)": FunctionFragment;
    "setDelay(uint256)": FunctionFragment;
    "setRoleAdmin(bytes4,bytes4)": FunctionFragment;
    "transactions(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "GRACE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "LOCK", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAXIMUM_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINIMUM_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ROOT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [string[], BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "delay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [string[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRoles",
    values: [BytesLike[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "lockRole", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRoles",
    values: [BytesLike[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "schedule",
    values: [string[], BytesLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoleAdmin",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transactions",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "GRACE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "LOCK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAXIMUM_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINIMUM_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ROOT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRoles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "schedule", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDelay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactions",
    data: BytesLike
  ): Result;

  events: {
    "Cancelled(bytes32,address[],bytes[])": EventFragment;
    "DelaySet(uint256)": EventFragment;
    "Executed(bytes32,address[],bytes[])": EventFragment;
    "RoleAdminChanged(bytes4,bytes4)": EventFragment;
    "RoleGranted(bytes4,address,address)": EventFragment;
    "RoleRevoked(bytes4,address,address)": EventFragment;
    "Scheduled(bytes32,address[],bytes[],uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Cancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelaySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Executed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Scheduled"): EventFragment;
}

export class TimeLock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: TimeLockInterface;

  functions: {
    GRACE_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    "GRACE_PERIOD()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    LOCK(overrides?: CallOverrides): Promise<[string]>;

    "LOCK()"(overrides?: CallOverrides): Promise<[string]>;

    MAXIMUM_DELAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MAXIMUM_DELAY()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    MINIMUM_DELAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MINIMUM_DELAY()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    ROOT(overrides?: CallOverrides): Promise<[string]>;

    "ROOT()"(overrides?: CallOverrides): Promise<[string]>;

    cancel(
      targets: string[],
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancel(address[],bytes[])"(
      targets: string[],
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    delay(overrides?: CallOverrides): Promise<[BigNumber]>;

    "delay()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    execute(
      targets: string[],
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "execute(address[],bytes[])"(
      targets: string[],
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "getRoleAdmin(bytes4)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    grantRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRoles(bytes4[],address)"(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lockRole(
      role: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "lockRole(bytes4)"(
      role: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRoles(bytes4[],address)"(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    schedule(
      targets: string[],
      data: BytesLike[],
      eta: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "schedule(address[],bytes[],uint256)"(
      targets: string[],
      data: BytesLike[],
      eta: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setDelay(
      delay_: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDelay(uint256)"(
      delay_: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRoleAdmin(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRoleAdmin(bytes4,bytes4)"(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transactions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "transactions(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  "GRACE_PERIOD()"(overrides?: CallOverrides): Promise<BigNumber>;

  LOCK(overrides?: CallOverrides): Promise<string>;

  "LOCK()"(overrides?: CallOverrides): Promise<string>;

  MAXIMUM_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

  "MAXIMUM_DELAY()"(overrides?: CallOverrides): Promise<BigNumber>;

  MINIMUM_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

  "MINIMUM_DELAY()"(overrides?: CallOverrides): Promise<BigNumber>;

  ROOT(overrides?: CallOverrides): Promise<string>;

  "ROOT()"(overrides?: CallOverrides): Promise<string>;

  cancel(
    targets: string[],
    data: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancel(address[],bytes[])"(
    targets: string[],
    data: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  delay(overrides?: CallOverrides): Promise<BigNumber>;

  "delay()"(overrides?: CallOverrides): Promise<BigNumber>;

  execute(
    targets: string[],
    data: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "execute(address[],bytes[])"(
    targets: string[],
    data: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes4)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRole(bytes4,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  grantRoles(
    roles: BytesLike[],
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRoles(bytes4[],address)"(
    roles: BytesLike[],
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes4,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lockRole(
    role: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "lockRole(bytes4)"(
    role: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceRole(bytes4,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRole(bytes4,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeRoles(
    roles: BytesLike[],
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRoles(bytes4[],address)"(
    roles: BytesLike[],
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  schedule(
    targets: string[],
    data: BytesLike[],
    eta: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "schedule(address[],bytes[],uint256)"(
    targets: string[],
    data: BytesLike[],
    eta: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setDelay(
    delay_: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDelay(uint256)"(
    delay_: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRoleAdmin(
    role: BytesLike,
    adminRole: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRoleAdmin(bytes4,bytes4)"(
    role: BytesLike,
    adminRole: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transactions(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  "transactions(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    "GRACE_PERIOD()"(overrides?: CallOverrides): Promise<BigNumber>;

    LOCK(overrides?: CallOverrides): Promise<string>;

    "LOCK()"(overrides?: CallOverrides): Promise<string>;

    MAXIMUM_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    "MAXIMUM_DELAY()"(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    "MINIMUM_DELAY()"(overrides?: CallOverrides): Promise<BigNumber>;

    ROOT(overrides?: CallOverrides): Promise<string>;

    "ROOT()"(overrides?: CallOverrides): Promise<string>;

    cancel(
      targets: string[],
      data: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "cancel(address[],bytes[])"(
      targets: string[],
      data: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    delay(overrides?: CallOverrides): Promise<BigNumber>;

    "delay()"(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      targets: string[],
      data: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    "execute(address[],bytes[])"(
      targets: string[],
      data: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes4)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    grantRoles(
      roles: BytesLike[],
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRoles(bytes4[],address)"(
      roles: BytesLike[],
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockRole(role: BytesLike, overrides?: CallOverrides): Promise<void>;

    "lockRole(bytes4)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRoles(
      roles: BytesLike[],
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRoles(bytes4[],address)"(
      roles: BytesLike[],
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    schedule(
      targets: string[],
      data: BytesLike[],
      eta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "schedule(address[],bytes[],uint256)"(
      targets: string[],
      data: BytesLike[],
      eta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    setDelay(delay_: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setDelay(uint256)"(
      delay_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoleAdmin(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRoleAdmin(bytes4,bytes4)"(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transactions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "transactions(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    Cancelled(
      txHash: BytesLike | null,
      targets: string[] | null,
      data: null
    ): TypedEventFilter<
      [string, string[], string[]],
      { txHash: string; targets: string[]; data: string[] }
    >;

    DelaySet(
      delay: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { delay: BigNumber }>;

    Executed(
      txHash: BytesLike | null,
      targets: string[] | null,
      data: null
    ): TypedEventFilter<
      [string, string[], string[]],
      { txHash: string; targets: string[]; data: string[] }
    >;

    RoleAdminChanged(
      role: BytesLike | null,
      newAdminRole: BytesLike | null
    ): TypedEventFilter<
      [string, string],
      { role: string; newAdminRole: string }
    >;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    Scheduled(
      txHash: BytesLike | null,
      targets: string[] | null,
      data: null,
      eta: null
    ): TypedEventFilter<
      [string, string[], string[], BigNumber],
      { txHash: string; targets: string[]; data: string[]; eta: BigNumber }
    >;
  };

  estimateGas: {
    GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    "GRACE_PERIOD()"(overrides?: CallOverrides): Promise<BigNumber>;

    LOCK(overrides?: CallOverrides): Promise<BigNumber>;

    "LOCK()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAXIMUM_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    "MAXIMUM_DELAY()"(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    "MINIMUM_DELAY()"(overrides?: CallOverrides): Promise<BigNumber>;

    ROOT(overrides?: CallOverrides): Promise<BigNumber>;

    "ROOT()"(overrides?: CallOverrides): Promise<BigNumber>;

    cancel(
      targets: string[],
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancel(address[],bytes[])"(
      targets: string[],
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    delay(overrides?: CallOverrides): Promise<BigNumber>;

    "delay()"(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      targets: string[],
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "execute(address[],bytes[])"(
      targets: string[],
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes4)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    grantRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRoles(bytes4[],address)"(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockRole(role: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    "lockRole(bytes4)"(
      role: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "renounceRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRoles(bytes4[],address)"(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    schedule(
      targets: string[],
      data: BytesLike[],
      eta: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "schedule(address[],bytes[],uint256)"(
      targets: string[],
      data: BytesLike[],
      eta: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setDelay(delay_: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setDelay(uint256)"(
      delay_: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRoleAdmin(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRoleAdmin(bytes4,bytes4)"(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transactions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "transactions(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    GRACE_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "GRACE_PERIOD()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LOCK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "LOCK()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAXIMUM_DELAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MAXIMUM_DELAY()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINIMUM_DELAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MINIMUM_DELAY()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROOT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ROOT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancel(
      targets: string[],
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancel(address[],bytes[])"(
      targets: string[],
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    delay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "delay()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execute(
      targets: string[],
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "execute(address[],bytes[])"(
      targets: string[],
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes4)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    grantRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRoles(bytes4[],address)"(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockRole(
      role: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "lockRole(bytes4)"(
      role: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes4,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRoles(bytes4[],address)"(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    schedule(
      targets: string[],
      data: BytesLike[],
      eta: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "schedule(address[],bytes[],uint256)"(
      targets: string[],
      data: BytesLike[],
      eta: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setDelay(
      delay_: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDelay(uint256)"(
      delay_: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRoleAdmin(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRoleAdmin(bytes4,bytes4)"(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transactions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "transactions(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

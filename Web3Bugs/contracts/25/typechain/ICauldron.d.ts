/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ICauldronInterface extends ethers.utils.Interface {
  functions: {
    "assets(bytes6)": FunctionFragment;
    "balances(bytes12)": FunctionFragment;
    "debtToBase(bytes6,uint128)": FunctionFragment;
    "series(bytes6)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "assets", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "balances", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "debtToBase",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "series", values: [BytesLike]): string;

  decodeFunctionResult(functionFragment: "assets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "debtToBase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "series", data: BytesLike): Result;

  events: {};
}

export class ICauldron extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: ICauldronInterface;

  functions: {
    assets(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "assets(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    balances(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber] & { art: BigNumber; ink: BigNumber }]>;

    "balances(bytes12)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber] & { art: BigNumber; ink: BigNumber }]>;

    debtToBase(
      seriesId: BytesLike,
      art: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "debtToBase(bytes6,uint128)"(
      seriesId: BytesLike,
      art: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    series(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, number] & {
          fyToken: string;
          baseId: string;
          maturity: number;
        }
      ]
    >;

    "series(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, number] & {
          fyToken: string;
          baseId: string;
          maturity: number;
        }
      ]
    >;
  };

  assets(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  "assets(bytes6)"(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  balances(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { art: BigNumber; ink: BigNumber }>;

  "balances(bytes12)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { art: BigNumber; ink: BigNumber }>;

  debtToBase(
    seriesId: BytesLike,
    art: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "debtToBase(bytes6,uint128)"(
    seriesId: BytesLike,
    art: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  series(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, number] & {
      fyToken: string;
      baseId: string;
      maturity: number;
    }
  >;

  "series(bytes6)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, number] & {
      fyToken: string;
      baseId: string;
      maturity: number;
    }
  >;

  callStatic: {
    assets(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    "assets(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    balances(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { art: BigNumber; ink: BigNumber }>;

    "balances(bytes12)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { art: BigNumber; ink: BigNumber }>;

    debtToBase(
      seriesId: BytesLike,
      art: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "debtToBase(bytes6,uint128)"(
      seriesId: BytesLike,
      art: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    series(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number] & {
        fyToken: string;
        baseId: string;
        maturity: number;
      }
    >;

    "series(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number] & {
        fyToken: string;
        baseId: string;
        maturity: number;
      }
    >;
  };

  filters: {};

  estimateGas: {
    assets(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "assets(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balances(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "balances(bytes12)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtToBase(
      seriesId: BytesLike,
      art: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "debtToBase(bytes6,uint128)"(
      seriesId: BytesLike,
      art: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    series(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "series(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    assets(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "assets(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balances(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balances(bytes12)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debtToBase(
      seriesId: BytesLike,
      art: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "debtToBase(bytes6,uint128)"(
      seriesId: BytesLike,
      art: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    series(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "series(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

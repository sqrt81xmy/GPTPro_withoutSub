/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ICauldronGovInterface extends ethers.utils.Interface {
  functions: {
    "addAsset(bytes6,address)": FunctionFragment;
    "addIlks(bytes6,bytes6[])": FunctionFragment;
    "addSeries(bytes6,bytes6,address)": FunctionFragment;
    "assets(bytes6)": FunctionFragment;
    "rateOracles(bytes6)": FunctionFragment;
    "series(bytes6)": FunctionFragment;
    "setDebtLimits(bytes6,bytes6,uint96,uint24,uint8)": FunctionFragment;
    "setRateOracle(bytes6,address)": FunctionFragment;
    "setSpotOracle(bytes6,bytes6,address,uint32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addAsset",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addIlks",
    values: [BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addSeries",
    values: [BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "assets", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "rateOracles",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "series", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setDebtLimits",
    values: [BytesLike, BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRateOracle",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpotOracle",
    values: [BytesLike, BytesLike, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addAsset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addIlks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addSeries", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rateOracles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "series", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDebtLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRateOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpotOracle",
    data: BytesLike
  ): Result;

  events: {};
}

export class ICauldronGov extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: ICauldronGovInterface;

  functions: {
    addAsset(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addAsset(bytes6,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addIlks(
      arg0: BytesLike,
      arg1: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addIlks(bytes6,bytes6[])"(
      arg0: BytesLike,
      arg1: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addSeries(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addSeries(bytes6,bytes6,address)"(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    assets(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "assets(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rateOracles(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "rateOracles(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    series(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, number] & {
          fyToken: string;
          baseId: string;
          maturity: number;
        }
      ]
    >;

    "series(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, number] & {
          fyToken: string;
          baseId: string;
          maturity: number;
        }
      ]
    >;

    setDebtLimits(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDebtLimits(bytes6,bytes6,uint96,uint24,uint8)"(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRateOracle(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRateOracle(bytes6,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setSpotOracle(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      arg3: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setSpotOracle(bytes6,bytes6,address,uint32)"(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      arg3: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addAsset(
    arg0: BytesLike,
    arg1: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addAsset(bytes6,address)"(
    arg0: BytesLike,
    arg1: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addIlks(
    arg0: BytesLike,
    arg1: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addIlks(bytes6,bytes6[])"(
    arg0: BytesLike,
    arg1: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addSeries(
    arg0: BytesLike,
    arg1: BytesLike,
    arg2: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addSeries(bytes6,bytes6,address)"(
    arg0: BytesLike,
    arg1: BytesLike,
    arg2: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  assets(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  "assets(bytes6)"(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  rateOracles(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  "rateOracles(bytes6)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  series(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, number] & {
      fyToken: string;
      baseId: string;
      maturity: number;
    }
  >;

  "series(bytes6)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, number] & {
      fyToken: string;
      baseId: string;
      maturity: number;
    }
  >;

  setDebtLimits(
    arg0: BytesLike,
    arg1: BytesLike,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDebtLimits(bytes6,bytes6,uint96,uint24,uint8)"(
    arg0: BytesLike,
    arg1: BytesLike,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRateOracle(
    arg0: BytesLike,
    arg1: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRateOracle(bytes6,address)"(
    arg0: BytesLike,
    arg1: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setSpotOracle(
    arg0: BytesLike,
    arg1: BytesLike,
    arg2: string,
    arg3: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setSpotOracle(bytes6,bytes6,address,uint32)"(
    arg0: BytesLike,
    arg1: BytesLike,
    arg2: string,
    arg3: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addAsset(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addAsset(bytes6,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addIlks(
      arg0: BytesLike,
      arg1: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addIlks(bytes6,bytes6[])"(
      arg0: BytesLike,
      arg1: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    addSeries(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addSeries(bytes6,bytes6,address)"(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<void>;

    assets(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    "assets(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    rateOracles(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    "rateOracles(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    series(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number] & {
        fyToken: string;
        baseId: string;
        maturity: number;
      }
    >;

    "series(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number] & {
        fyToken: string;
        baseId: string;
        maturity: number;
      }
    >;

    setDebtLimits(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDebtLimits(bytes6,bytes6,uint96,uint24,uint8)"(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRateOracle(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRateOracle(bytes6,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSpotOracle(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setSpotOracle(bytes6,bytes6,address,uint32)"(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addAsset(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addAsset(bytes6,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addIlks(
      arg0: BytesLike,
      arg1: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addIlks(bytes6,bytes6[])"(
      arg0: BytesLike,
      arg1: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    addSeries(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addSeries(bytes6,bytes6,address)"(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    assets(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "assets(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rateOracles(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "rateOracles(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    series(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "series(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDebtLimits(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDebtLimits(bytes6,bytes6,uint96,uint24,uint8)"(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRateOracle(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRateOracle(bytes6,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setSpotOracle(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      arg3: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setSpotOracle(bytes6,bytes6,address,uint32)"(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      arg3: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAsset(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addAsset(bytes6,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addIlks(
      arg0: BytesLike,
      arg1: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addIlks(bytes6,bytes6[])"(
      arg0: BytesLike,
      arg1: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addSeries(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addSeries(bytes6,bytes6,address)"(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    assets(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "assets(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rateOracles(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rateOracles(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    series(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "series(bytes6)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDebtLimits(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDebtLimits(bytes6,bytes6,uint96,uint24,uint8)"(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRateOracle(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRateOracle(bytes6,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setSpotOracle(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      arg3: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setSpotOracle(bytes6,bytes6,address,uint32)"(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      arg3: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface EtherRockInterface extends ethers.utils.Interface {
  functions: {
    "buyRock(uint256)": FunctionFragment;
    "dontSellRock(uint256)": FunctionFragment;
    "getRockInfo(uint256)": FunctionFragment;
    "giftRock(uint256,address)": FunctionFragment;
    "latestNewRockForSale()": FunctionFragment;
    "rockOwners(address,uint256)": FunctionFragment;
    "rockOwningHistory(address)": FunctionFragment;
    "rocks(uint256)": FunctionFragment;
    "sellRock(uint256,uint256)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "buyRock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dontSellRock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRockInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "giftRock",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "latestNewRockForSale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rockOwners",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rockOwningHistory",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "rocks", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "sellRock",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "buyRock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dontSellRock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRockInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "giftRock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestNewRockForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rockOwners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rockOwningHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rocks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellRock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export class EtherRock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: EtherRockInterface;

  functions: {
    buyRock(
      rockNumber: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dontSellRock(
      rockNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRockInfo(
      rockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, boolean, BigNumber, BigNumber]>;

    giftRock(
      rockNumber: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    latestNewRockForSale(overrides?: CallOverrides): Promise<[BigNumber]>;

    rockOwners(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rockOwningHistory(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    rocks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber, BigNumber] & {
        owner: string;
        currentlyForSale: boolean;
        price: BigNumber;
        timesSold: BigNumber;
      }
    >;

    sellRock(
      rockNumber: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  buyRock(
    rockNumber: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dontSellRock(
    rockNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRockInfo(
    rockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, boolean, BigNumber, BigNumber]>;

  giftRock(
    rockNumber: BigNumberish,
    receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  latestNewRockForSale(overrides?: CallOverrides): Promise<BigNumber>;

  rockOwners(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rockOwningHistory(
    _address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  rocks(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean, BigNumber, BigNumber] & {
      owner: string;
      currentlyForSale: boolean;
      price: BigNumber;
      timesSold: BigNumber;
    }
  >;

  sellRock(
    rockNumber: BigNumberish,
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyRock(rockNumber: BigNumberish, overrides?: CallOverrides): Promise<void>;

    dontSellRock(
      rockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getRockInfo(
      rockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, boolean, BigNumber, BigNumber]>;

    giftRock(
      rockNumber: BigNumberish,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    latestNewRockForSale(overrides?: CallOverrides): Promise<BigNumber>;

    rockOwners(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rockOwningHistory(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    rocks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber, BigNumber] & {
        owner: string;
        currentlyForSale: boolean;
        price: BigNumber;
        timesSold: BigNumber;
      }
    >;

    sellRock(
      rockNumber: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    buyRock(
      rockNumber: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dontSellRock(
      rockNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRockInfo(
      rockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    giftRock(
      rockNumber: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    latestNewRockForSale(overrides?: CallOverrides): Promise<BigNumber>;

    rockOwners(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rockOwningHistory(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rocks(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    sellRock(
      rockNumber: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyRock(
      rockNumber: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dontSellRock(
      rockNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRockInfo(
      rockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    giftRock(
      rockNumber: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    latestNewRockForSale(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rockOwners(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rockOwningHistory(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rocks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sellRock(
      rockNumber: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

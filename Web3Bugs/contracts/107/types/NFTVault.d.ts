/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface NFTVaultInterface extends ethers.utils.Interface {
  functions: {
    "CUSTOM_NFT_HASH()": FunctionFragment;
    "DAO_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "LIQUIDATOR_ROLE()": FunctionFragment;
    "accrue()": FunctionFragment;
    "borrow(uint256,uint256,bool)": FunctionFragment;
    "claimExpiredInsuranceNFT(uint256)": FunctionFragment;
    "closePosition(uint256)": FunctionFragment;
    "collect()": FunctionFragment;
    "daoFloorOverride()": FunctionFragment;
    "disableFloorOverride()": FunctionFragment;
    "ethAggregator()": FunctionFragment;
    "fallbackOracle()": FunctionFragment;
    "finalizePendingNFTValueETH(uint256)": FunctionFragment;
    "floorOracle()": FunctionFragment;
    "getNFTInfo(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address,address,address,address,address,tuple[],address,tuple)": FunctionFragment;
    "jpegAggregator()": FunctionFragment;
    "jpegLocker()": FunctionFragment;
    "liquidate(uint256)": FunctionFragment;
    "nftContract()": FunctionFragment;
    "nftTypeValueETH(bytes32)": FunctionFragment;
    "nftTypes(uint256)": FunctionFragment;
    "nftValueETH(uint256)": FunctionFragment;
    "openPositionsIndexes()": FunctionFragment;
    "overrideFloor(uint256)": FunctionFragment;
    "pendingNFTValueETH(uint256)": FunctionFragment;
    "positionOwner(uint256)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "repay(uint256,uint256)": FunctionFragment;
    "repurchase(uint256)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setBorrowAmountCap(uint256)": FunctionFragment;
    "setCreditLimitRate(tuple)": FunctionFragment;
    "setDebtInterestApr(tuple)": FunctionFragment;
    "setInsuranceLiquidationPenaltyRate(tuple)": FunctionFragment;
    "setInsurancePurchaseRate(tuple)": FunctionFragment;
    "setJPEGLockTime(uint256)": FunctionFragment;
    "setLiquidationLimitRate(tuple)": FunctionFragment;
    "setNFTType(uint256,bytes32)": FunctionFragment;
    "setNFTTypeValueETH(bytes32,uint256)": FunctionFragment;
    "setOrganizationFeeRate(tuple)": FunctionFragment;
    "setPendingNFTValueETH(uint256,uint256)": FunctionFragment;
    "setValueIncreaseLockRate(tuple)": FunctionFragment;
    "settings()": FunctionFragment;
    "showPosition(uint256)": FunctionFragment;
    "stablecoin()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "toggleFallbackOracle(bool)": FunctionFragment;
    "totalDebtAccruedAt()": FunctionFragment;
    "totalDebtAmount()": FunctionFragment;
    "totalFeeCollected()": FunctionFragment;
    "totalPositions()": FunctionFragment;
    "useFallbackOracle()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CUSTOM_NFT_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "DAO_ROLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIQUIDATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "accrue", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "claimExpiredInsuranceNFT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closePosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "collect", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "daoFloorOverride",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disableFloorOverride",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ethAggregator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fallbackOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalizePendingNFTValueETH",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "floorOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      string,
      string,
      string,
      { hash: BytesLike; valueETH: BigNumberish; nfts: BigNumberish[] }[],
      string,
      {
        debtInterestApr: { numerator: BigNumberish; denominator: BigNumberish };
        creditLimitRate: { numerator: BigNumberish; denominator: BigNumberish };
        liquidationLimitRate: {
          numerator: BigNumberish;
          denominator: BigNumberish;
        };
        valueIncreaseLockRate: {
          numerator: BigNumberish;
          denominator: BigNumberish;
        };
        organizationFeeRate: {
          numerator: BigNumberish;
          denominator: BigNumberish;
        };
        insurancePurchaseRate: {
          numerator: BigNumberish;
          denominator: BigNumberish;
        };
        insuranceLiquidationPenaltyRate: {
          numerator: BigNumberish;
          denominator: BigNumberish;
        };
        insuraceRepurchaseTimeLimit: BigNumberish;
        borrowAmountCap: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "jpegAggregator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "jpegLocker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nftContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftTypeValueETH",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nftTypes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nftValueETH",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openPositionsIndexes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "overrideFloor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingNFTValueETH",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "positionOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repurchase",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBorrowAmountCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreditLimitRate",
    values: [{ numerator: BigNumberish; denominator: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "setDebtInterestApr",
    values: [{ numerator: BigNumberish; denominator: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "setInsuranceLiquidationPenaltyRate",
    values: [{ numerator: BigNumberish; denominator: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "setInsurancePurchaseRate",
    values: [{ numerator: BigNumberish; denominator: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "setJPEGLockTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationLimitRate",
    values: [{ numerator: BigNumberish; denominator: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "setNFTType",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setNFTTypeValueETH",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOrganizationFeeRate",
    values: [{ numerator: BigNumberish; denominator: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingNFTValueETH",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setValueIncreaseLockRate",
    values: [{ numerator: BigNumberish; denominator: BigNumberish }]
  ): string;
  encodeFunctionData(functionFragment: "settings", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "showPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stablecoin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleFallbackOracle",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDebtAccruedAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDebtAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalFeeCollected",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPositions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "useFallbackOracle",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "CUSTOM_NFT_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "DAO_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIQUIDATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "accrue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimExpiredInsuranceNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "daoFloorOverride",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableFloorOverride",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethAggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fallbackOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizePendingNFTValueETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "floorOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNFTInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "jpegAggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "jpegLocker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftTypeValueETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nftTypes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftValueETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPositionsIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "overrideFloor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingNFTValueETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repurchase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBorrowAmountCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCreditLimitRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDebtInterestApr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInsuranceLiquidationPenaltyRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInsurancePurchaseRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setJPEGLockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationLimitRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setNFTType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNFTTypeValueETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOrganizationFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingNFTValueETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValueIncreaseLockRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "showPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stablecoin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleFallbackOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDebtAccruedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDebtAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFeeCollected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "useFallbackOracle",
    data: BytesLike
  ): Result;

  events: {
    "Borrowed(address,uint256,uint256)": EventFragment;
    "InsuranceExpired(address,uint256)": EventFragment;
    "Liquidated(address,address,uint256,bool)": EventFragment;
    "PositionClosed(address,uint256)": EventFragment;
    "PositionOpened(address,uint256)": EventFragment;
    "Repaid(address,uint256,uint256)": EventFragment;
    "Repurchased(address,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Borrowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InsuranceExpired"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionOpened"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Repaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Repurchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export class NFTVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NFTVaultInterface;

  functions: {
    CUSTOM_NFT_HASH(overrides?: CallOverrides): Promise<[string]>;

    DAO_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    LIQUIDATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    accrue(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrow(
      _nftIndex: BigNumberish,
      _amount: BigNumberish,
      _useInsurance: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimExpiredInsuranceNFT(
      _nftIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closePosition(
      _nftIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collect(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    daoFloorOverride(overrides?: CallOverrides): Promise<[boolean]>;

    disableFloorOverride(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ethAggregator(overrides?: CallOverrides): Promise<[string]>;

    fallbackOracle(overrides?: CallOverrides): Promise<[string]>;

    finalizePendingNFTValueETH(
      _nftIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    floorOracle(overrides?: CallOverrides): Promise<[string]>;

    getNFTInfo(
      _nftIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, string, string, BigNumber, BigNumber] & {
          index: BigNumber;
          nftType: string;
          owner: string;
          nftValueETH: BigNumber;
          nftValueUSD: BigNumber;
        }
      ] & {
        nftInfo: [BigNumber, string, string, BigNumber, BigNumber] & {
          index: BigNumber;
          nftType: string;
          owner: string;
          nftValueETH: BigNumber;
          nftValueUSD: BigNumber;
        };
      }
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _stablecoin: string,
      _nftContract: string,
      _ethAggregator: string,
      _jpegAggregator: string,
      _floorOracle: string,
      _fallbackOracle: string,
      _typeInitializers: {
        hash: BytesLike;
        valueETH: BigNumberish;
        nfts: BigNumberish[];
      }[],
      _jpegLocker: string,
      _settings: {
        debtInterestApr: { numerator: BigNumberish; denominator: BigNumberish };
        creditLimitRate: { numerator: BigNumberish; denominator: BigNumberish };
        liquidationLimitRate: {
          numerator: BigNumberish;
          denominator: BigNumberish;
        };
        valueIncreaseLockRate: {
          numerator: BigNumberish;
          denominator: BigNumberish;
        };
        organizationFeeRate: {
          numerator: BigNumberish;
          denominator: BigNumberish;
        };
        insurancePurchaseRate: {
          numerator: BigNumberish;
          denominator: BigNumberish;
        };
        insuranceLiquidationPenaltyRate: {
          numerator: BigNumberish;
          denominator: BigNumberish;
        };
        insuraceRepurchaseTimeLimit: BigNumberish;
        borrowAmountCap: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    jpegAggregator(overrides?: CallOverrides): Promise<[string]>;

    jpegLocker(overrides?: CallOverrides): Promise<[string]>;

    liquidate(
      _nftIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nftContract(overrides?: CallOverrides): Promise<[string]>;

    nftTypeValueETH(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nftTypes(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    nftValueETH(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    openPositionsIndexes(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    overrideFloor(
      _newFloor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pendingNFTValueETH(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    positionOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repay(
      _nftIndex: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repurchase(
      _nftIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBorrowAmountCap(
      _borrowAmountCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCreditLimitRate(
      _creditLimitRate: { numerator: BigNumberish; denominator: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDebtInterestApr(
      _debtInterestApr: { numerator: BigNumberish; denominator: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInsuranceLiquidationPenaltyRate(
      _insuranceLiquidationPenaltyRate: {
        numerator: BigNumberish;
        denominator: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInsurancePurchaseRate(
      _insurancePurchaseRate: {
        numerator: BigNumberish;
        denominator: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setJPEGLockTime(
      _newLockTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidationLimitRate(
      _liquidationLimitRate: {
        numerator: BigNumberish;
        denominator: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNFTType(
      _nftIndex: BigNumberish,
      _type: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNFTTypeValueETH(
      _type: BytesLike,
      _amountETH: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOrganizationFeeRate(
      _organizationFeeRate: {
        numerator: BigNumberish;
        denominator: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPendingNFTValueETH(
      _nftIndex: BigNumberish,
      _amountETH: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setValueIncreaseLockRate(
      _valueIncreaseLockRate: {
        numerator: BigNumberish;
        denominator: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settings(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        },
        [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        },
        [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        },
        [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        },
        [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        },
        [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        },
        [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        },
        BigNumber,
        BigNumber
      ] & {
        debtInterestApr: [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        };
        creditLimitRate: [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        };
        liquidationLimitRate: [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        };
        valueIncreaseLockRate: [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        };
        organizationFeeRate: [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        };
        insurancePurchaseRate: [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        };
        insuranceLiquidationPenaltyRate: [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        };
        insuraceRepurchaseTimeLimit: BigNumber;
        borrowAmountCap: BigNumber;
      }
    >;

    showPosition(
      _nftIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          string,
          BigNumber,
          [
            [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            },
            [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            },
            [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            },
            [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            },
            [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            },
            [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            },
            [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            },
            BigNumber,
            BigNumber
          ] & {
            debtInterestApr: [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            };
            creditLimitRate: [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            };
            liquidationLimitRate: [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            };
            valueIncreaseLockRate: [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            };
            organizationFeeRate: [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            };
            insurancePurchaseRate: [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            };
            insuranceLiquidationPenaltyRate: [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            };
            insuraceRepurchaseTimeLimit: BigNumber;
            borrowAmountCap: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          boolean,
          BigNumber,
          string
        ] & {
          owner: string;
          nftIndex: BigNumber;
          nftType: string;
          nftValueUSD: BigNumber;
          vaultSettings: [
            [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            },
            [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            },
            [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            },
            [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            },
            [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            },
            [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            },
            [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            },
            BigNumber,
            BigNumber
          ] & {
            debtInterestApr: [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            };
            creditLimitRate: [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            };
            liquidationLimitRate: [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            };
            valueIncreaseLockRate: [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            };
            organizationFeeRate: [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            };
            insurancePurchaseRate: [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            };
            insuranceLiquidationPenaltyRate: [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            };
            insuraceRepurchaseTimeLimit: BigNumber;
            borrowAmountCap: BigNumber;
          };
          creditLimit: BigNumber;
          debtPrincipal: BigNumber;
          debtInterest: BigNumber;
          borrowType: number;
          liquidatable: boolean;
          liquidatedAt: BigNumber;
          liquidator: string;
        }
      ] & {
        preview: [
          string,
          BigNumber,
          string,
          BigNumber,
          [
            [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            },
            [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            },
            [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            },
            [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            },
            [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            },
            [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            },
            [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            },
            BigNumber,
            BigNumber
          ] & {
            debtInterestApr: [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            };
            creditLimitRate: [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            };
            liquidationLimitRate: [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            };
            valueIncreaseLockRate: [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            };
            organizationFeeRate: [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            };
            insurancePurchaseRate: [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            };
            insuranceLiquidationPenaltyRate: [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            };
            insuraceRepurchaseTimeLimit: BigNumber;
            borrowAmountCap: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          boolean,
          BigNumber,
          string
        ] & {
          owner: string;
          nftIndex: BigNumber;
          nftType: string;
          nftValueUSD: BigNumber;
          vaultSettings: [
            [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            },
            [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            },
            [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            },
            [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            },
            [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            },
            [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            },
            [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            },
            BigNumber,
            BigNumber
          ] & {
            debtInterestApr: [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            };
            creditLimitRate: [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            };
            liquidationLimitRate: [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            };
            valueIncreaseLockRate: [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            };
            organizationFeeRate: [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            };
            insurancePurchaseRate: [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            };
            insuranceLiquidationPenaltyRate: [BigNumber, BigNumber] & {
              numerator: BigNumber;
              denominator: BigNumber;
            };
            insuraceRepurchaseTimeLimit: BigNumber;
            borrowAmountCap: BigNumber;
          };
          creditLimit: BigNumber;
          debtPrincipal: BigNumber;
          debtInterest: BigNumber;
          borrowType: number;
          liquidatable: boolean;
          liquidatedAt: BigNumber;
          liquidator: string;
        };
      }
    >;

    stablecoin(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    toggleFallbackOracle(
      _useFallback: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalDebtAccruedAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDebtAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalFeeCollected(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalPositions(overrides?: CallOverrides): Promise<[BigNumber]>;

    useFallbackOracle(overrides?: CallOverrides): Promise<[boolean]>;
  };

  CUSTOM_NFT_HASH(overrides?: CallOverrides): Promise<string>;

  DAO_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  LIQUIDATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  accrue(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrow(
    _nftIndex: BigNumberish,
    _amount: BigNumberish,
    _useInsurance: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimExpiredInsuranceNFT(
    _nftIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closePosition(
    _nftIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collect(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  daoFloorOverride(overrides?: CallOverrides): Promise<boolean>;

  disableFloorOverride(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ethAggregator(overrides?: CallOverrides): Promise<string>;

  fallbackOracle(overrides?: CallOverrides): Promise<string>;

  finalizePendingNFTValueETH(
    _nftIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  floorOracle(overrides?: CallOverrides): Promise<string>;

  getNFTInfo(
    _nftIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, BigNumber, BigNumber] & {
      index: BigNumber;
      nftType: string;
      owner: string;
      nftValueETH: BigNumber;
      nftValueUSD: BigNumber;
    }
  >;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _stablecoin: string,
    _nftContract: string,
    _ethAggregator: string,
    _jpegAggregator: string,
    _floorOracle: string,
    _fallbackOracle: string,
    _typeInitializers: {
      hash: BytesLike;
      valueETH: BigNumberish;
      nfts: BigNumberish[];
    }[],
    _jpegLocker: string,
    _settings: {
      debtInterestApr: { numerator: BigNumberish; denominator: BigNumberish };
      creditLimitRate: { numerator: BigNumberish; denominator: BigNumberish };
      liquidationLimitRate: {
        numerator: BigNumberish;
        denominator: BigNumberish;
      };
      valueIncreaseLockRate: {
        numerator: BigNumberish;
        denominator: BigNumberish;
      };
      organizationFeeRate: {
        numerator: BigNumberish;
        denominator: BigNumberish;
      };
      insurancePurchaseRate: {
        numerator: BigNumberish;
        denominator: BigNumberish;
      };
      insuranceLiquidationPenaltyRate: {
        numerator: BigNumberish;
        denominator: BigNumberish;
      };
      insuraceRepurchaseTimeLimit: BigNumberish;
      borrowAmountCap: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  jpegAggregator(overrides?: CallOverrides): Promise<string>;

  jpegLocker(overrides?: CallOverrides): Promise<string>;

  liquidate(
    _nftIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nftContract(overrides?: CallOverrides): Promise<string>;

  nftTypeValueETH(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nftTypes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  nftValueETH(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  openPositionsIndexes(overrides?: CallOverrides): Promise<BigNumber[]>;

  overrideFloor(
    _newFloor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pendingNFTValueETH(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  positionOwner(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repay(
    _nftIndex: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repurchase(
    _nftIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBorrowAmountCap(
    _borrowAmountCap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCreditLimitRate(
    _creditLimitRate: { numerator: BigNumberish; denominator: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDebtInterestApr(
    _debtInterestApr: { numerator: BigNumberish; denominator: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInsuranceLiquidationPenaltyRate(
    _insuranceLiquidationPenaltyRate: {
      numerator: BigNumberish;
      denominator: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInsurancePurchaseRate(
    _insurancePurchaseRate: {
      numerator: BigNumberish;
      denominator: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setJPEGLockTime(
    _newLockTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidationLimitRate(
    _liquidationLimitRate: {
      numerator: BigNumberish;
      denominator: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNFTType(
    _nftIndex: BigNumberish,
    _type: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNFTTypeValueETH(
    _type: BytesLike,
    _amountETH: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOrganizationFeeRate(
    _organizationFeeRate: {
      numerator: BigNumberish;
      denominator: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPendingNFTValueETH(
    _nftIndex: BigNumberish,
    _amountETH: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setValueIncreaseLockRate(
    _valueIncreaseLockRate: {
      numerator: BigNumberish;
      denominator: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settings(
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber },
      [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber },
      [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber },
      [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber },
      [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber },
      [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber },
      [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber },
      BigNumber,
      BigNumber
    ] & {
      debtInterestApr: [BigNumber, BigNumber] & {
        numerator: BigNumber;
        denominator: BigNumber;
      };
      creditLimitRate: [BigNumber, BigNumber] & {
        numerator: BigNumber;
        denominator: BigNumber;
      };
      liquidationLimitRate: [BigNumber, BigNumber] & {
        numerator: BigNumber;
        denominator: BigNumber;
      };
      valueIncreaseLockRate: [BigNumber, BigNumber] & {
        numerator: BigNumber;
        denominator: BigNumber;
      };
      organizationFeeRate: [BigNumber, BigNumber] & {
        numerator: BigNumber;
        denominator: BigNumber;
      };
      insurancePurchaseRate: [BigNumber, BigNumber] & {
        numerator: BigNumber;
        denominator: BigNumber;
      };
      insuranceLiquidationPenaltyRate: [BigNumber, BigNumber] & {
        numerator: BigNumber;
        denominator: BigNumber;
      };
      insuraceRepurchaseTimeLimit: BigNumber;
      borrowAmountCap: BigNumber;
    }
  >;

  showPosition(
    _nftIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      string,
      BigNumber,
      [
        [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        },
        [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        },
        [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        },
        [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        },
        [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        },
        [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        },
        [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        },
        BigNumber,
        BigNumber
      ] & {
        debtInterestApr: [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        };
        creditLimitRate: [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        };
        liquidationLimitRate: [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        };
        valueIncreaseLockRate: [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        };
        organizationFeeRate: [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        };
        insurancePurchaseRate: [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        };
        insuranceLiquidationPenaltyRate: [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        };
        insuraceRepurchaseTimeLimit: BigNumber;
        borrowAmountCap: BigNumber;
      },
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      boolean,
      BigNumber,
      string
    ] & {
      owner: string;
      nftIndex: BigNumber;
      nftType: string;
      nftValueUSD: BigNumber;
      vaultSettings: [
        [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        },
        [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        },
        [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        },
        [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        },
        [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        },
        [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        },
        [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        },
        BigNumber,
        BigNumber
      ] & {
        debtInterestApr: [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        };
        creditLimitRate: [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        };
        liquidationLimitRate: [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        };
        valueIncreaseLockRate: [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        };
        organizationFeeRate: [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        };
        insurancePurchaseRate: [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        };
        insuranceLiquidationPenaltyRate: [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        };
        insuraceRepurchaseTimeLimit: BigNumber;
        borrowAmountCap: BigNumber;
      };
      creditLimit: BigNumber;
      debtPrincipal: BigNumber;
      debtInterest: BigNumber;
      borrowType: number;
      liquidatable: boolean;
      liquidatedAt: BigNumber;
      liquidator: string;
    }
  >;

  stablecoin(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  toggleFallbackOracle(
    _useFallback: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalDebtAccruedAt(overrides?: CallOverrides): Promise<BigNumber>;

  totalDebtAmount(overrides?: CallOverrides): Promise<BigNumber>;

  totalFeeCollected(overrides?: CallOverrides): Promise<BigNumber>;

  totalPositions(overrides?: CallOverrides): Promise<BigNumber>;

  useFallbackOracle(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    CUSTOM_NFT_HASH(overrides?: CallOverrides): Promise<string>;

    DAO_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    LIQUIDATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    accrue(overrides?: CallOverrides): Promise<void>;

    borrow(
      _nftIndex: BigNumberish,
      _amount: BigNumberish,
      _useInsurance: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    claimExpiredInsuranceNFT(
      _nftIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    closePosition(
      _nftIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    collect(overrides?: CallOverrides): Promise<void>;

    daoFloorOverride(overrides?: CallOverrides): Promise<boolean>;

    disableFloorOverride(overrides?: CallOverrides): Promise<void>;

    ethAggregator(overrides?: CallOverrides): Promise<string>;

    fallbackOracle(overrides?: CallOverrides): Promise<string>;

    finalizePendingNFTValueETH(
      _nftIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    floorOracle(overrides?: CallOverrides): Promise<string>;

    getNFTInfo(
      _nftIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, BigNumber] & {
        index: BigNumber;
        nftType: string;
        owner: string;
        nftValueETH: BigNumber;
        nftValueUSD: BigNumber;
      }
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _stablecoin: string,
      _nftContract: string,
      _ethAggregator: string,
      _jpegAggregator: string,
      _floorOracle: string,
      _fallbackOracle: string,
      _typeInitializers: {
        hash: BytesLike;
        valueETH: BigNumberish;
        nfts: BigNumberish[];
      }[],
      _jpegLocker: string,
      _settings: {
        debtInterestApr: { numerator: BigNumberish; denominator: BigNumberish };
        creditLimitRate: { numerator: BigNumberish; denominator: BigNumberish };
        liquidationLimitRate: {
          numerator: BigNumberish;
          denominator: BigNumberish;
        };
        valueIncreaseLockRate: {
          numerator: BigNumberish;
          denominator: BigNumberish;
        };
        organizationFeeRate: {
          numerator: BigNumberish;
          denominator: BigNumberish;
        };
        insurancePurchaseRate: {
          numerator: BigNumberish;
          denominator: BigNumberish;
        };
        insuranceLiquidationPenaltyRate: {
          numerator: BigNumberish;
          denominator: BigNumberish;
        };
        insuraceRepurchaseTimeLimit: BigNumberish;
        borrowAmountCap: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    jpegAggregator(overrides?: CallOverrides): Promise<string>;

    jpegLocker(overrides?: CallOverrides): Promise<string>;

    liquidate(
      _nftIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    nftContract(overrides?: CallOverrides): Promise<string>;

    nftTypeValueETH(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftTypes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    nftValueETH(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openPositionsIndexes(overrides?: CallOverrides): Promise<BigNumber[]>;

    overrideFloor(
      _newFloor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pendingNFTValueETH(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    positionOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    repay(
      _nftIndex: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    repurchase(
      _nftIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBorrowAmountCap(
      _borrowAmountCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCreditLimitRate(
      _creditLimitRate: { numerator: BigNumberish; denominator: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    setDebtInterestApr(
      _debtInterestApr: { numerator: BigNumberish; denominator: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    setInsuranceLiquidationPenaltyRate(
      _insuranceLiquidationPenaltyRate: {
        numerator: BigNumberish;
        denominator: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setInsurancePurchaseRate(
      _insurancePurchaseRate: {
        numerator: BigNumberish;
        denominator: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setJPEGLockTime(
      _newLockTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidationLimitRate(
      _liquidationLimitRate: {
        numerator: BigNumberish;
        denominator: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setNFTType(
      _nftIndex: BigNumberish,
      _type: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setNFTTypeValueETH(
      _type: BytesLike,
      _amountETH: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOrganizationFeeRate(
      _organizationFeeRate: {
        numerator: BigNumberish;
        denominator: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setPendingNFTValueETH(
      _nftIndex: BigNumberish,
      _amountETH: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setValueIncreaseLockRate(
      _valueIncreaseLockRate: {
        numerator: BigNumberish;
        denominator: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    settings(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        },
        [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        },
        [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        },
        [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        },
        [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        },
        [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        },
        [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        },
        BigNumber,
        BigNumber
      ] & {
        debtInterestApr: [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        };
        creditLimitRate: [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        };
        liquidationLimitRate: [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        };
        valueIncreaseLockRate: [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        };
        organizationFeeRate: [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        };
        insurancePurchaseRate: [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        };
        insuranceLiquidationPenaltyRate: [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        };
        insuraceRepurchaseTimeLimit: BigNumber;
        borrowAmountCap: BigNumber;
      }
    >;

    showPosition(
      _nftIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        [
          [BigNumber, BigNumber] & {
            numerator: BigNumber;
            denominator: BigNumber;
          },
          [BigNumber, BigNumber] & {
            numerator: BigNumber;
            denominator: BigNumber;
          },
          [BigNumber, BigNumber] & {
            numerator: BigNumber;
            denominator: BigNumber;
          },
          [BigNumber, BigNumber] & {
            numerator: BigNumber;
            denominator: BigNumber;
          },
          [BigNumber, BigNumber] & {
            numerator: BigNumber;
            denominator: BigNumber;
          },
          [BigNumber, BigNumber] & {
            numerator: BigNumber;
            denominator: BigNumber;
          },
          [BigNumber, BigNumber] & {
            numerator: BigNumber;
            denominator: BigNumber;
          },
          BigNumber,
          BigNumber
        ] & {
          debtInterestApr: [BigNumber, BigNumber] & {
            numerator: BigNumber;
            denominator: BigNumber;
          };
          creditLimitRate: [BigNumber, BigNumber] & {
            numerator: BigNumber;
            denominator: BigNumber;
          };
          liquidationLimitRate: [BigNumber, BigNumber] & {
            numerator: BigNumber;
            denominator: BigNumber;
          };
          valueIncreaseLockRate: [BigNumber, BigNumber] & {
            numerator: BigNumber;
            denominator: BigNumber;
          };
          organizationFeeRate: [BigNumber, BigNumber] & {
            numerator: BigNumber;
            denominator: BigNumber;
          };
          insurancePurchaseRate: [BigNumber, BigNumber] & {
            numerator: BigNumber;
            denominator: BigNumber;
          };
          insuranceLiquidationPenaltyRate: [BigNumber, BigNumber] & {
            numerator: BigNumber;
            denominator: BigNumber;
          };
          insuraceRepurchaseTimeLimit: BigNumber;
          borrowAmountCap: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean,
        BigNumber,
        string
      ] & {
        owner: string;
        nftIndex: BigNumber;
        nftType: string;
        nftValueUSD: BigNumber;
        vaultSettings: [
          [BigNumber, BigNumber] & {
            numerator: BigNumber;
            denominator: BigNumber;
          },
          [BigNumber, BigNumber] & {
            numerator: BigNumber;
            denominator: BigNumber;
          },
          [BigNumber, BigNumber] & {
            numerator: BigNumber;
            denominator: BigNumber;
          },
          [BigNumber, BigNumber] & {
            numerator: BigNumber;
            denominator: BigNumber;
          },
          [BigNumber, BigNumber] & {
            numerator: BigNumber;
            denominator: BigNumber;
          },
          [BigNumber, BigNumber] & {
            numerator: BigNumber;
            denominator: BigNumber;
          },
          [BigNumber, BigNumber] & {
            numerator: BigNumber;
            denominator: BigNumber;
          },
          BigNumber,
          BigNumber
        ] & {
          debtInterestApr: [BigNumber, BigNumber] & {
            numerator: BigNumber;
            denominator: BigNumber;
          };
          creditLimitRate: [BigNumber, BigNumber] & {
            numerator: BigNumber;
            denominator: BigNumber;
          };
          liquidationLimitRate: [BigNumber, BigNumber] & {
            numerator: BigNumber;
            denominator: BigNumber;
          };
          valueIncreaseLockRate: [BigNumber, BigNumber] & {
            numerator: BigNumber;
            denominator: BigNumber;
          };
          organizationFeeRate: [BigNumber, BigNumber] & {
            numerator: BigNumber;
            denominator: BigNumber;
          };
          insurancePurchaseRate: [BigNumber, BigNumber] & {
            numerator: BigNumber;
            denominator: BigNumber;
          };
          insuranceLiquidationPenaltyRate: [BigNumber, BigNumber] & {
            numerator: BigNumber;
            denominator: BigNumber;
          };
          insuraceRepurchaseTimeLimit: BigNumber;
          borrowAmountCap: BigNumber;
        };
        creditLimit: BigNumber;
        debtPrincipal: BigNumber;
        debtInterest: BigNumber;
        borrowType: number;
        liquidatable: boolean;
        liquidatedAt: BigNumber;
        liquidator: string;
      }
    >;

    stablecoin(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    toggleFallbackOracle(
      _useFallback: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    totalDebtAccruedAt(overrides?: CallOverrides): Promise<BigNumber>;

    totalDebtAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalFeeCollected(overrides?: CallOverrides): Promise<BigNumber>;

    totalPositions(overrides?: CallOverrides): Promise<BigNumber>;

    useFallbackOracle(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    Borrowed(
      owner?: string | null,
      index?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { owner: string; index: BigNumber; amount: BigNumber }
    >;

    InsuranceExpired(
      owner?: string | null,
      index?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { owner: string; index: BigNumber }
    >;

    Liquidated(
      liquidator?: string | null,
      owner?: string | null,
      index?: BigNumberish | null,
      insured?: null
    ): TypedEventFilter<
      [string, string, BigNumber, boolean],
      { liquidator: string; owner: string; index: BigNumber; insured: boolean }
    >;

    PositionClosed(
      owner?: string | null,
      index?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { owner: string; index: BigNumber }
    >;

    PositionOpened(
      owner?: string | null,
      index?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { owner: string; index: BigNumber }
    >;

    Repaid(
      owner?: string | null,
      index?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { owner: string; index: BigNumber; amount: BigNumber }
    >;

    Repurchased(
      owner?: string | null,
      index?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { owner: string; index: BigNumber }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;
  };

  estimateGas: {
    CUSTOM_NFT_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    DAO_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    accrue(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrow(
      _nftIndex: BigNumberish,
      _amount: BigNumberish,
      _useInsurance: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimExpiredInsuranceNFT(
      _nftIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closePosition(
      _nftIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collect(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    daoFloorOverride(overrides?: CallOverrides): Promise<BigNumber>;

    disableFloorOverride(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ethAggregator(overrides?: CallOverrides): Promise<BigNumber>;

    fallbackOracle(overrides?: CallOverrides): Promise<BigNumber>;

    finalizePendingNFTValueETH(
      _nftIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    floorOracle(overrides?: CallOverrides): Promise<BigNumber>;

    getNFTInfo(
      _nftIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _stablecoin: string,
      _nftContract: string,
      _ethAggregator: string,
      _jpegAggregator: string,
      _floorOracle: string,
      _fallbackOracle: string,
      _typeInitializers: {
        hash: BytesLike;
        valueETH: BigNumberish;
        nfts: BigNumberish[];
      }[],
      _jpegLocker: string,
      _settings: {
        debtInterestApr: { numerator: BigNumberish; denominator: BigNumberish };
        creditLimitRate: { numerator: BigNumberish; denominator: BigNumberish };
        liquidationLimitRate: {
          numerator: BigNumberish;
          denominator: BigNumberish;
        };
        valueIncreaseLockRate: {
          numerator: BigNumberish;
          denominator: BigNumberish;
        };
        organizationFeeRate: {
          numerator: BigNumberish;
          denominator: BigNumberish;
        };
        insurancePurchaseRate: {
          numerator: BigNumberish;
          denominator: BigNumberish;
        };
        insuranceLiquidationPenaltyRate: {
          numerator: BigNumberish;
          denominator: BigNumberish;
        };
        insuraceRepurchaseTimeLimit: BigNumberish;
        borrowAmountCap: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    jpegAggregator(overrides?: CallOverrides): Promise<BigNumber>;

    jpegLocker(overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(
      _nftIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nftContract(overrides?: CallOverrides): Promise<BigNumber>;

    nftTypeValueETH(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftTypes(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    nftValueETH(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openPositionsIndexes(overrides?: CallOverrides): Promise<BigNumber>;

    overrideFloor(
      _newFloor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pendingNFTValueETH(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    positionOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repay(
      _nftIndex: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repurchase(
      _nftIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBorrowAmountCap(
      _borrowAmountCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCreditLimitRate(
      _creditLimitRate: { numerator: BigNumberish; denominator: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDebtInterestApr(
      _debtInterestApr: { numerator: BigNumberish; denominator: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInsuranceLiquidationPenaltyRate(
      _insuranceLiquidationPenaltyRate: {
        numerator: BigNumberish;
        denominator: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInsurancePurchaseRate(
      _insurancePurchaseRate: {
        numerator: BigNumberish;
        denominator: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setJPEGLockTime(
      _newLockTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidationLimitRate(
      _liquidationLimitRate: {
        numerator: BigNumberish;
        denominator: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNFTType(
      _nftIndex: BigNumberish,
      _type: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNFTTypeValueETH(
      _type: BytesLike,
      _amountETH: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOrganizationFeeRate(
      _organizationFeeRate: {
        numerator: BigNumberish;
        denominator: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPendingNFTValueETH(
      _nftIndex: BigNumberish,
      _amountETH: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setValueIncreaseLockRate(
      _valueIncreaseLockRate: {
        numerator: BigNumberish;
        denominator: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settings(overrides?: CallOverrides): Promise<BigNumber>;

    showPosition(
      _nftIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stablecoin(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toggleFallbackOracle(
      _useFallback: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalDebtAccruedAt(overrides?: CallOverrides): Promise<BigNumber>;

    totalDebtAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalFeeCollected(overrides?: CallOverrides): Promise<BigNumber>;

    totalPositions(overrides?: CallOverrides): Promise<BigNumber>;

    useFallbackOracle(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CUSTOM_NFT_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DAO_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LIQUIDATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accrue(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrow(
      _nftIndex: BigNumberish,
      _amount: BigNumberish,
      _useInsurance: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimExpiredInsuranceNFT(
      _nftIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closePosition(
      _nftIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collect(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    daoFloorOverride(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disableFloorOverride(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ethAggregator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fallbackOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalizePendingNFTValueETH(
      _nftIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    floorOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNFTInfo(
      _nftIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _stablecoin: string,
      _nftContract: string,
      _ethAggregator: string,
      _jpegAggregator: string,
      _floorOracle: string,
      _fallbackOracle: string,
      _typeInitializers: {
        hash: BytesLike;
        valueETH: BigNumberish;
        nfts: BigNumberish[];
      }[],
      _jpegLocker: string,
      _settings: {
        debtInterestApr: { numerator: BigNumberish; denominator: BigNumberish };
        creditLimitRate: { numerator: BigNumberish; denominator: BigNumberish };
        liquidationLimitRate: {
          numerator: BigNumberish;
          denominator: BigNumberish;
        };
        valueIncreaseLockRate: {
          numerator: BigNumberish;
          denominator: BigNumberish;
        };
        organizationFeeRate: {
          numerator: BigNumberish;
          denominator: BigNumberish;
        };
        insurancePurchaseRate: {
          numerator: BigNumberish;
          denominator: BigNumberish;
        };
        insuranceLiquidationPenaltyRate: {
          numerator: BigNumberish;
          denominator: BigNumberish;
        };
        insuraceRepurchaseTimeLimit: BigNumberish;
        borrowAmountCap: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    jpegAggregator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    jpegLocker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidate(
      _nftIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nftContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftTypeValueETH(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftTypes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftValueETH(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openPositionsIndexes(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    overrideFloor(
      _newFloor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pendingNFTValueETH(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positionOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repay(
      _nftIndex: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repurchase(
      _nftIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBorrowAmountCap(
      _borrowAmountCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCreditLimitRate(
      _creditLimitRate: { numerator: BigNumberish; denominator: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDebtInterestApr(
      _debtInterestApr: { numerator: BigNumberish; denominator: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInsuranceLiquidationPenaltyRate(
      _insuranceLiquidationPenaltyRate: {
        numerator: BigNumberish;
        denominator: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInsurancePurchaseRate(
      _insurancePurchaseRate: {
        numerator: BigNumberish;
        denominator: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setJPEGLockTime(
      _newLockTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidationLimitRate(
      _liquidationLimitRate: {
        numerator: BigNumberish;
        denominator: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNFTType(
      _nftIndex: BigNumberish,
      _type: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNFTTypeValueETH(
      _type: BytesLike,
      _amountETH: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOrganizationFeeRate(
      _organizationFeeRate: {
        numerator: BigNumberish;
        denominator: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPendingNFTValueETH(
      _nftIndex: BigNumberish,
      _amountETH: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setValueIncreaseLockRate(
      _valueIncreaseLockRate: {
        numerator: BigNumberish;
        denominator: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    showPosition(
      _nftIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stablecoin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toggleFallbackOracle(
      _useFallback: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalDebtAccruedAt(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalDebtAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalFeeCollected(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalPositions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    useFallbackOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

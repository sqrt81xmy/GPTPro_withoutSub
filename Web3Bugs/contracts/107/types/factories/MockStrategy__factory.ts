/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockStrategy, MockStrategyInterface } from "../MockStrategy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_want",
        type: "address",
      },
      {
        internalType: "address",
        name: "_jpeg",
        type: "address",
      },
      {
        internalType: "address",
        name: "_baseRewardPool",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "balanceOfJPEG",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "baseRewardPool",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "convexConfig",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "jpeg",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "want",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawAll",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "withdrawJPEG",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161090438038061090483398101604081905261002f91610082565b600080546001600160a01b039485166001600160a01b0319918216179091556001805493851693821693909317909255600280549190931691161790556100f7565b805161007c816100e0565b92915050565b60008060006060848603121561009757600080fd5b60006100a38686610071565b93505060206100b486828701610071565b92505060406100c586828701610071565b9150509250925092565b60006001600160a01b03821661007c565b6100e9816100cf565b81146100f457600080fd5b50565b6107fe806101066000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c8063722713f7116100815780639c57e8471161005b5780639c57e84714610154578063d0e30db01461016b578063eb88d91a14610173576100c9565b8063722713f71461012f578063853828b61461014457806390406ef81461014c576100c9565b80632e1a7d4d116100b25780632e1a7d4d14610101578063475a91d11461011457806351cff8d91461011c576100c9565b806310d7e479146100ce5780631f1fcd51146100e3575b600080fd5b6100e16100dc366004610664565b61017b565b005b6100eb610208565b6040516100f8919061071a565b60405180910390f35b6100e161010f3660046106c6565b610217565b6100eb610320565b6100e161012a366004610664565b61032f565b6101376103b5565b6040516100f89190610772565b61013761043b565b6101376105d0565b61015c610601565b6040516100f893929190610728565b6100e1610616565b6100eb610618565b6001546001600160a01b031663a9059cbb826101956105d0565b6040518363ffffffff1660e01b81526004016101b2929190610750565b602060405180830381600087803b1580156101cc57600080fd5b505af11580156101e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020491906106a8565b5050565b6000546001600160a01b031681565b60008054604051632988bb9f60e21b8152339163a622ee7c91610246916001600160a01b03169060040161071a565b60206040518083038186803b15801561025e57600080fd5b505afa158015610272573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610296919061068a565b60005460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb906102c99084908690600401610750565b602060405180830381600087803b1580156102e357600080fd5b505af11580156102f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031b91906106a8565b505050565b6002546001600160a01b031681565b6040516370a0823160e01b81526001600160a01b0382169063a9059cbb90339083906370a082319061036590309060040161071a565b60206040518083038186803b15801561037d57600080fd5b505afa158015610391573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019591906106e4565b600080546040516370a0823160e01b81526001600160a01b03909116906370a08231906103e690309060040161071a565b60206040518083038186803b1580156103fe57600080fd5b505afa158015610412573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043691906106e4565b905090565b60008054604051632988bb9f60e21b81528291339163a622ee7c9161046e916001600160a01b039091169060040161071a565b60206040518083038186803b15801561048657600080fd5b505afa15801561049a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104be919061068a565b600080546040516370a0823160e01b815292935090916001600160a01b03909116906370a08231906104f490309060040161071a565b60206040518083038186803b15801561050c57600080fd5b505afa158015610520573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054491906106e4565b60005460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb906105779085908590600401610750565b602060405180830381600087803b15801561059157600080fd5b505af11580156105a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c991906106a8565b5091505090565b6001546040516370a0823160e01b81526000916001600160a01b0316906370a08231906103e690309060040161071a565b6002546000906001600160a01b031681909192565b565b6001546001600160a01b031681565b80356106328161079f565b92915050565b80516106328161079f565b8051610632816107b6565b8035610632816107bf565b8051610632816107bf565b60006020828403121561067657600080fd5b60006106828484610627565b949350505050565b60006020828403121561069c57600080fd5b60006106828484610638565b6000602082840312156106ba57600080fd5b60006106828484610643565b6000602082840312156106d857600080fd5b6000610682848461064e565b6000602082840312156106f657600080fd5b60006106828484610659565b61070b81610780565b82525050565b61070b8161079c565b602081016106328284610702565b606081016107368286610702565b6107436020830185610702565b6106826040830184610711565b6040810161075e8285610702565b61076b6020830184610711565b9392505050565b602081016106328284610711565b600061063282610790565b151590565b6001600160a01b031690565b90565b6107a881610780565b81146107b357600080fd5b50565b6107a88161078b565b6107a88161079c56fea2646970667358221220adcc53d94ab602a375485426418945716ccb180ad561ba3c4925c700bdac00ef64736f6c63430008000033";

export class MockStrategy__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _want: string,
    _jpeg: string,
    _baseRewardPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockStrategy> {
    return super.deploy(
      _want,
      _jpeg,
      _baseRewardPool,
      overrides || {}
    ) as Promise<MockStrategy>;
  }
  getDeployTransaction(
    _want: string,
    _jpeg: string,
    _baseRewardPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _want,
      _jpeg,
      _baseRewardPool,
      overrides || {}
    );
  }
  attach(address: string): MockStrategy {
    return super.attach(address) as MockStrategy;
  }
  connect(signer: Signer): MockStrategy__factory {
    return super.connect(signer) as MockStrategy__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockStrategyInterface {
    return new utils.Interface(_abi) as MockStrategyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockStrategy {
    return new Contract(address, _abi, signerOrProvider) as MockStrategy;
  }
}

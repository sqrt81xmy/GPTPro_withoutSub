/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockCurve, MockCurveInterface } from "../MockCurve";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_poolToken",
        type: "address",
      },
      {
        internalType: "contract IERC20[]",
        name: "_tokens",
        type: "address[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256[4]",
        name: "amounts",
        type: "uint256[4]",
      },
      {
        internalType: "uint256",
        name: "minOut",
        type: "uint256",
      },
    ],
    name: "add_liquidity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "balances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620009773803806200097783398101604081905262000034916200019e565b600080546001600160a01b0319166001600160a01b0384161790558051620000649060019060208401906200006d565b5050506200029d565b828054828255906000526020600020908101928215620000c5579160200282015b82811115620000c557825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906200008e565b50620000d3929150620000d7565b5090565b5b80821115620000d35760008155600101620000d8565b600062000105620000ff8462000221565b620001f5565b905080838252602082019050828560208602820111156200012557600080fd5b60005b858110156200015557816200013e88826200018b565b845250602092830192919091019060010162000128565b5050509392505050565b600082601f8301126200017157600080fd5b815162000183848260208601620000ee565b949350505050565b8051620001988162000283565b92915050565b60008060408385031215620001b257600080fd5b6000620001c085856200018b565b92505060208301516001600160401b03811115620001dd57600080fd5b620001eb858286016200015f565b9150509250929050565b6040518181016001600160401b03811182821017156200021957620002196200026d565b604052919050565b60006001600160401b038211156200023d576200023d6200026d565b5060209081020190565b6000620001988262000261565b6000620001988262000247565b6001600160a01b031690565b634e487b7160e01b600052604160045260246000fd5b6200028e8162000254565b81146200029a57600080fd5b50565b6106ca80620002ad6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063029b2f341461003b5780634903b0d114610050575b600080fd5b61004e610049366004610454565b610079565b005b61006361005e3660046104ac565b6102fc565b60405161007091906105a1565b60405180910390f35b60005b60048110156101925760008382600481106100a757634e487b7160e01b600052603260045260246000fd5b60200201519050801561017f57600182815481106100d557634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906323b872dd9061012b90339030908690600401610547565b602060405180830381600087803b15801561014557600080fd5b505af1158015610159573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017d919061048e565b505b508061018a81610622565b91505061007c565b50600080546040516370a0823160e01b81526001600160a01b03909116906370a08231906101c4903090600401610539565b60206040518083038186803b1580156101dc57600080fd5b505afa1580156101f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021491906104ca565b905081811015610259576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025090610591565b60405180910390fd5b6000546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063a9059cbb906102a4903390859060040161056f565b602060405180830381600087803b1580156102be57600080fd5b505af11580156102d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f6919061048e565b50505050565b60006001828154811061031f57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040516370a0823160e01b81526001600160a01b03909116906370a0823190610358903090600401610539565b60206040518083038186803b15801561037057600080fd5b505afa158015610384573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a891906104ca565b92915050565b60006103c16103bc846105d9565b6105af565b905080828560208602820111156103d757600080fd5b60005b8581101561040357816103ed888261043e565b84525060209283019291909101906001016103da565b5050509392505050565b600082601f83011261041e57600080fd5b600461042b8482856103ae565b949350505050565b80516103a881610674565b80356103a88161068b565b80516103a88161068b565b60008060a0838503121561046757600080fd5b6000610473858561040d565b92505060806104848582860161043e565b9150509250929050565b6000602082840312156104a057600080fd5b600061042b8484610433565b6000602082840312156104be57600080fd5b600061042b848461043e565b6000602082840312156104dc57600080fd5b600061042b8484610449565b6104f181610603565b82525050565b60006105046013836105fa565b7f494e53554646494349454e545f544f4b454e5300000000000000000000000000815260200192915050565b6104f18161061f565b602081016103a882846104e8565b6060810161055582866104e8565b61056260208301856104e8565b61042b6040830184610530565b6040810161057d82856104e8565b61058a6020830184610530565b9392505050565b602080825281016103a8816104f7565b602081016103a88284610530565b60405181810167ffffffffffffffff811182821017156105d1576105d161065e565b604052919050565b600067ffffffffffffffff8211156105f3576105f361065e565b5060200290565b90815260200190565b60006103a882610613565b151590565b6001600160a01b031690565b90565b600061062d8261061f565b915060001982141561064157610641610648565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b61067d8161060e565b811461068857600080fd5b50565b61067d8161061f56fea2646970667358221220c155e98929710aa993d5be0fa0a79f1f43907fe85b91f94d39dd24e89dd0de6a64736f6c63430008000033";

export class MockCurve__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _poolToken: string,
    _tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockCurve> {
    return super.deploy(
      _poolToken,
      _tokens,
      overrides || {}
    ) as Promise<MockCurve>;
  }
  getDeployTransaction(
    _poolToken: string,
    _tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_poolToken, _tokens, overrides || {});
  }
  attach(address: string): MockCurve {
    return super.attach(address) as MockCurve;
  }
  connect(signer: Signer): MockCurve__factory {
    return super.connect(signer) as MockCurve__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockCurveInterface {
    return new utils.Interface(_abi) as MockCurveInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockCurve {
    return new Contract(address, _abi, signerOrProvider) as MockCurve;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { EtherRock, EtherRockInterface } from "../EtherRock";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "rockNumber",
        type: "uint256",
      },
    ],
    name: "buyRock",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "rockNumber",
        type: "uint256",
      },
    ],
    name: "dontSellRock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "rockNumber",
        type: "uint256",
      },
    ],
    name: "getRockInfo",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "rockNumber",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "giftRock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "latestNewRockForSale",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "rockOwners",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "rockOwningHistory",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "rocks",
    outputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "bool",
        name: "currentlyForSale",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "timesSold",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "rockNumber",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "sellRock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060008080526020527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5805460ff60a01b1916600160a01b1790556109138061005a6000396000f3fe6080604052600436106100b15760003560e01c8063676cfec6116100695780636fda55341161004e5780636fda5534146101a6578063aaf9419d146101d3578063c6caa959146101e8576100b1565b8063676cfec6146101565780636e22371014610186576100b1565b80632a7b01721161009a5780632a7b01721461010e5780633ccfd60b1461012e57806363a0607b14610143576100b1565b80631b3e2002146100b65780631ee284b1146100d8575b600080fd5b3480156100c257600080fd5b506100d66100d13660046106af565b610208565b005b3480156100e457600080fd5b506100f86100f3366004610657565b61027e565b604051610105919061082b565b60405180910390f35b34801561011a57600080fd5b506100d6610129366004610691565b6102af565b34801561013a57600080fd5b506100d66102ed565b6100d6610151366004610691565b610340565b34801561016257600080fd5b50610176610171366004610691565b6104de565b60405161010594939291906107c5565b34801561019257600080fd5b506101766101a1366004610691565b610514565b3480156101b257600080fd5b506101c66101c1366004610631565b610549565b6040516101059190610803565b3480156101df57600080fd5b506100f86105b5565b3480156101f457600080fd5b506100d66102033660046106df565b6105bb565b6000828152602081905260409020546001600160a01b0316331461022b57600080fd5b60008281526020818152604080832080546001600160a01b0390951673ffffffffffffffffffffffffffffffffffffffff1990951685179055928252600180825292822080549384018155825290200155565b6001602052816000526040600020818154811061029a57600080fd5b90600052602060002001600091509150505481565b6000818152602081905260409020546001600160a01b031633146102d257600080fd5b6000908152602081905260409020805460ff60a01b19169055565b6003546001600160a01b0316331461030457600080fd5b6003546040516001600160a01b03909116904780156108fc02916000818181858888f1935050505015801561033d573d6000803e3d6000fd5b50565b600081815260208190526040902054600160a01b900460ff16151560011461039d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103949061081b565b60405180910390fd5b60008181526020819052604090206001015434146103ba57600080fd5b6000818152602081905260408120805460ff60a01b191681556002018054916103e28361086b565b9190505550600254811461043d57600081815260208190526040808220805460019091015491516001600160a01b039091169282156108fc02929190818181858888f1935050505015801561043b573d6000803e3d6000fd5b505b600081815260208181526040808320805473ffffffffffffffffffffffffffffffffffffffff1916339081179091558352600180835290832080549182018155835291200181905560025481141561033d578060631461033d57600280549060006104a78361086b565b9091555050600280546000908152602081905260408082206001018290559154815220805460ff60a01b1916600160a01b17905550565b6000602081905290815260409020805460018201546002909201546001600160a01b03821692600160a01b90920460ff16919084565b6000908152602081905260409020805460018201546002909201546001600160a01b03821693600160a01b90920460ff169291565b6001600160a01b0381166000908152600160209081526040918290208054835181840281018401909452808452606093928301828280156105a957602002820191906000526020600020905b815481526020019060010190808311610595575b50505050509050919050565b60025481565b6000828152602081905260409020546001600160a01b031633146105de57600080fd5b600081116105eb57600080fd5b6000918252602082905260409091206001810191909155805460ff60a01b1916600160a01b179055565b8035610620816108c0565b92915050565b8035610620816108d4565b60006020828403121561064357600080fd5b600061064f8484610615565b949350505050565b6000806040838503121561066a57600080fd5b60006106768585610615565b925050602061068785828601610626565b9150509250929050565b6000602082840312156106a357600080fd5b600061064f8484610626565b600080604083850312156106c257600080fd5b60006106ce8585610626565b925050602061068785828601610615565b600080604083850312156106f257600080fd5b60006106768585610626565b600061070a83836107bc565b505060200190565b61071b8161084c565b82525050565b600061072c8261083f565b6107368185610843565b935061074183610839565b8060005b8381101561076f57815161075988826106fe565b975061076483610839565b925050600101610745565b509495945050505050565b61071b81610857565b6000610790600c83610843565b7f4e6f7420666f722073616c650000000000000000000000000000000000000000815260200192915050565b61071b81610868565b608081016107d38287610712565b6107e0602083018661077a565b6107ed60408301856107bc565b6107fa60608301846107bc565b95945050505050565b602080825281016108148184610721565b9392505050565b6020808252810161062081610783565b6020810161062082846107bc565b60200190565b5190565b90815260200190565b60006106208261085c565b151590565b6001600160a01b031690565b90565b600061087682610868565b915060001982141561088a5761088a610891565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6108c98161084c565b811461033d57600080fd5b6108c98161086856fea26469706673582212201c12798ccba8ef61f975bdc3d9d2ac00a97a98c138cdee7b8e0ff118ce95138a64736f6c63430008000033";

export class EtherRock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<EtherRock> {
    return super.deploy(overrides || {}) as Promise<EtherRock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): EtherRock {
    return super.attach(address) as EtherRock;
  }
  connect(signer: Signer): EtherRock__factory {
    return super.connect(signer) as EtherRock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EtherRockInterface {
    return new utils.Interface(_abi) as EtherRockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): EtherRock {
    return new Contract(address, _abi, signerOrProvider) as EtherRock;
  }
}

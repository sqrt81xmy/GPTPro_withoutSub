/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MStableYieldSourceInterface extends ethers.utils.Interface {
  functions: {
    "approveMax()": FunctionFragment;
    "balanceOfToken(address)": FunctionFragment;
    "depositToken()": FunctionFragment;
    "imBalances(address)": FunctionFragment;
    "mAsset()": FunctionFragment;
    "redeemToken(uint256)": FunctionFragment;
    "savings()": FunctionFragment;
    "supplyTokenTo(uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approveMax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "imBalances", values: [string]): string;
  encodeFunctionData(functionFragment: "mAsset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeemToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "savings", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supplyTokenTo",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "approveMax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "imBalances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "savings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supplyTokenTo",
    data: BytesLike
  ): Result;

  events: {
    "ApprovedMax(address)": EventFragment;
    "Initialized(address)": EventFragment;
    "Redeemed(address,uint256,uint256)": EventFragment;
    "Sponsored(address,uint256)": EventFragment;
    "Supplied(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovedMax"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sponsored"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Supplied"): EventFragment;
}

export class MStableYieldSource extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MStableYieldSourceInterface;

  functions: {
    approveMax(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOfToken(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { mAssets: BigNumber }>;

    depositToken(
      overrides?: CallOverrides
    ): Promise<[string] & { underlyingMasset: string }>;

    imBalances(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    mAsset(overrides?: CallOverrides): Promise<[string]>;

    redeemToken(
      mAssetAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    savings(overrides?: CallOverrides): Promise<[string]>;

    supplyTokenTo(
      mAssetAmount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  approveMax(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOfToken(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

  depositToken(overrides?: CallOverrides): Promise<string>;

  imBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  mAsset(overrides?: CallOverrides): Promise<string>;

  redeemToken(
    mAssetAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  savings(overrides?: CallOverrides): Promise<string>;

  supplyTokenTo(
    mAssetAmount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approveMax(overrides?: CallOverrides): Promise<void>;

    balanceOfToken(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    depositToken(overrides?: CallOverrides): Promise<string>;

    imBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    mAsset(overrides?: CallOverrides): Promise<string>;

    redeemToken(
      mAssetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    savings(overrides?: CallOverrides): Promise<string>;

    supplyTokenTo(
      mAssetAmount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ApprovedMax(
      from?: string | null
    ): TypedEventFilter<[string], { from: string }>;

    Initialized(
      savings?: string | null
    ): TypedEventFilter<[string], { savings: string }>;

    Redeemed(
      from?: string | null,
      requestedAmount?: null,
      actualAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { from: string; requestedAmount: BigNumber; actualAmount: BigNumber }
    >;

    Sponsored(
      sponsor?: string | null,
      mAssetAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sponsor: string; mAssetAmount: BigNumber }
    >;

    Supplied(
      from?: string | null,
      to?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    approveMax(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOfToken(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    depositToken(overrides?: CallOverrides): Promise<BigNumber>;

    imBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    mAsset(overrides?: CallOverrides): Promise<BigNumber>;

    redeemToken(
      mAssetAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    savings(overrides?: CallOverrides): Promise<BigNumber>;

    supplyTokenTo(
      mAssetAmount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveMax(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOfToken(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    imBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemToken(
      mAssetAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    savings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supplyTokenTo(
      mAssetAmount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

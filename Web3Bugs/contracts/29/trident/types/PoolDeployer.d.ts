/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PoolDeployerInterface extends ethers.utils.Interface {
  functions: {
    "configAddress(bytes32)": FunctionFragment;
    "getPools(address,address,uint256,uint256)": FunctionFragment;
    "masterDeployer()": FunctionFragment;
    "pools(address,address,uint256)": FunctionFragment;
    "poolsCount(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "configAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPools",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "masterDeployer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pools",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolsCount",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "configAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "masterDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolsCount", data: BytesLike): Result;

  events: {};
}

export class PoolDeployer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PoolDeployerInterface;

  functions: {
    configAddress(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPools(
      token0: string,
      token1: string,
      startIndex: BigNumberish,
      endIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]] & { pairPools: string[] }>;

    masterDeployer(overrides?: CallOverrides): Promise<[string]>;

    pools(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    poolsCount(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;
  };

  configAddress(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  getPools(
    token0: string,
    token1: string,
    startIndex: BigNumberish,
    endIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  masterDeployer(overrides?: CallOverrides): Promise<string>;

  pools(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  poolsCount(
    token0: string,
    token1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    configAddress(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    getPools(
      token0: string,
      token1: string,
      startIndex: BigNumberish,
      endIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    masterDeployer(overrides?: CallOverrides): Promise<string>;

    pools(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    poolsCount(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    configAddress(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPools(
      token0: string,
      token1: string,
      startIndex: BigNumberish,
      endIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    masterDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    pools(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolsCount(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    configAddress(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPools(
      token0: string,
      token1: string,
      startIndex: BigNumberish,
      endIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    masterDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pools(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolsCount(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

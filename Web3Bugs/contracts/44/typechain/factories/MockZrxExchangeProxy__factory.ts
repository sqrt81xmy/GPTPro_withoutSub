/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockZrxExchangeProxy,
  MockZrxExchangeProxyInterface,
} from "../MockZrxExchangeProxy";

const _abi = [
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_1",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "_2",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_3",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "_4",
        type: "bool",
      },
    ],
    name: "sellToUniswap",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_1",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "_2",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_3",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "_4",
        type: "bool",
      },
    ],
    name: "sellToUniswap1",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_1",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "_2",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_3",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "_4",
        type: "bool",
      },
    ],
    name: "sellToUniswap2",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_1",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "_2",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_3",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "_4",
        type: "bool",
      },
    ],
    name: "sellToUniswap3",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_1",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "_2",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_3",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "_4",
        type: "bool",
      },
    ],
    name: "sellToUniswap4",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_1",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "_2",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_3",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "_4",
        type: "bool",
      },
    ],
    name: "sellToUniswap5",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610d90806100206000396000f3fe6080604052600436106100595760003560e01c806302af0bb5146100625780631f9b99851461007e578063221709631461009a5780639b1d1f41146100b6578063b88ce71e146100d2578063d9627aa4146100ee57610060565b3661006057005b005b61007c600480360381019061007791906109cb565b61010a565b005b610098600480360381019061009391906109cb565b610286565b005b6100b460048036038101906100af91906109cb565b6104ab565b005b6100d060048036038101906100cb91906109cb565b610688565b005b6100ec60048036038101906100e791906109cb565b6106c3565b005b610108600480360381019061010391906109cb565b6106ca565b005b670de0b6b3a76400003414610154576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014b90610c8a565b60405180910390fd5b6001858590501161019a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161019190610c4a565b60405180910390fd5b848460018181106101d4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906101e991906109a2565b73ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33683635c9adc5dea000006040518363ffffffff1660e01b815260040161022c929190610c21565b602060405180830381600087803b15801561024657600080fd5b505af115801561025a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027e9190610a4b565b505050505050565b60008585905011156104a4576000858560008181106102ce577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906102e391906109a2565b905060008173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401610322929190610b8a565b60206040518083038186803b15801561033a57600080fd5b505afa15801561034e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103729190610a74565b9050868660008181106103ae577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906103c391906109a2565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016103ff93929190610bea565b602060405180830381600087803b15801561041957600080fd5b505af115801561042d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104519190610a4b565b503373ffffffffffffffffffffffffffffffffffffffff166108fc67016345785d8a00009081150290604051600060405180830381858888f193505050501580156104a0573d6000803e3d6000fd5b5050505b5050505050565b600085859050116104f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e890610c4a565b60405180910390fd5b60008585600081811061052d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061054291906109a2565b9050600086866001818110610580577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061059591906109a2565b90508173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330683635c9adc5dea000006040518463ffffffff1660e01b81526004016105dd93929190610bb3565b602060405180830381600087803b1580156105f757600080fd5b505af115801561060b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062f9190610a4b565b503373ffffffffffffffffffffffffffffffffffffffff166108fc670de0b6b3a76400009081150290604051600060405180830381858888f1935050505015801561067e573d6000803e3d6000fd5b5050505050505050565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ba90610c6a565b60405180910390fd5b5050505050565b60018585905011610710576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070790610c4a565b60405180910390fd5b60008585600081811061074c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061076191906109a2565b905060008686600181811061079f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906107b491906109a2565b90508173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330683635c9adc5dea000006040518463ffffffff1660e01b81526004016107fc93929190610bb3565b602060405180830381600087803b15801561081657600080fd5b505af115801561082a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084e9190610a4b565b508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33683635c9adc5dea000006040518363ffffffff1660e01b8152600401610893929190610c21565b602060405180830381600087803b1580156108ad57600080fd5b505af11580156108c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e59190610a4b565b5050505050505050565b6000813590506108fe81610d15565b92915050565b60008083601f84011261091657600080fd5b8235905067ffffffffffffffff81111561092f57600080fd5b60208301915083602082028301111561094757600080fd5b9250929050565b60008135905061095d81610d2c565b92915050565b60008151905061097281610d2c565b92915050565b60008135905061098781610d43565b92915050565b60008151905061099c81610d43565b92915050565b6000602082840312156109b457600080fd5b60006109c2848285016108ef565b91505092915050565b6000806000806000608086880312156109e357600080fd5b600086013567ffffffffffffffff8111156109fd57600080fd5b610a0988828901610904565b95509550506020610a1c88828901610978565b9350506040610a2d88828901610978565b9250506060610a3e8882890161094e565b9150509295509295909350565b600060208284031215610a5d57600080fd5b6000610a6b84828501610963565b91505092915050565b600060208284031215610a8657600080fd5b6000610a948482850161098d565b91505092915050565b610aa681610cbb565b82525050565b610ab581610d03565b82525050565b6000610ac8600683610caa565b91507f746f6b656e7300000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000610b08600a83610caa565b91507f536f727279206672656e000000000000000000000000000000000000000000006000830152602082019050919050565b6000610b48600783610caa565b91507f6d697370616964000000000000000000000000000000000000000000000000006000830152602082019050919050565b610b8481610cf9565b82525050565b6000604082019050610b9f6000830185610a9d565b610bac6020830184610a9d565b9392505050565b6000606082019050610bc86000830186610a9d565b610bd56020830185610a9d565b610be26040830184610aac565b949350505050565b6000606082019050610bff6000830186610a9d565b610c0c6020830185610a9d565b610c196040830184610b7b565b949350505050565b6000604082019050610c366000830185610a9d565b610c436020830184610aac565b9392505050565b60006020820190508181036000830152610c6381610abb565b9050919050565b60006020820190508181036000830152610c8381610afb565b9050919050565b60006020820190508181036000830152610ca381610b3b565b9050919050565b600082825260208201905092915050565b6000610cc682610cd9565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610d0e82610cf9565b9050919050565b610d1e81610cbb565b8114610d2957600080fd5b50565b610d3581610ccd565b8114610d4057600080fd5b50565b610d4c81610cf9565b8114610d5757600080fd5b5056fea26469706673582212204108305c6888cd9164f699f6e3fc1776fd1ebc8e83205523ed4ff4230b8d228464736f6c63430008000033";

export class MockZrxExchangeProxy__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockZrxExchangeProxy> {
    return super.deploy(overrides || {}) as Promise<MockZrxExchangeProxy>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockZrxExchangeProxy {
    return super.attach(address) as MockZrxExchangeProxy;
  }
  connect(signer: Signer): MockZrxExchangeProxy__factory {
    return super.connect(signer) as MockZrxExchangeProxy__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockZrxExchangeProxyInterface {
    return new utils.Interface(_abi) as MockZrxExchangeProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockZrxExchangeProxy {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockZrxExchangeProxy;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface AuraVestedEscrowInterface extends utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "auraLocker()": FunctionFragment;
    "available(address)": FunctionFragment;
    "cancel(address)": FunctionFragment;
    "claim(bool)": FunctionFragment;
    "endTime()": FunctionFragment;
    "fund(address[],uint256[])": FunctionFragment;
    "initialised()": FunctionFragment;
    "remaining(address)": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setLocker(address)": FunctionFragment;
    "startTime()": FunctionFragment;
    "totalClaimed(address)": FunctionFragment;
    "totalLocked(address)": FunctionFragment;
    "totalTime()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "auraLocker",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "available", values: [string]): string;
  encodeFunctionData(functionFragment: "cancel", values: [string]): string;
  encodeFunctionData(functionFragment: "claim", values: [boolean]): string;
  encodeFunctionData(functionFragment: "endTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fund",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "initialised",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "remaining", values: [string]): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(functionFragment: "setLocker", values: [string]): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalClaimed",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "totalLocked", values: [string]): string;
  encodeFunctionData(functionFragment: "totalTime", values?: undefined): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "auraLocker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "available", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialised",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "remaining", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setLocker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalTime", data: BytesLike): Result;

  events: {
    "Cancelled(address)": EventFragment;
    "Claim(address,uint256,bool)": EventFragment;
    "Funded(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Cancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Funded"): EventFragment;
}

export type CancelledEvent = TypedEvent<[string], { recipient: string }>;

export type CancelledEventFilter = TypedEventFilter<CancelledEvent>;

export type ClaimEvent = TypedEvent<
  [string, BigNumber, boolean],
  { user: string; amount: BigNumber; locked: boolean }
>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export type FundedEvent = TypedEvent<
  [string, BigNumber],
  { recipient: string; reward: BigNumber }
>;

export type FundedEventFilter = TypedEventFilter<FundedEvent>;

export interface AuraVestedEscrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AuraVestedEscrowInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    admin(overrides?: CallOverrides): Promise<[string]>;

    auraLocker(overrides?: CallOverrides): Promise<[string]>;

    available(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cancel(
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claim(
      _lock: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    fund(
      _recipient: string[],
      _amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialised(overrides?: CallOverrides): Promise<[boolean]>;

    remaining(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLocker(
      _auraLocker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalClaimed(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalLocked(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalTime(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  admin(overrides?: CallOverrides): Promise<string>;

  auraLocker(overrides?: CallOverrides): Promise<string>;

  available(_recipient: string, overrides?: CallOverrides): Promise<BigNumber>;

  cancel(
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claim(
    _lock: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endTime(overrides?: CallOverrides): Promise<BigNumber>;

  fund(
    _recipient: string[],
    _amount: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialised(overrides?: CallOverrides): Promise<boolean>;

  remaining(_recipient: string, overrides?: CallOverrides): Promise<BigNumber>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  setAdmin(
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLocker(
    _auraLocker: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  totalClaimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalLocked(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalTime(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    auraLocker(overrides?: CallOverrides): Promise<string>;

    available(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancel(_recipient: string, overrides?: CallOverrides): Promise<void>;

    claim(_lock: boolean, overrides?: CallOverrides): Promise<void>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    fund(
      _recipient: string[],
      _amount: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    initialised(overrides?: CallOverrides): Promise<boolean>;

    remaining(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    setAdmin(_admin: string, overrides?: CallOverrides): Promise<void>;

    setLocker(_auraLocker: string, overrides?: CallOverrides): Promise<void>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    totalClaimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalLocked(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalTime(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Cancelled(address)"(recipient?: string | null): CancelledEventFilter;
    Cancelled(recipient?: string | null): CancelledEventFilter;

    "Claim(address,uint256,bool)"(
      user?: string | null,
      amount?: null,
      locked?: null
    ): ClaimEventFilter;
    Claim(user?: string | null, amount?: null, locked?: null): ClaimEventFilter;

    "Funded(address,uint256)"(
      recipient?: string | null,
      reward?: null
    ): FundedEventFilter;
    Funded(recipient?: string | null, reward?: null): FundedEventFilter;
  };

  estimateGas: {
    admin(overrides?: CallOverrides): Promise<BigNumber>;

    auraLocker(overrides?: CallOverrides): Promise<BigNumber>;

    available(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancel(
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claim(
      _lock: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    fund(
      _recipient: string[],
      _amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialised(overrides?: CallOverrides): Promise<BigNumber>;

    remaining(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLocker(
      _auraLocker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    totalClaimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalLocked(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalTime(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auraLocker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    available(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancel(
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      _lock: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fund(
      _recipient: string[],
      _amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialised(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    remaining(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLocker(
      _auraLocker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalClaimed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalLocked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type JoinPoolRequestStruct = {
  assets: string[];
  maxAmountsIn: BigNumberish[];
  userData: BytesLike;
  fromInternalBalance: boolean;
};

export type JoinPoolRequestStructOutput = [
  string[],
  BigNumber[],
  string,
  boolean
] & {
  assets: string[];
  maxAmountsIn: BigNumber[];
  userData: string;
  fromInternalBalance: boolean;
};

export type SingleSwapStruct = {
  poolId: BytesLike;
  kind: BigNumberish;
  assetIn: string;
  assetOut: string;
  amount: BigNumberish;
  userData: BytesLike;
};

export type SingleSwapStructOutput = [
  string,
  number,
  string,
  string,
  BigNumber,
  string
] & {
  poolId: string;
  kind: number;
  assetIn: string;
  assetOut: string;
  amount: BigNumber;
  userData: string;
};

export type FundManagementStruct = {
  sender: string;
  fromInternalBalance: boolean;
  recipient: string;
  toInternalBalance: boolean;
};

export type FundManagementStructOutput = [string, boolean, string, boolean] & {
  sender: string;
  fromInternalBalance: boolean;
  recipient: string;
  toInternalBalance: boolean;
};

export interface MockBalancerVaultInterface extends utils.Interface {
  functions: {
    "getPool(bytes32)": FunctionFragment;
    "joinPool(bytes32,address,address,(address[],uint256[],bytes,bool))": FunctionFragment;
    "pool()": FunctionFragment;
    "poolToken()": FunctionFragment;
    "setTokens(address,address)": FunctionFragment;
    "swap((bytes32,uint8,address,address,uint256,bytes),(address,bool,address,bool),uint256,uint256)": FunctionFragment;
    "tokenA()": FunctionFragment;
    "tokenB()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "getPool", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "joinPool",
    values: [BytesLike, string, string, JoinPoolRequestStruct]
  ): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(functionFragment: "poolToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setTokens",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [SingleSwapStruct, FundManagementStruct, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tokenA", values?: undefined): string;
  encodeFunctionData(functionFragment: "tokenB", values?: undefined): string;

  decodeFunctionResult(functionFragment: "getPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenB", data: BytesLike): Result;

  events: {};
}

export interface MockBalancerVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockBalancerVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getPool(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, number]>;

    joinPool(
      arg0: BytesLike,
      arg1: string,
      recipient: string,
      request: JoinPoolRequestStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pool(overrides?: CallOverrides): Promise<[string]>;

    poolToken(overrides?: CallOverrides): Promise<[string]>;

    setTokens(
      _tokenA: string,
      _tokenB: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swap(
      singleSwap: SingleSwapStruct,
      funds: FundManagementStruct,
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenA(overrides?: CallOverrides): Promise<[string]>;

    tokenB(overrides?: CallOverrides): Promise<[string]>;
  };

  getPool(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, number]>;

  joinPool(
    arg0: BytesLike,
    arg1: string,
    recipient: string,
    request: JoinPoolRequestStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pool(overrides?: CallOverrides): Promise<string>;

  poolToken(overrides?: CallOverrides): Promise<string>;

  setTokens(
    _tokenA: string,
    _tokenB: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swap(
    singleSwap: SingleSwapStruct,
    funds: FundManagementStruct,
    arg2: BigNumberish,
    arg3: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenA(overrides?: CallOverrides): Promise<string>;

  tokenB(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getPool(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, number]>;

    joinPool(
      arg0: BytesLike,
      arg1: string,
      recipient: string,
      request: JoinPoolRequestStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    pool(overrides?: CallOverrides): Promise<string>;

    poolToken(overrides?: CallOverrides): Promise<string>;

    setTokens(
      _tokenA: string,
      _tokenB: string,
      overrides?: CallOverrides
    ): Promise<void>;

    swap(
      singleSwap: SingleSwapStruct,
      funds: FundManagementStruct,
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenA(overrides?: CallOverrides): Promise<string>;

    tokenB(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getPool(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    joinPool(
      arg0: BytesLike,
      arg1: string,
      recipient: string,
      request: JoinPoolRequestStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;

    poolToken(overrides?: CallOverrides): Promise<BigNumber>;

    setTokens(
      _tokenA: string,
      _tokenB: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swap(
      singleSwap: SingleSwapStruct,
      funds: FundManagementStruct,
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenA(overrides?: CallOverrides): Promise<BigNumber>;

    tokenB(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getPool(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joinPool(
      arg0: BytesLike,
      arg1: string,
      recipient: string,
      request: JoinPoolRequestStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setTokens(
      _tokenA: string,
      _tokenB: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      singleSwap: SingleSwapStruct,
      funds: FundManagementStruct,
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenB(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type VotedSlopeStruct = {
  slope: BigNumberish;
  power: BigNumberish;
  end: BigNumberish;
};

export type VotedSlopeStructOutput = [BigNumber, BigNumber, BigNumber] & {
  slope: BigNumber;
  power: BigNumber;
  end: BigNumber;
};

export interface MockVotingInterface extends utils.Interface {
  functions: {
    "gaugeWeights(address)": FunctionFragment;
    "get_gauge_weight(address)": FunctionFragment;
    "last_user_vote(address,address)": FunctionFragment;
    "vote(uint256,bool,bool)": FunctionFragment;
    "vote_for_gauge_weights(address,uint256)": FunctionFragment;
    "vote_user_power(address)": FunctionFragment;
    "vote_user_slopes(address,address)": FunctionFragment;
    "votesAgainst(uint256)": FunctionFragment;
    "votesFor(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "gaugeWeights",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "get_gauge_weight",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "last_user_vote",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "vote_for_gauge_weights",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vote_user_power",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vote_user_slopes",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "votesAgainst",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votesFor",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "gaugeWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_gauge_weight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "last_user_vote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vote_for_gauge_weights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vote_user_power",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vote_user_slopes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votesAgainst",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "votesFor", data: BytesLike): Result;

  events: {};
}

export interface MockVoting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockVotingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    gaugeWeights(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    get_gauge_weight(
      gauge: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    last_user_vote(
      user: string,
      gauge: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vote(
      voteId: BigNumberish,
      support: boolean,
      arg2: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vote_for_gauge_weights(
      gauge: string,
      weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vote_user_power(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vote_user_slopes(
      user: string,
      gauge: string,
      overrides?: CallOverrides
    ): Promise<[VotedSlopeStructOutput]>;

    votesAgainst(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    votesFor(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  gaugeWeights(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  get_gauge_weight(
    gauge: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  last_user_vote(
    user: string,
    gauge: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vote(
    voteId: BigNumberish,
    support: boolean,
    arg2: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vote_for_gauge_weights(
    gauge: string,
    weight: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vote_user_power(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  vote_user_slopes(
    user: string,
    gauge: string,
    overrides?: CallOverrides
  ): Promise<VotedSlopeStructOutput>;

  votesAgainst(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  votesFor(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    gaugeWeights(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    get_gauge_weight(
      gauge: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    last_user_vote(
      user: string,
      gauge: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vote(
      voteId: BigNumberish,
      support: boolean,
      arg2: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    vote_for_gauge_weights(
      gauge: string,
      weight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    vote_user_power(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vote_user_slopes(
      user: string,
      gauge: string,
      overrides?: CallOverrides
    ): Promise<VotedSlopeStructOutput>;

    votesAgainst(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votesFor(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    gaugeWeights(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    get_gauge_weight(
      gauge: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    last_user_vote(
      user: string,
      gauge: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vote(
      voteId: BigNumberish,
      support: boolean,
      arg2: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vote_for_gauge_weights(
      gauge: string,
      weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vote_user_power(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vote_user_slopes(
      user: string,
      gauge: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votesAgainst(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votesFor(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    gaugeWeights(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_gauge_weight(
      gauge: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    last_user_vote(
      user: string,
      gauge: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vote(
      voteId: BigNumberish,
      support: boolean,
      arg2: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vote_for_gauge_weights(
      gauge: string,
      weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vote_user_power(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vote_user_slopes(
      user: string,
      gauge: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votesAgainst(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votesFor(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

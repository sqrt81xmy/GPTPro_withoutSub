/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface AuraMerkleDropInterface extends utils.Interface {
  functions: {
    "aura()": FunctionFragment;
    "auraLocker()": FunctionFragment;
    "claim(bytes32[],uint256,bool)": FunctionFragment;
    "dao()": FunctionFragment;
    "expiryTime()": FunctionFragment;
    "forwardPenalty()": FunctionFragment;
    "hasClaimed(address)": FunctionFragment;
    "merkleRoot()": FunctionFragment;
    "penaltyForwarder()": FunctionFragment;
    "pendingPenalty()": FunctionFragment;
    "setDao(address)": FunctionFragment;
    "setLocker(address)": FunctionFragment;
    "setRoot(bytes32)": FunctionFragment;
    "startEarly()": FunctionFragment;
    "startTime()": FunctionFragment;
    "withdrawExpired()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "aura", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "auraLocker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BytesLike[], BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "dao", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "expiryTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forwardPenalty",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hasClaimed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "merkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "penaltyForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingPenalty",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setDao", values: [string]): string;
  encodeFunctionData(functionFragment: "setLocker", values: [string]): string;
  encodeFunctionData(functionFragment: "setRoot", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "startEarly",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawExpired",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "aura", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "auraLocker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dao", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "expiryTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forwardPenalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasClaimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "merkleRoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "penaltyForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingPenalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDao", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setLocker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startEarly", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawExpired",
    data: BytesLike
  ): Result;

  events: {
    "Claimed(address,uint256,bool)": EventFragment;
    "DaoSet(address)": EventFragment;
    "ExpiredWithdrawn(uint256)": EventFragment;
    "LockerSet(address)": EventFragment;
    "PenaltyForwarded(uint256)": EventFragment;
    "RootSet(bytes32)": EventFragment;
    "StartedEarly()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DaoSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpiredWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PenaltyForwarded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RootSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartedEarly"): EventFragment;
}

export type ClaimedEvent = TypedEvent<
  [string, BigNumber, boolean],
  { addr: string; amt: BigNumber; locked: boolean }
>;

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>;

export type DaoSetEvent = TypedEvent<[string], { newDao: string }>;

export type DaoSetEventFilter = TypedEventFilter<DaoSetEvent>;

export type ExpiredWithdrawnEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type ExpiredWithdrawnEventFilter =
  TypedEventFilter<ExpiredWithdrawnEvent>;

export type LockerSetEvent = TypedEvent<[string], { newLocker: string }>;

export type LockerSetEventFilter = TypedEventFilter<LockerSetEvent>;

export type PenaltyForwardedEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type PenaltyForwardedEventFilter =
  TypedEventFilter<PenaltyForwardedEvent>;

export type RootSetEvent = TypedEvent<[string], { newRoot: string }>;

export type RootSetEventFilter = TypedEventFilter<RootSetEvent>;

export type StartedEarlyEvent = TypedEvent<[], {}>;

export type StartedEarlyEventFilter = TypedEventFilter<StartedEarlyEvent>;

export interface AuraMerkleDrop extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AuraMerkleDropInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    aura(overrides?: CallOverrides): Promise<[string]>;

    auraLocker(overrides?: CallOverrides): Promise<[string]>;

    claim(
      _proof: BytesLike[],
      _amount: BigNumberish,
      _lock: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dao(overrides?: CallOverrides): Promise<[string]>;

    expiryTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    forwardPenalty(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasClaimed(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    merkleRoot(overrides?: CallOverrides): Promise<[string]>;

    penaltyForwarder(overrides?: CallOverrides): Promise<[string]>;

    pendingPenalty(overrides?: CallOverrides): Promise<[BigNumber]>;

    setDao(
      _newDao: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLocker(
      _newLocker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRoot(
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startEarly(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawExpired(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  aura(overrides?: CallOverrides): Promise<string>;

  auraLocker(overrides?: CallOverrides): Promise<string>;

  claim(
    _proof: BytesLike[],
    _amount: BigNumberish,
    _lock: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dao(overrides?: CallOverrides): Promise<string>;

  expiryTime(overrides?: CallOverrides): Promise<BigNumber>;

  forwardPenalty(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasClaimed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  merkleRoot(overrides?: CallOverrides): Promise<string>;

  penaltyForwarder(overrides?: CallOverrides): Promise<string>;

  pendingPenalty(overrides?: CallOverrides): Promise<BigNumber>;

  setDao(
    _newDao: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLocker(
    _newLocker: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRoot(
    _merkleRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startEarly(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawExpired(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    aura(overrides?: CallOverrides): Promise<string>;

    auraLocker(overrides?: CallOverrides): Promise<string>;

    claim(
      _proof: BytesLike[],
      _amount: BigNumberish,
      _lock: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    dao(overrides?: CallOverrides): Promise<string>;

    expiryTime(overrides?: CallOverrides): Promise<BigNumber>;

    forwardPenalty(overrides?: CallOverrides): Promise<void>;

    hasClaimed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    merkleRoot(overrides?: CallOverrides): Promise<string>;

    penaltyForwarder(overrides?: CallOverrides): Promise<string>;

    pendingPenalty(overrides?: CallOverrides): Promise<BigNumber>;

    setDao(_newDao: string, overrides?: CallOverrides): Promise<void>;

    setLocker(_newLocker: string, overrides?: CallOverrides): Promise<void>;

    setRoot(_merkleRoot: BytesLike, overrides?: CallOverrides): Promise<void>;

    startEarly(overrides?: CallOverrides): Promise<void>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawExpired(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Claimed(address,uint256,bool)"(
      addr?: null,
      amt?: null,
      locked?: null
    ): ClaimedEventFilter;
    Claimed(addr?: null, amt?: null, locked?: null): ClaimedEventFilter;

    "DaoSet(address)"(newDao?: null): DaoSetEventFilter;
    DaoSet(newDao?: null): DaoSetEventFilter;

    "ExpiredWithdrawn(uint256)"(amount?: null): ExpiredWithdrawnEventFilter;
    ExpiredWithdrawn(amount?: null): ExpiredWithdrawnEventFilter;

    "LockerSet(address)"(newLocker?: null): LockerSetEventFilter;
    LockerSet(newLocker?: null): LockerSetEventFilter;

    "PenaltyForwarded(uint256)"(amount?: null): PenaltyForwardedEventFilter;
    PenaltyForwarded(amount?: null): PenaltyForwardedEventFilter;

    "RootSet(bytes32)"(newRoot?: null): RootSetEventFilter;
    RootSet(newRoot?: null): RootSetEventFilter;

    "StartedEarly()"(): StartedEarlyEventFilter;
    StartedEarly(): StartedEarlyEventFilter;
  };

  estimateGas: {
    aura(overrides?: CallOverrides): Promise<BigNumber>;

    auraLocker(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      _proof: BytesLike[],
      _amount: BigNumberish,
      _lock: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dao(overrides?: CallOverrides): Promise<BigNumber>;

    expiryTime(overrides?: CallOverrides): Promise<BigNumber>;

    forwardPenalty(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasClaimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    merkleRoot(overrides?: CallOverrides): Promise<BigNumber>;

    penaltyForwarder(overrides?: CallOverrides): Promise<BigNumber>;

    pendingPenalty(overrides?: CallOverrides): Promise<BigNumber>;

    setDao(
      _newDao: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLocker(
      _newLocker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRoot(
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startEarly(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawExpired(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    aura(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auraLocker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      _proof: BytesLike[],
      _amount: BigNumberish,
      _lock: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dao(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    expiryTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forwardPenalty(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasClaimed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    merkleRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    penaltyForwarder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingPenalty(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDao(
      _newDao: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLocker(
      _newLocker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRoot(
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startEarly(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawExpired(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

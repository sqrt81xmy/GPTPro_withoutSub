/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ExtraRewardsDistributorInterface extends utils.Interface {
  functions: {
    "_getReward(address,address,uint256)": FunctionFragment;
    "addReward(address,uint256)": FunctionFragment;
    "addRewardToEpoch(address,uint256,uint256)": FunctionFragment;
    "auraLocker()": FunctionFragment;
    "claimableRewards(address,address)": FunctionFragment;
    "claimableRewardsAtEpoch(address,address,uint256)": FunctionFragment;
    "forfeitRewards(address,uint256)": FunctionFragment;
    "getReward(address,address,uint256)": FunctionFragment;
    "rewardData(address,uint256)": FunctionFragment;
    "rewardEpochs(address,uint256)": FunctionFragment;
    "rewardEpochsCount(address)": FunctionFragment;
    "userClaims(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_getReward",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addReward",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addRewardToEpoch",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auraLocker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimableRewards",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableRewardsAtEpoch",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forfeitRewards",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReward",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardData",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardEpochs",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardEpochsCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userClaims",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "_getReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addRewardToEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auraLocker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimableRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableRewardsAtEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forfeitRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewardData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardEpochs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardEpochsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userClaims", data: BytesLike): Result;

  events: {
    "RewardAdded(address,uint256,uint256)": EventFragment;
    "RewardForfeited(address,address,uint256)": EventFragment;
    "RewardPaid(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RewardAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardForfeited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPaid"): EventFragment;
}

export type RewardAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { token: string; epoch: BigNumber; reward: BigNumber }
>;

export type RewardAddedEventFilter = TypedEventFilter<RewardAddedEvent>;

export type RewardForfeitedEvent = TypedEvent<
  [string, string, BigNumber],
  { user: string; token: string; index: BigNumber }
>;

export type RewardForfeitedEventFilter = TypedEventFilter<RewardForfeitedEvent>;

export type RewardPaidEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { user: string; token: string; reward: BigNumber; index: BigNumber }
>;

export type RewardPaidEventFilter = TypedEventFilter<RewardPaidEvent>;

export interface ExtraRewardsDistributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ExtraRewardsDistributorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _getReward(
      _account: string,
      _token: string,
      _startIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addReward(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addRewardToEpoch(
      _token: string,
      _amount: BigNumberish,
      _epoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    auraLocker(overrides?: CallOverrides): Promise<[string]>;

    claimableRewards(
      _account: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimableRewardsAtEpoch(
      _account: string,
      _token: string,
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    forfeitRewards(
      _token: string,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "getReward(address,address,uint256)"(
      _account: string,
      _token: string,
      _startIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "getReward(address,address)"(
      _account: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardData(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardEpochs(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardEpochsCount(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userClaims(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  _getReward(
    _account: string,
    _token: string,
    _startIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addReward(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addRewardToEpoch(
    _token: string,
    _amount: BigNumberish,
    _epoch: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  auraLocker(overrides?: CallOverrides): Promise<string>;

  claimableRewards(
    _account: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimableRewardsAtEpoch(
    _account: string,
    _token: string,
    _epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  forfeitRewards(
    _token: string,
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "getReward(address,address,uint256)"(
    _account: string,
    _token: string,
    _startIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "getReward(address,address)"(
    _account: string,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardData(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardEpochs(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardEpochsCount(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userClaims(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    _getReward(
      _account: string,
      _token: string,
      _startIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addReward(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addRewardToEpoch(
      _token: string,
      _amount: BigNumberish,
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    auraLocker(overrides?: CallOverrides): Promise<string>;

    claimableRewards(
      _account: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimableRewardsAtEpoch(
      _account: string,
      _token: string,
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    forfeitRewards(
      _token: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "getReward(address,address,uint256)"(
      _account: string,
      _token: string,
      _startIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "getReward(address,address)"(
      _account: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardData(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardEpochs(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardEpochsCount(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userClaims(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "RewardAdded(address,uint256,uint256)"(
      token?: string | null,
      epoch?: BigNumberish | null,
      reward?: null
    ): RewardAddedEventFilter;
    RewardAdded(
      token?: string | null,
      epoch?: BigNumberish | null,
      reward?: null
    ): RewardAddedEventFilter;

    "RewardForfeited(address,address,uint256)"(
      user?: string | null,
      token?: string | null,
      index?: null
    ): RewardForfeitedEventFilter;
    RewardForfeited(
      user?: string | null,
      token?: string | null,
      index?: null
    ): RewardForfeitedEventFilter;

    "RewardPaid(address,address,uint256,uint256)"(
      user?: string | null,
      token?: string | null,
      reward?: null,
      index?: null
    ): RewardPaidEventFilter;
    RewardPaid(
      user?: string | null,
      token?: string | null,
      reward?: null,
      index?: null
    ): RewardPaidEventFilter;
  };

  estimateGas: {
    _getReward(
      _account: string,
      _token: string,
      _startIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addReward(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addRewardToEpoch(
      _token: string,
      _amount: BigNumberish,
      _epoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    auraLocker(overrides?: CallOverrides): Promise<BigNumber>;

    claimableRewards(
      _account: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimableRewardsAtEpoch(
      _account: string,
      _token: string,
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    forfeitRewards(
      _token: string,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "getReward(address,address,uint256)"(
      _account: string,
      _token: string,
      _startIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "getReward(address,address)"(
      _account: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardData(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardEpochs(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardEpochsCount(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userClaims(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _getReward(
      _account: string,
      _token: string,
      _startIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addReward(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addRewardToEpoch(
      _token: string,
      _amount: BigNumberish,
      _epoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    auraLocker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimableRewards(
      _account: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimableRewardsAtEpoch(
      _account: string,
      _token: string,
      _epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    forfeitRewards(
      _token: string,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "getReward(address,address,uint256)"(
      _account: string,
      _token: string,
      _startIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "getReward(address,address)"(
      _account: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardData(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardEpochs(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardEpochsCount(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userClaims(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

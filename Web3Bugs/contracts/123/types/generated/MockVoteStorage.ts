/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MockVoteStorageInterface extends utils.Interface {
  functions: {
    "hash(string)": FunctionFragment;
    "proposals(string)": FunctionFragment;
    "setProposal(uint256,uint256,string,string,string,string)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "hash", values: [string]): string;
  encodeFunctionData(functionFragment: "proposals", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setProposal",
    values: [BigNumberish, BigNumberish, string, string, string, string]
  ): string;

  decodeFunctionResult(functionFragment: "hash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProposal",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MockVoteStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockVoteStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    hash(proposal: string, overrides?: CallOverrides): Promise<[string]>;

    proposals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, string] & {
        timestamp: BigNumber;
        choice: BigNumber;
        version: string;
        space: string;
        voteType: string;
      }
    >;

    setProposal(
      choice: BigNumberish,
      timestamp: BigNumberish,
      version: string,
      proposal: string,
      space: string,
      voteType: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  hash(proposal: string, overrides?: CallOverrides): Promise<string>;

  proposals(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string, string] & {
      timestamp: BigNumber;
      choice: BigNumber;
      version: string;
      space: string;
      voteType: string;
    }
  >;

  setProposal(
    choice: BigNumberish,
    timestamp: BigNumberish,
    version: string,
    proposal: string,
    space: string,
    voteType: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    hash(proposal: string, overrides?: CallOverrides): Promise<string>;

    proposals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, string] & {
        timestamp: BigNumber;
        choice: BigNumber;
        version: string;
        space: string;
        voteType: string;
      }
    >;

    setProposal(
      choice: BigNumberish,
      timestamp: BigNumberish,
      version: string,
      proposal: string,
      space: string,
      voteType: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    hash(proposal: string, overrides?: CallOverrides): Promise<BigNumber>;

    proposals(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setProposal(
      choice: BigNumberish,
      timestamp: BigNumberish,
      version: string,
      proposal: string,
      space: string,
      voteType: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    hash(
      proposal: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setProposal(
      choice: BigNumberish,
      timestamp: BigNumberish,
      version: string,
      proposal: string,
      space: string,
      voteType: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

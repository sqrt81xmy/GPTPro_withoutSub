/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface CrvDepositorWrapperInterface extends utils.Interface {
  functions: {
    "BAL()": FunctionFragment;
    "BALANCER_POOL_TOKEN()": FunctionFragment;
    "BALANCER_VAULT()": FunctionFragment;
    "BAL_ETH_POOL_ID()": FunctionFragment;
    "WETH()": FunctionFragment;
    "crvDeposit()": FunctionFragment;
    "deposit(uint256,uint256,bool,address)": FunctionFragment;
    "getMinOut(uint256,uint256)": FunctionFragment;
    "setApprovals()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "BAL", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "BALANCER_POOL_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BALANCER_VAULT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BAL_ETH_POOL_ID",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "crvDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinOut",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovals",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "BAL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "BALANCER_POOL_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BALANCER_VAULT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BAL_ETH_POOL_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "crvDeposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMinOut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setApprovals",
    data: BytesLike
  ): Result;

  events: {};
}

export interface CrvDepositorWrapper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CrvDepositorWrapperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BAL(overrides?: CallOverrides): Promise<[string]>;

    BALANCER_POOL_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    BALANCER_VAULT(overrides?: CallOverrides): Promise<[string]>;

    BAL_ETH_POOL_ID(overrides?: CallOverrides): Promise<[string]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    crvDeposit(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      _amount: BigNumberish,
      _minOut: BigNumberish,
      _lock: boolean,
      _stakeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMinOut(
      _amount: BigNumberish,
      _outputBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setApprovals(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BAL(overrides?: CallOverrides): Promise<string>;

  BALANCER_POOL_TOKEN(overrides?: CallOverrides): Promise<string>;

  BALANCER_VAULT(overrides?: CallOverrides): Promise<string>;

  BAL_ETH_POOL_ID(overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  crvDeposit(overrides?: CallOverrides): Promise<string>;

  deposit(
    _amount: BigNumberish,
    _minOut: BigNumberish,
    _lock: boolean,
    _stakeAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMinOut(
    _amount: BigNumberish,
    _outputBps: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setApprovals(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BAL(overrides?: CallOverrides): Promise<string>;

    BALANCER_POOL_TOKEN(overrides?: CallOverrides): Promise<string>;

    BALANCER_VAULT(overrides?: CallOverrides): Promise<string>;

    BAL_ETH_POOL_ID(overrides?: CallOverrides): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    crvDeposit(overrides?: CallOverrides): Promise<string>;

    deposit(
      _amount: BigNumberish,
      _minOut: BigNumberish,
      _lock: boolean,
      _stakeAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getMinOut(
      _amount: BigNumberish,
      _outputBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setApprovals(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    BAL(overrides?: CallOverrides): Promise<BigNumber>;

    BALANCER_POOL_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    BALANCER_VAULT(overrides?: CallOverrides): Promise<BigNumber>;

    BAL_ETH_POOL_ID(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    crvDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _amount: BigNumberish,
      _minOut: BigNumberish,
      _lock: boolean,
      _stakeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMinOut(
      _amount: BigNumberish,
      _outputBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setApprovals(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BAL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BALANCER_POOL_TOKEN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BALANCER_VAULT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BAL_ETH_POOL_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crvDeposit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _amount: BigNumberish,
      _minOut: BigNumberish,
      _lock: boolean,
      _stakeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMinOut(
      _amount: BigNumberish,
      _outputBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setApprovals(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockCurveVoteEscrow,
  MockCurveVoteEscrowInterface,
} from "../MockCurveVoteEscrow";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_smart_wallet_checker",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "MAX_LEN",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "unlockTime",
        type: "uint256",
      },
    ],
    name: "create_lock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "increase_amount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "time",
        type: "uint256",
      },
    ],
    name: "increase_unlock_time",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "lockAmounts",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "lockTimes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "smart_wallet_checker",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620012fd380380620012fd833981016040819052620000349162000187565b6040805180820182526006808252654d6f636b564560d01b6020808401828152855180870190965292855284015281519192916200007591600391620000c4565b5080516200008b906004906020840190620000c4565b5050600580546001600160a01b039485166001600160a01b031991821617909155600680549390941692169190911790915550620001fc565b828054620000d290620001bf565b90600052602060002090601f016020900481019282620000f6576000855562000141565b82601f106200011157805160ff191683800117855562000141565b8280016001018555821562000141579182015b828111156200014157825182559160200191906001019062000124565b506200014f92915062000153565b5090565b5b808211156200014f576000815560010162000154565b80516001600160a01b03811681146200018257600080fd5b919050565b600080604083850312156200019b57600080fd5b620001a6836200016a565b9150620001b6602084016200016a565b90509250929050565b600181811c90821680620001d457607f821691505b60208210811415620001f657634e487b7160e01b600052602260045260246000fd5b50919050565b6110f1806200020c6000396000f3fe608060405234801561001057600080fd5b506004361061016c5760003560e01c806365fc3873116100cd578063a9059cbb11610081578063dd62ed3e11610066578063dd62ed3e146102f1578063eff7a6121461032a578063fc0c546a1461033d57600080fd5b8063a9059cbb146102c3578063dd0ce56a146102d157600080fd5b80637175d4f7116100b25780637175d4f71461027d57806395d89b41146102a8578063a457c2d7146102b057600080fd5b806365fc38731461024157806370a082311461025457600080fd5b806339509351116101245780634957677c116101095780634957677c1461020357806356c7c1b3146102165780635d0797c01461023657600080fd5b806339509351146101e65780633ccfd60b146101f957600080fd5b806318160ddd1161015557806318160ddd146101b257806323b872dd146101c4578063313ce567146101d757600080fd5b806306fdde0314610171578063095ea7b31461018f575b600080fd5b610179610350565b6040516101869190610edb565b60405180910390f35b6101a261019d366004610f4c565b6103e2565b6040519015158152602001610186565b6002545b604051908152602001610186565b6101a26101d2366004610f76565b6103f8565b60405160128152602001610186565b6101a26101f4366004610f4c565b610448565b610201610484565b005b610201610211366004610fb2565b610592565b6101b6610224366004610fcb565b60086020526000908152604090205481565b6101b66301e1338081565b61020161024f366004610fed565b610723565b6101b6610262366004610fcb565b6001600160a01b031660009081526020819052604090205490565b600554610290906001600160a01b031681565b6040516001600160a01b039091168152602001610186565b610179610968565b6101a26102be366004610f4c565b610977565b6101a26101d2366004610f4c565b6101b66102df366004610fcb565b60076020526000908152604090205481565b6101b66102ff36600461100f565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b610201610338366004610fb2565b610a28565b600654610290906001600160a01b031681565b60606003805461035f90611042565b80601f016020809104026020016040519081016040528092919081815260200182805461038b90611042565b80156103d85780601f106103ad576101008083540402835291602001916103d8565b820191906000526020600020905b8154815290600101906020018083116103bb57829003601f168201915b5050505050905090565b60006103ef338484610b91565b50600192915050565b60405162461bcd60e51b815260206004820152601160248201527f4e6f74207472616e736665727261626c6500000000000000000000000000000060448201526000906064015b60405180910390fd5b3360008181526001602090815260408083206001600160a01b038716845290915281205490916103ef91859061047f908690611093565b610b91565b3360009081526008602052604090205442116104e25760405162461bcd60e51b815260206004820152600960248201527f21756e6c6f636b65640000000000000000000000000000000000000000000000604482015260640161043f565b33600081815260208181526040808320546007835281842084905560088352818420849055600654825163a9059cbb60e01b8152600481019690965260248601829052915190946001600160a01b039092169363a9059cbb936044808501949193929183900301908290875af1158015610560573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058491906110ab565b5061058f3382610cb6565b50565b336000908152600760205260409020546105e15760405162461bcd60e51b815260206004820152601060248201526f4d75737420686176652061206c6f636b60801b604482015260640161043f565b33600090815260086020526040902054421061063f5760405162461bcd60e51b815260206004820152601460248201527f43757272656e74206c6f636b2065787069726564000000000000000000000000604482015260640161043f565b600081116106795760405162461bcd60e51b815260206004820152600760248201526608585b5bdd5b9d60ca1b604482015260640161043f565b3360009081526007602052604081208054839290610698908490611093565b90915550506006546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156106f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071891906110ab565b5061058f3382610dfc565b600554604051631846d2f560e31b81523360048201526001600160a01b039091169063c23697a890602401602060405180830381865afa15801561076b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078f91906110ab565b6107db5760405162461bcd60e51b815260206004820152600a60248201527f21636f6e74726163747300000000000000000000000000000000000000000000604482015260640161043f565b33600090815260076020526040902054156108385760405162461bcd60e51b815260206004820152601960248201527f5769746864726177206f6c6420746f6b656e7320666972737400000000000000604482015260640161043f565b6108466301e1338042611093565b81106108845760405162461bcd60e51b815260206004820152600d60248201526c4c6f636b20746f6f206c6f6e6760981b604482015260640161043f565b600082116108be5760405162461bcd60e51b815260206004820152600760248201526608585b5bdd5b9d60ca1b604482015260640161043f565b33600081815260076020908152604080832086905560089091529081902083905560065490516323b872dd60e01b81526004810192909252306024830152604482018490526001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610935573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095991906110ab565b506109643383610dfc565b5050565b60606004805461035f90611042565b3360009081526001602090815260408083206001600160a01b038616845290915281205482811015610a115760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f000000000000000000000000000000000000000000000000000000606482015260840161043f565b610a1e3385858403610b91565b5060019392505050565b33600090815260076020526040902054610a775760405162461bcd60e51b815260206004820152601060248201526f4d75737420686176652061206c6f636b60801b604482015260640161043f565b336000908152600860205260409020544210610ad55760405162461bcd60e51b815260206004820152601460248201527f43757272656e74206c6f636b2065787069726564000000000000000000000000604482015260640161043f565b336000908152600860205260409020548111610b335760405162461bcd60e51b815260206004820152601b60248201527f4675747572652074696d65206d75737420626520677265617465720000000000604482015260640161043f565b610b416301e1338042611093565b8110610b7f5760405162461bcd60e51b815260206004820152600d60248201526c4c6f636b20746f6f206c6f6e6760981b604482015260640161043f565b33600090815260086020526040902055565b6001600160a01b038316610bf35760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161043f565b6001600160a01b038216610c545760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161043f565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038216610d165760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161043f565b6001600160a01b03821660009081526020819052604090205481811015610d8a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161043f565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610db99084906110cd565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610ca9565b6001600160a01b038216610e525760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161043f565b8060026000828254610e649190611093565b90915550506001600160a01b03821660009081526020819052604081208054839290610e91908490611093565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600060208083528351808285015260005b81811015610f0857858101830151858201604001528201610eec565b81811115610f1a576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610f4757600080fd5b919050565b60008060408385031215610f5f57600080fd5b610f6883610f30565b946020939093013593505050565b600080600060608486031215610f8b57600080fd5b610f9484610f30565b9250610fa260208501610f30565b9150604084013590509250925092565b600060208284031215610fc457600080fd5b5035919050565b600060208284031215610fdd57600080fd5b610fe682610f30565b9392505050565b6000806040838503121561100057600080fd5b50508035926020909101359150565b6000806040838503121561102257600080fd5b61102b83610f30565b915061103960208401610f30565b90509250929050565b600181811c9082168061105657607f821691505b6020821081141561107757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156110a6576110a661107d565b500190565b6000602082840312156110bd57600080fd5b81518015158114610fe657600080fd5b6000828210156110df576110df61107d565b50039056fea164736f6c634300080b000a";

type MockCurveVoteEscrowConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockCurveVoteEscrowConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockCurveVoteEscrow__factory extends ContractFactory {
  constructor(...args: MockCurveVoteEscrowConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _smart_wallet_checker: string,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockCurveVoteEscrow> {
    return super.deploy(
      _smart_wallet_checker,
      _token,
      overrides || {}
    ) as Promise<MockCurveVoteEscrow>;
  }
  getDeployTransaction(
    _smart_wallet_checker: string,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _smart_wallet_checker,
      _token,
      overrides || {}
    );
  }
  attach(address: string): MockCurveVoteEscrow {
    return super.attach(address) as MockCurveVoteEscrow;
  }
  connect(signer: Signer): MockCurveVoteEscrow__factory {
    return super.connect(signer) as MockCurveVoteEscrow__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockCurveVoteEscrowInterface {
    return new utils.Interface(_abi) as MockCurveVoteEscrowInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockCurveVoteEscrow {
    return new Contract(address, _abi, signerOrProvider) as MockCurveVoteEscrow;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockCurveMinter,
  MockCurveMinterInterface,
} from "../MockCurveMinter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_crv",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_rate",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "crv",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "rate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161027438038061027483398101604081905261002f91610045565b6001600160a01b0390911660805260005561007f565b6000806040838503121561005857600080fd5b82516001600160a01b038116811461006f57600080fd5b6020939093015192949293505050565b6080516101d561009f600039600081816067015260e301526101d56000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632c4e722e146100465780636a4874a1146100625780636a627842146100ae575b600080fd5b61004f60005481565b6040519081526020015b60405180910390f35b6100897f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610059565b6100c16100bc366004610169565b6100c3565b005b60005460405163a9059cbb60e01b815233600482015260248101919091527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a9059cbb906044016020604051808303816000875af1158015610141573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061016591906101a6565b5050565b60006020828403121561017b57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461019f57600080fd5b9392505050565b6000602082840312156101b857600080fd5b8151801515811461019f57600080fdfea164736f6c634300080b000a";

type MockCurveMinterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockCurveMinterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockCurveMinter__factory extends ContractFactory {
  constructor(...args: MockCurveMinterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _crv: string,
    _rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockCurveMinter> {
    return super.deploy(
      _crv,
      _rate,
      overrides || {}
    ) as Promise<MockCurveMinter>;
  }
  getDeployTransaction(
    _crv: string,
    _rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_crv, _rate, overrides || {});
  }
  attach(address: string): MockCurveMinter {
    return super.attach(address) as MockCurveMinter;
  }
  connect(signer: Signer): MockCurveMinter__factory {
    return super.connect(signer) as MockCurveMinter__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockCurveMinterInterface {
    return new utils.Interface(_abi) as MockCurveMinterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockCurveMinter {
    return new Contract(address, _abi, signerOrProvider) as MockCurveMinter;
  }
}

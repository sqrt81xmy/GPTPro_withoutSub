/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockVoteStorage,
  MockVoteStorageInterface,
} from "../MockVoteStorage";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "proposal",
        type: "string",
      },
    ],
    name: "hash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "proposals",
    outputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "choice",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "version",
        type: "string",
      },
      {
        internalType: "string",
        name: "space",
        type: "string",
      },
      {
        internalType: "string",
        name: "voteType",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "choice",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "version",
        type: "string",
      },
      {
        internalType: "string",
        name: "proposal",
        type: "string",
      },
      {
        internalType: "string",
        name: "space",
        type: "string",
      },
      {
        internalType: "string",
        name: "voteType",
        type: "string",
      },
    ],
    name: "setProposal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610dff806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063b411ee9414610046578063c816d3071461006c578063ffa0d2a414610081575b600080fd5b610059610054366004610875565b6100a5565b6040519081526020015b60405180910390f35b61007f61007a3660046108b2565b6102f9565b005b61009461008f366004610875565b6103b7565b6040516100639594939291906109cd565b6000806000836040516100b89190610a3a565b90815260200160405180910390206040518060a001604052908160008201548152602001600182015481526020016002820180546100f590610a56565b80601f016020809104026020016040519081016040528092919081815260200182805461012190610a56565b801561016e5780601f106101435761010080835404028352916020019161016e565b820191906000526020600020905b81548152906001019060200180831161015157829003601f168201915b5050505050815260200160038201805461018790610a56565b80601f01602080910402602001604051908101604052809291908181526020018280546101b390610a56565b80156102005780601f106101d557610100808354040283529160200191610200565b820191906000526020600020905b8154815290600101906020018083116101e357829003601f168201915b5050505050815260200160048201805461021990610a56565b80601f016020809104026020016040519081016040528092919081815260200182805461024590610a56565b80156102925780601f1061026757610100808354040283529160200191610292565b820191906000526020600020905b81548152906001019060200180831161027557829003601f168201915b50505050508152505090506102f281604001516102b28360000151610589565b836060015184608001516102ca8887602001516106ca565b6040516020016102de959493929190610a91565b6040516020818303038152906040526106fe565b9392505050565b60006040518060a00160405280878152602001888152602001868152602001848152602001838152509050806000856040516103359190610a3a565b908152602001604051809103902060008201518160000155602082015181600101556040820151816002019080519060200190610373929190610739565b506060820151805161038f916003840191602090910190610739565b50608082015180516103ab916004840191602090910190610739565b50505050505050505050565b8051602081830181018051600082529282019190930120915280546001820154600283018054929391926103ea90610a56565b80601f016020809104026020016040519081016040528092919081815260200182805461041690610a56565b80156104635780601f1061043857610100808354040283529160200191610463565b820191906000526020600020905b81548152906001019060200180831161044657829003601f168201915b50505050509080600301805461047890610a56565b80601f01602080910402602001604051908101604052809291908181526020018280546104a490610a56565b80156104f15780601f106104c6576101008083540402835291602001916104f1565b820191906000526020600020905b8154815290600101906020018083116104d457829003601f168201915b50505050509080600401805461050690610a56565b80601f016020809104026020016040519081016040528092919081815260200182805461053290610a56565b801561057f5780601f106105545761010080835404028352916020019161057f565b820191906000526020600020905b81548152906001019060200180831161056257829003601f168201915b5050505050905085565b6060816105ad5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156105d757806105c181610be1565b91506105d09050600a83610bfc565b91506105b1565b60008167ffffffffffffffff8111156105f2576105f26107d2565b6040519080825280601f01601f19166020018201604052801561061c576020820181803683370190505b509050815b85156106c157610632600182610c1e565b90506000610641600a88610bfc565b61064c90600a610c35565b6106569088610c1e565b610661906030610c54565b905060008160f81b90508084848151811061067e5761067e610c79565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506106b8600a89610bfc565b97505050610621565b50949350505050565b6060826106d683610589565b6040516020016106e7929190610c8f565b604051602081830303815290604052905092915050565b600061070a8251610589565b8260405160200161071c929190610d97565b604051602081830303815290604052805190602001209050919050565b82805461074590610a56565b90600052602060002090601f01602090048101928261076757600085556107ad565b82601f1061078057805160ff19168380011785556107ad565b828001600101855582156107ad579182015b828111156107ad578251825591602001919060010190610792565b506107b99291506107bd565b5090565b5b808211156107b957600081556001016107be565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126107f957600080fd5b813567ffffffffffffffff80821115610814576108146107d2565b604051601f8301601f19908116603f0116810190828211818310171561083c5761083c6107d2565b8160405283815286602085880101111561085557600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561088757600080fd5b813567ffffffffffffffff81111561089e57600080fd5b6108aa848285016107e8565b949350505050565b60008060008060008060c087890312156108cb57600080fd5b8635955060208701359450604087013567ffffffffffffffff808211156108f157600080fd5b6108fd8a838b016107e8565b9550606089013591508082111561091357600080fd5b61091f8a838b016107e8565b9450608089013591508082111561093557600080fd5b6109418a838b016107e8565b935060a089013591508082111561095757600080fd5b5061096489828a016107e8565b9150509295509295509295565b60005b8381101561098c578181015183820152602001610974565b8381111561099b576000848401525b50505050565b600081518084526109b9816020860160208601610971565b601f01601f19169290920160200192915050565b85815284602082015260a0604082015260006109ec60a08301866109a1565b82810360608401526109fe81866109a1565b90508281036080840152610a1281856109a1565b98975050505050505050565b60008151610a30818560208601610971565b9290920192915050565b60008251610a4c818460208701610971565b9190910192915050565b600181811c90821680610a6a57607f821691505b60208210811415610a8b57634e487b7160e01b600052602260045260246000fd5b50919050565b607b60f81b81527f2276657273696f6e223a22000000000000000000000000000000000000000000600182015260008651610ad381600c850160208b01610971565b61088b60f21b600c9184019182018190527f2274696d657374616d70223a2200000000000000000000000000000000000000600e8301528751610b1d81601b850160208c01610971565b601b92019182018190527f227370616365223a220000000000000000000000000000000000000000000000601d8301528651610b60816026850160208b01610971565b6026920191820152610a12610bbe610bb8610baa610ba4602886017f2274797065223a22000000000000000000000000000000000000000000000000815260080190565b89610a1e565b61088b60f21b815260020190565b86610a1e565b607d60f81b815260010190565b634e487b7160e01b600052601160045260246000fd5b6000600019821415610bf557610bf5610bcb565b5060010190565b600082610c1957634e487b7160e01b600052601260045260246000fd5b500490565b600082821015610c3057610c30610bcb565b500390565b6000816000190483118215151615610c4f57610c4f610bcb565b500290565b600060ff821660ff84168060ff03821115610c7157610c71610bcb565b019392505050565b634e487b7160e01b600052603260045260246000fd5b7f227061796c6f6164223a000000000000000000000000000000000000000000008152607b60f81b600a8201527f2270726f706f73616c223a000000000000000000000000000000000000000000600b820152601160f91b60168201528251600090610d02816017850160208801610971565b61088b60f21b6017918401918201527f2263686f696365223a000000000000000000000000000000000000000000000060198201528351610d4a816022840160208801610971565b7f2c226d65746164617461223a00000000000000000000000000000000000000006022929091019182015263113dbe9160e11b602e820152607d60f81b6032820152603301949350505050565b7f19457468657265756d205369676e6564204d6573736167653a0a000000000000815260008351610dcf81601a850160208801610971565b835190830190610de681601a840160208801610971565b01601a0194935050505056fea164736f6c634300080b000a";

type MockVoteStorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockVoteStorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockVoteStorage__factory extends ContractFactory {
  constructor(...args: MockVoteStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockVoteStorage> {
    return super.deploy(overrides || {}) as Promise<MockVoteStorage>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockVoteStorage {
    return super.attach(address) as MockVoteStorage;
  }
  connect(signer: Signer): MockVoteStorage__factory {
    return super.connect(signer) as MockVoteStorage__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockVoteStorageInterface {
    return new utils.Interface(_abi) as MockVoteStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockVoteStorage {
    return new Contract(address, _abi, signerOrProvider) as MockVoteStorage;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockWalletChecker,
  MockWalletCheckerInterface,
} from "../MockWalletChecker";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "wallet",
        type: "address",
      },
    ],
    name: "approveWallet",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "wallet",
        type: "address",
      },
    ],
    name: "check",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "wallets",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610141806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630fcb0ae51461004657806389b08f1114610087578063c23697a8146100be575b600080fd5b6100856100543660046100f7565b73ffffffffffffffffffffffffffffffffffffffff166000908152602081905260409020805460ff19166001179055565b005b6100aa6100953660046100f7565b60006020819052908152604090205460ff1681565b604051901515815260200160405180910390f35b6100aa6100cc3660046100f7565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205460ff1690565b60006020828403121561010957600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461012d57600080fd5b939250505056fea164736f6c634300080b000a";

type MockWalletCheckerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockWalletCheckerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockWalletChecker__factory extends ContractFactory {
  constructor(...args: MockWalletCheckerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockWalletChecker> {
    return super.deploy(overrides || {}) as Promise<MockWalletChecker>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockWalletChecker {
    return super.attach(address) as MockWalletChecker;
  }
  connect(signer: Signer): MockWalletChecker__factory {
    return super.connect(signer) as MockWalletChecker__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockWalletCheckerInterface {
    return new utils.Interface(_abi) as MockWalletCheckerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockWalletChecker {
    return new Contract(address, _abi, signerOrProvider) as MockWalletChecker;
  }
}

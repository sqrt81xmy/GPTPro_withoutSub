/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  BalLiquidityProvider,
  BalLiquidityProviderInterface,
} from "../BalLiquidityProvider";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_startToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_pairToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_minPairAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_dao",
        type: "address",
      },
      {
        internalType: "address",
        name: "_bVault",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256[]",
        name: "input",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "output",
        type: "uint256",
      },
    ],
    name: "LiquidityProvided",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "oldMinPairAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newMinPairAmount",
        type: "uint256",
      },
    ],
    name: "MinPairAmountChanged",
    type: "event",
  },
  {
    inputs: [],
    name: "bVault",
    outputs: [
      {
        internalType: "contract IVault",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_newAmount",
        type: "uint256",
      },
    ],
    name: "changeMinPairAmount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "dao",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "minPairAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pairToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_poolId",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "contract IAsset[]",
            name: "assets",
            type: "address[]",
          },
          {
            internalType: "uint256[]",
            name: "maxAmountsIn",
            type: "uint256[]",
          },
          {
            internalType: "bytes",
            name: "userData",
            type: "bytes",
          },
          {
            internalType: "bool",
            name: "fromInternalBalance",
            type: "bool",
          },
        ],
        internalType: "struct IVault.JoinPoolRequest",
        name: "_request",
        type: "tuple",
      },
    ],
    name: "provideLiquidity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_erc20",
        type: "address",
      },
    ],
    name: "rescueToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "startToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "";

type BalLiquidityProviderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BalLiquidityProviderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BalLiquidityProvider__factory extends ContractFactory {
  constructor(...args: BalLiquidityProviderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _startToken: string,
    _pairToken: string,
    _minPairAmount: BigNumberish,
    _dao: string,
    _bVault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BalLiquidityProvider> {
    return super.deploy(
      _startToken,
      _pairToken,
      _minPairAmount,
      _dao,
      _bVault,
      overrides || {}
    ) as Promise<BalLiquidityProvider>;
  }
  getDeployTransaction(
    _startToken: string,
    _pairToken: string,
    _minPairAmount: BigNumberish,
    _dao: string,
    _bVault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _startToken,
      _pairToken,
      _minPairAmount,
      _dao,
      _bVault,
      overrides || {}
    );
  }
  attach(address: string): BalLiquidityProvider {
    return super.attach(address) as BalLiquidityProvider;
  }
  connect(signer: Signer): BalLiquidityProvider__factory {
    return super.connect(signer) as BalLiquidityProvider__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BalLiquidityProviderInterface {
    return new utils.Interface(_abi) as BalLiquidityProviderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BalLiquidityProvider {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as BalLiquidityProvider;
  }
}

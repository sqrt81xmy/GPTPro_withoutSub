/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type JoinPoolRequestStruct = {
  assets: string[];
  maxAmountsIn: BigNumberish[];
  userData: BytesLike;
  fromInternalBalance: boolean;
};

export type JoinPoolRequestStructOutput = [
  string[],
  BigNumber[],
  string,
  boolean
] & {
  assets: string[];
  maxAmountsIn: BigNumber[];
  userData: string;
  fromInternalBalance: boolean;
};

export interface BalLiquidityProviderInterface extends utils.Interface {
  functions: {
    "bVault()": FunctionFragment;
    "changeMinPairAmount(uint256)": FunctionFragment;
    "dao()": FunctionFragment;
    "minPairAmount()": FunctionFragment;
    "pairToken()": FunctionFragment;
    "provideLiquidity(bytes32,(address[],uint256[],bytes,bool))": FunctionFragment;
    "rescueToken(address)": FunctionFragment;
    "startToken()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "bVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeMinPairAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "dao", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minPairAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pairToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "provideLiquidity",
    values: [BytesLike, JoinPoolRequestStruct]
  ): string;
  encodeFunctionData(functionFragment: "rescueToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "startToken",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "bVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeMinPairAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dao", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minPairAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pairToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "provideLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startToken", data: BytesLike): Result;

  events: {
    "LiquidityProvided(uint256[],uint256)": EventFragment;
    "MinPairAmountChanged(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LiquidityProvided"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinPairAmountChanged"): EventFragment;
}

export type LiquidityProvidedEvent = TypedEvent<
  [BigNumber[], BigNumber],
  { input: BigNumber[]; output: BigNumber }
>;

export type LiquidityProvidedEventFilter =
  TypedEventFilter<LiquidityProvidedEvent>;

export type MinPairAmountChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { oldMinPairAmount: BigNumber; newMinPairAmount: BigNumber }
>;

export type MinPairAmountChangedEventFilter =
  TypedEventFilter<MinPairAmountChangedEvent>;

export interface BalLiquidityProvider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BalLiquidityProviderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bVault(overrides?: CallOverrides): Promise<[string]>;

    changeMinPairAmount(
      _newAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dao(overrides?: CallOverrides): Promise<[string]>;

    minPairAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    pairToken(overrides?: CallOverrides): Promise<[string]>;

    provideLiquidity(
      _poolId: BytesLike,
      _request: JoinPoolRequestStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rescueToken(
      _erc20: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startToken(overrides?: CallOverrides): Promise<[string]>;
  };

  bVault(overrides?: CallOverrides): Promise<string>;

  changeMinPairAmount(
    _newAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dao(overrides?: CallOverrides): Promise<string>;

  minPairAmount(overrides?: CallOverrides): Promise<BigNumber>;

  pairToken(overrides?: CallOverrides): Promise<string>;

  provideLiquidity(
    _poolId: BytesLike,
    _request: JoinPoolRequestStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rescueToken(
    _erc20: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    bVault(overrides?: CallOverrides): Promise<string>;

    changeMinPairAmount(
      _newAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    dao(overrides?: CallOverrides): Promise<string>;

    minPairAmount(overrides?: CallOverrides): Promise<BigNumber>;

    pairToken(overrides?: CallOverrides): Promise<string>;

    provideLiquidity(
      _poolId: BytesLike,
      _request: JoinPoolRequestStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    rescueToken(_erc20: string, overrides?: CallOverrides): Promise<void>;

    startToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "LiquidityProvided(uint256[],uint256)"(
      input?: null,
      output?: null
    ): LiquidityProvidedEventFilter;
    LiquidityProvided(
      input?: null,
      output?: null
    ): LiquidityProvidedEventFilter;

    "MinPairAmountChanged(uint256,uint256)"(
      oldMinPairAmount?: null,
      newMinPairAmount?: null
    ): MinPairAmountChangedEventFilter;
    MinPairAmountChanged(
      oldMinPairAmount?: null,
      newMinPairAmount?: null
    ): MinPairAmountChangedEventFilter;
  };

  estimateGas: {
    bVault(overrides?: CallOverrides): Promise<BigNumber>;

    changeMinPairAmount(
      _newAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dao(overrides?: CallOverrides): Promise<BigNumber>;

    minPairAmount(overrides?: CallOverrides): Promise<BigNumber>;

    pairToken(overrides?: CallOverrides): Promise<BigNumber>;

    provideLiquidity(
      _poolId: BytesLike,
      _request: JoinPoolRequestStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rescueToken(
      _erc20: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    bVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeMinPairAmount(
      _newAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dao(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minPairAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    provideLiquidity(
      _poolId: BytesLike,
      _request: JoinPoolRequestStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rescueToken(
      _erc20: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

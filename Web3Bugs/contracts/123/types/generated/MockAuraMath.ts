/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MockAuraMathInterface extends utils.Interface {
  functions: {
    "AuraMath112_add(uint112,uint112)": FunctionFragment;
    "AuraMath112_sub(uint112,uint112)": FunctionFragment;
    "AuraMath224_add(uint224,uint224)": FunctionFragment;
    "AuraMath32_sub(uint32,uint32)": FunctionFragment;
    "AuraMath_add(uint256,uint256)": FunctionFragment;
    "AuraMath_average(uint256,uint256)": FunctionFragment;
    "AuraMath_div(uint256,uint256)": FunctionFragment;
    "AuraMath_min(uint256,uint256)": FunctionFragment;
    "AuraMath_mul(uint256,uint256)": FunctionFragment;
    "AuraMath_sub(uint256,uint256)": FunctionFragment;
    "AuraMath_to112(uint256)": FunctionFragment;
    "AuraMath_to128(uint256)": FunctionFragment;
    "AuraMath_to224(uint256)": FunctionFragment;
    "AuraMath_to32(uint256)": FunctionFragment;
    "AuraMath_to96(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "AuraMath112_add",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "AuraMath112_sub",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "AuraMath224_add",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "AuraMath32_sub",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "AuraMath_add",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "AuraMath_average",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "AuraMath_div",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "AuraMath_min",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "AuraMath_mul",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "AuraMath_sub",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "AuraMath_to112",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "AuraMath_to128",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "AuraMath_to224",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "AuraMath_to32",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "AuraMath_to96",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "AuraMath112_add",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AuraMath112_sub",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AuraMath224_add",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AuraMath32_sub",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AuraMath_add",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AuraMath_average",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AuraMath_div",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AuraMath_min",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AuraMath_mul",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AuraMath_sub",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AuraMath_to112",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AuraMath_to128",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AuraMath_to224",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AuraMath_to32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AuraMath_to96",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MockAuraMath extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockAuraMathInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AuraMath112_add(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    AuraMath112_sub(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    AuraMath224_add(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    AuraMath32_sub(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    AuraMath_add(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    AuraMath_average(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    AuraMath_div(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    AuraMath_min(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    AuraMath_mul(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    AuraMath_sub(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    AuraMath_to112(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    AuraMath_to128(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    AuraMath_to224(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    AuraMath_to32(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    AuraMath_to96(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  AuraMath112_add(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  AuraMath112_sub(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  AuraMath224_add(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  AuraMath32_sub(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  AuraMath_add(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  AuraMath_average(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  AuraMath_div(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  AuraMath_min(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  AuraMath_mul(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  AuraMath_sub(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  AuraMath_to112(
    a: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  AuraMath_to128(
    a: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  AuraMath_to224(
    a: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  AuraMath_to32(a: BigNumberish, overrides?: CallOverrides): Promise<number>;

  AuraMath_to96(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    AuraMath112_add(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    AuraMath112_sub(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    AuraMath224_add(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    AuraMath32_sub(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    AuraMath_add(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    AuraMath_average(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    AuraMath_div(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    AuraMath_min(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    AuraMath_mul(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    AuraMath_sub(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    AuraMath_to112(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    AuraMath_to128(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    AuraMath_to224(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    AuraMath_to32(a: BigNumberish, overrides?: CallOverrides): Promise<number>;

    AuraMath_to96(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    AuraMath112_add(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    AuraMath112_sub(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    AuraMath224_add(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    AuraMath32_sub(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    AuraMath_add(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    AuraMath_average(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    AuraMath_div(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    AuraMath_min(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    AuraMath_mul(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    AuraMath_sub(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    AuraMath_to112(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    AuraMath_to128(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    AuraMath_to224(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    AuraMath_to32(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    AuraMath_to96(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AuraMath112_add(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AuraMath112_sub(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AuraMath224_add(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AuraMath32_sub(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AuraMath_add(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AuraMath_average(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AuraMath_div(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AuraMath_min(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AuraMath_mul(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AuraMath_sub(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AuraMath_to112(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AuraMath_to128(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AuraMath_to224(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AuraMath_to32(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AuraMath_to96(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

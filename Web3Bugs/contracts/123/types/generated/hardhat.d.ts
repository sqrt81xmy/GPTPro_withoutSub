/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "AuraToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AuraToken__factory>;
    getContractFactory(
      name: "IStaker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStaker__factory>;
    getContractFactory(
      name: "AuraBalRewardPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AuraBalRewardPool__factory>;
    getContractFactory(
      name: "AuraClaimZap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AuraClaimZap__factory>;
    getContractFactory(
      name: "IBasicRewards",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBasicRewards__factory>;
    getContractFactory(
      name: "AuraLocker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AuraLocker__factory>;
    getContractFactory(
      name: "IRewardStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRewardStaking__factory>;
    getContractFactory(
      name: "AuraMerkleDrop",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AuraMerkleDrop__factory>;
    getContractFactory(
      name: "AuraMinter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AuraMinter__factory>;
    getContractFactory(
      name: "AuraPenaltyForwarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AuraPenaltyForwarder__factory>;
    getContractFactory(
      name: "AuraStakingProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AuraStakingProxy__factory>;
    getContractFactory(
      name: "AuraVestedEscrow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AuraVestedEscrow__factory>;
    getContractFactory(
      name: "BalLiquidityProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BalLiquidityProvider__factory>;
    getContractFactory(
      name: "ClaimFeesHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClaimFeesHelper__factory>;
    getContractFactory(
      name: "IBooster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBooster__factory>;
    getContractFactory(
      name: "BalInvestor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BalInvestor__factory>;
    getContractFactory(
      name: "CrvDepositorWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrvDepositorWrapper__factory>;
    getContractFactory(
      name: "ICrvDepositor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICrvDepositor__factory>;
    getContractFactory(
      name: "ExtraRewardsDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExtraRewardsDistributor__factory>;
    getContractFactory(
      name: "IAuraLocker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAuraLocker__factory>;
    getContractFactory(
      name: "ICrvDepositorWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICrvDepositorWrapper__factory>;
    getContractFactory(
      name: "IExtraRewardsDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExtraRewardsDistributor__factory>;
    getContractFactory(
      name: "IPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPriceOracle__factory>;
    getContractFactory(
      name: "IVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVault__factory>;
    getContractFactory(
      name: "IBalancerPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBalancerPool__factory>;
    getContractFactory(
      name: "MockBalancerPoolToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockBalancerPoolToken__factory>;
    getContractFactory(
      name: "IBalancerVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBalancerVault__factory>;
    getContractFactory(
      name: "MockBalancerVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockBalancerVault__factory>;
    getContractFactory(
      name: "IFeeDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFeeDistributor__factory>;
    getContractFactory(
      name: "MockFeeDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockFeeDistributor__factory>;
    getContractFactory(
      name: "IInvestmentPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInvestmentPool__factory>;
    getContractFactory(
      name: "IInvestmentPoolFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInvestmentPoolFactory__factory>;
    getContractFactory(
      name: "IStablePoolFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStablePoolFactory__factory>;
    getContractFactory(
      name: "IWeightedPool2TokensFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWeightedPool2TokensFactory__factory>;
    getContractFactory(
      name: "MockCurveGauge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockCurveGauge__factory>;
    getContractFactory(
      name: "IMinter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMinter__factory>;
    getContractFactory(
      name: "MockCurveMinter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockCurveMinter__factory>;
    getContractFactory(
      name: "MockCurveVoteEscrow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockCurveVoteEscrow__factory>;
    getContractFactory(
      name: "MockERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockERC20__factory>;
    getContractFactory(
      name: "MockVoting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockVoting__factory>;
    getContractFactory(
      name: "MockWalletChecker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockWalletChecker__factory>;
    getContractFactory(
      name: "MockAuraMath",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockAuraMath__factory>;
    getContractFactory(
      name: "MockBalInvestor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockBalInvestor__factory>;
    getContractFactory(
      name: "MockVoteStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockVoteStorage__factory>;

    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "AuraToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AuraToken>;
    getContractAt(
      name: "IStaker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStaker>;
    getContractAt(
      name: "AuraBalRewardPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AuraBalRewardPool>;
    getContractAt(
      name: "AuraClaimZap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AuraClaimZap>;
    getContractAt(
      name: "IBasicRewards",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBasicRewards>;
    getContractAt(
      name: "AuraLocker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AuraLocker>;
    getContractAt(
      name: "IRewardStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRewardStaking>;
    getContractAt(
      name: "AuraMerkleDrop",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AuraMerkleDrop>;
    getContractAt(
      name: "AuraMinter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AuraMinter>;
    getContractAt(
      name: "AuraPenaltyForwarder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AuraPenaltyForwarder>;
    getContractAt(
      name: "AuraStakingProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AuraStakingProxy>;
    getContractAt(
      name: "AuraVestedEscrow",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AuraVestedEscrow>;
    getContractAt(
      name: "BalLiquidityProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BalLiquidityProvider>;
    getContractAt(
      name: "ClaimFeesHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ClaimFeesHelper>;
    getContractAt(
      name: "IBooster",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBooster>;
    getContractAt(
      name: "BalInvestor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BalInvestor>;
    getContractAt(
      name: "CrvDepositorWrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CrvDepositorWrapper>;
    getContractAt(
      name: "ICrvDepositor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICrvDepositor>;
    getContractAt(
      name: "ExtraRewardsDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExtraRewardsDistributor>;
    getContractAt(
      name: "IAuraLocker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAuraLocker>;
    getContractAt(
      name: "ICrvDepositorWrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICrvDepositorWrapper>;
    getContractAt(
      name: "IExtraRewardsDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IExtraRewardsDistributor>;
    getContractAt(
      name: "IPriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPriceOracle>;
    getContractAt(
      name: "IVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVault>;
    getContractAt(
      name: "IBalancerPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBalancerPool>;
    getContractAt(
      name: "MockBalancerPoolToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockBalancerPoolToken>;
    getContractAt(
      name: "IBalancerVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBalancerVault>;
    getContractAt(
      name: "MockBalancerVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockBalancerVault>;
    getContractAt(
      name: "IFeeDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFeeDistributor>;
    getContractAt(
      name: "MockFeeDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockFeeDistributor>;
    getContractAt(
      name: "IInvestmentPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInvestmentPool>;
    getContractAt(
      name: "IInvestmentPoolFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInvestmentPoolFactory>;
    getContractAt(
      name: "IStablePoolFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStablePoolFactory>;
    getContractAt(
      name: "IWeightedPool2TokensFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWeightedPool2TokensFactory>;
    getContractAt(
      name: "MockCurveGauge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockCurveGauge>;
    getContractAt(
      name: "IMinter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMinter>;
    getContractAt(
      name: "MockCurveMinter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockCurveMinter>;
    getContractAt(
      name: "MockCurveVoteEscrow",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockCurveVoteEscrow>;
    getContractAt(
      name: "MockERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockERC20>;
    getContractAt(
      name: "MockVoting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockVoting>;
    getContractAt(
      name: "MockWalletChecker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockWalletChecker>;
    getContractAt(
      name: "MockAuraMath",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockAuraMath>;
    getContractAt(
      name: "MockBalInvestor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockBalInvestor>;
    getContractAt(
      name: "MockVoteStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockVoteStorage>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}

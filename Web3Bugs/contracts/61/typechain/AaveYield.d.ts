/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface AaveYieldInterface extends ethers.utils.Interface {
  functions: {
    "emergencyWithdraw(address,address)": FunctionFragment;
    "getSharesForTokens(uint256,address)": FunctionFragment;
    "getTokensForShares(uint256,address)": FunctionFragment;
    "initialize(address,address,address,address,address)": FunctionFragment;
    "lendingPoolAddressesProvider()": FunctionFragment;
    "liquidityToken(address)": FunctionFragment;
    "lockTokens(address,address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "protocolDataProvider()": FunctionFragment;
    "referralCode()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "savingsAccount()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlockShares(address,uint256)": FunctionFragment;
    "unlockTokens(address,uint256)": FunctionFragment;
    "updateAaveAddresses(address,address,address)": FunctionFragment;
    "updateReferralCode(uint16)": FunctionFragment;
    "updateSavingsAccount(address)": FunctionFragment;
    "wethGateway()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSharesForTokens",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensForShares",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lendingPoolAddressesProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockTokens",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolDataProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referralCode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "savingsAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockShares",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockTokens",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAaveAddresses",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReferralCode",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSavingsAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "wethGateway",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSharesForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensForShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lendingPoolAddressesProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolDataProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "savingsAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAaveAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReferralCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSavingsAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wethGateway",
    data: BytesLike
  ): Result;

  events: {
    "AaveAddressesUpdated(address,address,address)": EventFragment;
    "LockedTokens(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ReferralCodeUpdated(uint16)": EventFragment;
    "SavingsAccountUpdated(address)": EventFragment;
    "UnlockedShares(address,uint256)": EventFragment;
    "UnlockedTokens(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AaveAddressesUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockedTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferralCodeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SavingsAccountUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnlockedShares"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnlockedTokens"): EventFragment;
}

export class AaveYield extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AaveYieldInterface;

  functions: {
    emergencyWithdraw(
      _asset: string,
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "emergencyWithdraw(address,address)"(
      _asset: string,
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getSharesForTokens(
      amount: BigNumberish,
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { shares: BigNumber }>;

    "getSharesForTokens(uint256,address)"(
      amount: BigNumberish,
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { shares: BigNumber }>;

    getTokensForShares(
      shares: BigNumberish,
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    "getTokensForShares(uint256,address)"(
      shares: BigNumberish,
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    initialize(
      _owner: string,
      _savingsAccount: string,
      _wethGateway: string,
      _protocolDataProvider: string,
      _lendingPoolAddressesProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address,address,address,address,address)"(
      _owner: string,
      _savingsAccount: string,
      _wethGateway: string,
      _protocolDataProvider: string,
      _lendingPoolAddressesProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lendingPoolAddressesProvider(overrides?: CallOverrides): Promise<[string]>;

    "lendingPoolAddressesProvider()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    liquidityToken(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[string] & { aToken: string }>;

    "liquidityToken(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[string] & { aToken: string }>;

    lockTokens(
      user: string,
      asset: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lockTokens(address,address,uint256)"(
      user: string,
      asset: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    protocolDataProvider(overrides?: CallOverrides): Promise<[string]>;

    "protocolDataProvider()"(overrides?: CallOverrides): Promise<[string]>;

    referralCode(overrides?: CallOverrides): Promise<[number]>;

    "referralCode()"(overrides?: CallOverrides): Promise<[number]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    savingsAccount(overrides?: CallOverrides): Promise<[string]>;

    "savingsAccount()"(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlockShares(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unlockShares(address,uint256)"(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlockTokens(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unlockTokens(address,uint256)"(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateAaveAddresses(
      _wethGateway: string,
      _protocolDataProvider: string,
      _lendingPoolAddressesProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateAaveAddresses(address,address,address)"(
      _wethGateway: string,
      _protocolDataProvider: string,
      _lendingPoolAddressesProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateReferralCode(
      _referralCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateReferralCode(uint16)"(
      _referralCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSavingsAccount(
      _savingsAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateSavingsAccount(address)"(
      _savingsAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wethGateway(overrides?: CallOverrides): Promise<[string]>;

    "wethGateway()"(overrides?: CallOverrides): Promise<[string]>;
  };

  emergencyWithdraw(
    _asset: string,
    _wallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "emergencyWithdraw(address,address)"(
    _asset: string,
    _wallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getSharesForTokens(
    amount: BigNumberish,
    asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getSharesForTokens(uint256,address)"(
    amount: BigNumberish,
    asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokensForShares(
    shares: BigNumberish,
    asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTokensForShares(uint256,address)"(
    shares: BigNumberish,
    asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _owner: string,
    _savingsAccount: string,
    _wethGateway: string,
    _protocolDataProvider: string,
    _lendingPoolAddressesProvider: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address,address,address,address,address)"(
    _owner: string,
    _savingsAccount: string,
    _wethGateway: string,
    _protocolDataProvider: string,
    _lendingPoolAddressesProvider: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lendingPoolAddressesProvider(overrides?: CallOverrides): Promise<string>;

  "lendingPoolAddressesProvider()"(overrides?: CallOverrides): Promise<string>;

  liquidityToken(asset: string, overrides?: CallOverrides): Promise<string>;

  "liquidityToken(address)"(
    asset: string,
    overrides?: CallOverrides
  ): Promise<string>;

  lockTokens(
    user: string,
    asset: string,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lockTokens(address,address,uint256)"(
    user: string,
    asset: string,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  protocolDataProvider(overrides?: CallOverrides): Promise<string>;

  "protocolDataProvider()"(overrides?: CallOverrides): Promise<string>;

  referralCode(overrides?: CallOverrides): Promise<number>;

  "referralCode()"(overrides?: CallOverrides): Promise<number>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  savingsAccount(overrides?: CallOverrides): Promise<string>;

  "savingsAccount()"(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlockShares(
    asset: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unlockShares(address,uint256)"(
    asset: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlockTokens(
    asset: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unlockTokens(address,uint256)"(
    asset: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateAaveAddresses(
    _wethGateway: string,
    _protocolDataProvider: string,
    _lendingPoolAddressesProvider: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateAaveAddresses(address,address,address)"(
    _wethGateway: string,
    _protocolDataProvider: string,
    _lendingPoolAddressesProvider: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateReferralCode(
    _referralCode: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateReferralCode(uint16)"(
    _referralCode: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSavingsAccount(
    _savingsAccount: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateSavingsAccount(address)"(
    _savingsAccount: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wethGateway(overrides?: CallOverrides): Promise<string>;

  "wethGateway()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    emergencyWithdraw(
      _asset: string,
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "emergencyWithdraw(address,address)"(
      _asset: string,
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSharesForTokens(
      amount: BigNumberish,
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSharesForTokens(uint256,address)"(
      amount: BigNumberish,
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokensForShares(
      shares: BigNumberish,
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokensForShares(uint256,address)"(
      shares: BigNumberish,
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _owner: string,
      _savingsAccount: string,
      _wethGateway: string,
      _protocolDataProvider: string,
      _lendingPoolAddressesProvider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address,address,address)"(
      _owner: string,
      _savingsAccount: string,
      _wethGateway: string,
      _protocolDataProvider: string,
      _lendingPoolAddressesProvider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lendingPoolAddressesProvider(overrides?: CallOverrides): Promise<string>;

    "lendingPoolAddressesProvider()"(
      overrides?: CallOverrides
    ): Promise<string>;

    liquidityToken(asset: string, overrides?: CallOverrides): Promise<string>;

    "liquidityToken(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<string>;

    lockTokens(
      user: string,
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockTokens(address,address,uint256)"(
      user: string,
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    protocolDataProvider(overrides?: CallOverrides): Promise<string>;

    "protocolDataProvider()"(overrides?: CallOverrides): Promise<string>;

    referralCode(overrides?: CallOverrides): Promise<number>;

    "referralCode()"(overrides?: CallOverrides): Promise<number>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    savingsAccount(overrides?: CallOverrides): Promise<string>;

    "savingsAccount()"(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockShares(
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "unlockShares(address,uint256)"(
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlockTokens(
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "unlockTokens(address,uint256)"(
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateAaveAddresses(
      _wethGateway: string,
      _protocolDataProvider: string,
      _lendingPoolAddressesProvider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateAaveAddresses(address,address,address)"(
      _wethGateway: string,
      _protocolDataProvider: string,
      _lendingPoolAddressesProvider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateReferralCode(
      _referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateReferralCode(uint16)"(
      _referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSavingsAccount(
      _savingsAccount: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateSavingsAccount(address)"(
      _savingsAccount: string,
      overrides?: CallOverrides
    ): Promise<void>;

    wethGateway(overrides?: CallOverrides): Promise<string>;

    "wethGateway()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    AaveAddressesUpdated(
      wethGateway: string | null,
      protocolDataProvider: string | null,
      lendingPoolAddressesProvider: string | null
    ): TypedEventFilter<
      [string, string, string],
      {
        wethGateway: string;
        protocolDataProvider: string;
        lendingPoolAddressesProvider: string;
      }
    >;

    LockedTokens(
      user: string | null,
      investedTo: string | null,
      lpTokensReceived: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; investedTo: string; lpTokensReceived: BigNumber }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    ReferralCodeUpdated(
      referralCode: null
    ): TypedEventFilter<[number], { referralCode: number }>;

    SavingsAccountUpdated(
      savingsAccount: string | null
    ): TypedEventFilter<[string], { savingsAccount: string }>;

    UnlockedShares(
      asset: string | null,
      sharesReleased: null
    ): TypedEventFilter<
      [string, BigNumber],
      { asset: string; sharesReleased: BigNumber }
    >;

    UnlockedTokens(
      investedTo: string | null,
      collateralReceived: null
    ): TypedEventFilter<
      [string, BigNumber],
      { investedTo: string; collateralReceived: BigNumber }
    >;
  };

  estimateGas: {
    emergencyWithdraw(
      _asset: string,
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "emergencyWithdraw(address,address)"(
      _asset: string,
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getSharesForTokens(
      amount: BigNumberish,
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSharesForTokens(uint256,address)"(
      amount: BigNumberish,
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokensForShares(
      shares: BigNumberish,
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokensForShares(uint256,address)"(
      shares: BigNumberish,
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _owner: string,
      _savingsAccount: string,
      _wethGateway: string,
      _protocolDataProvider: string,
      _lendingPoolAddressesProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address,address,address,address,address)"(
      _owner: string,
      _savingsAccount: string,
      _wethGateway: string,
      _protocolDataProvider: string,
      _lendingPoolAddressesProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lendingPoolAddressesProvider(overrides?: CallOverrides): Promise<BigNumber>;

    "lendingPoolAddressesProvider()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityToken(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "liquidityToken(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockTokens(
      user: string,
      asset: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lockTokens(address,address,uint256)"(
      user: string,
      asset: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    protocolDataProvider(overrides?: CallOverrides): Promise<BigNumber>;

    "protocolDataProvider()"(overrides?: CallOverrides): Promise<BigNumber>;

    referralCode(overrides?: CallOverrides): Promise<BigNumber>;

    "referralCode()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    savingsAccount(overrides?: CallOverrides): Promise<BigNumber>;

    "savingsAccount()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlockShares(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unlockShares(address,uint256)"(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlockTokens(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unlockTokens(address,uint256)"(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateAaveAddresses(
      _wethGateway: string,
      _protocolDataProvider: string,
      _lendingPoolAddressesProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateAaveAddresses(address,address,address)"(
      _wethGateway: string,
      _protocolDataProvider: string,
      _lendingPoolAddressesProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateReferralCode(
      _referralCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateReferralCode(uint16)"(
      _referralCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSavingsAccount(
      _savingsAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateSavingsAccount(address)"(
      _savingsAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wethGateway(overrides?: CallOverrides): Promise<BigNumber>;

    "wethGateway()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    emergencyWithdraw(
      _asset: string,
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "emergencyWithdraw(address,address)"(
      _asset: string,
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getSharesForTokens(
      amount: BigNumberish,
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSharesForTokens(uint256,address)"(
      amount: BigNumberish,
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokensForShares(
      shares: BigNumberish,
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokensForShares(uint256,address)"(
      shares: BigNumberish,
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: string,
      _savingsAccount: string,
      _wethGateway: string,
      _protocolDataProvider: string,
      _lendingPoolAddressesProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address,address,address)"(
      _owner: string,
      _savingsAccount: string,
      _wethGateway: string,
      _protocolDataProvider: string,
      _lendingPoolAddressesProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lendingPoolAddressesProvider(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lendingPoolAddressesProvider()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityToken(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "liquidityToken(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockTokens(
      user: string,
      asset: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lockTokens(address,address,uint256)"(
      user: string,
      asset: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolDataProvider(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "protocolDataProvider()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referralCode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "referralCode()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    savingsAccount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "savingsAccount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlockShares(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unlockShares(address,uint256)"(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlockTokens(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unlockTokens(address,uint256)"(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateAaveAddresses(
      _wethGateway: string,
      _protocolDataProvider: string,
      _lendingPoolAddressesProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateAaveAddresses(address,address,address)"(
      _wethGateway: string,
      _protocolDataProvider: string,
      _lendingPoolAddressesProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateReferralCode(
      _referralCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateReferralCode(uint16)"(
      _referralCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSavingsAccount(
      _savingsAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateSavingsAccount(address)"(
      _savingsAccount: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wethGateway(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wethGateway()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IExtensionInterface extends ethers.utils.Interface {
  functions: {
    "closePoolExtension()": FunctionFragment;
    "initializePoolExtension(uint256)": FunctionFragment;
    "removeVotes(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "closePoolExtension",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializePoolExtension",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeVotes",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "closePoolExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializePoolExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeVotes",
    data: BytesLike
  ): Result;

  events: {
    "ExtensionPassed(address)": EventFragment;
    "ExtensionRequested(uint256)": EventFragment;
    "LenderVoted(address,uint256,uint256)": EventFragment;
    "PoolFactoryUpdated(address)": EventFragment;
    "VotingPassRatioUpdated(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExtensionPassed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExtensionRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LenderVoted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolFactoryUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VotingPassRatioUpdated"): EventFragment;
}

export class IExtension extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IExtensionInterface;

  functions: {
    closePoolExtension(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "closePoolExtension()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializePoolExtension(
      _repaymentInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initializePoolExtension(uint256)"(
      _repaymentInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeVotes(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeVotes(address,address,uint256)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  closePoolExtension(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "closePoolExtension()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializePoolExtension(
    _repaymentInterval: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initializePoolExtension(uint256)"(
    _repaymentInterval: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeVotes(
    _from: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeVotes(address,address,uint256)"(
    _from: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    closePoolExtension(overrides?: CallOverrides): Promise<void>;

    "closePoolExtension()"(overrides?: CallOverrides): Promise<void>;

    initializePoolExtension(
      _repaymentInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initializePoolExtension(uint256)"(
      _repaymentInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeVotes(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeVotes(address,address,uint256)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ExtensionPassed(
      poolID: null
    ): TypedEventFilter<[string], { poolID: string }>;

    ExtensionRequested(
      extensionVoteEndTime: null
    ): TypedEventFilter<[BigNumber], { extensionVoteEndTime: BigNumber }>;

    LenderVoted(
      lender: string | null,
      totalExtensionSupport: null,
      lastVoteTime: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        lender: string;
        totalExtensionSupport: BigNumber;
        lastVoteTime: BigNumber;
      }
    >;

    PoolFactoryUpdated(
      poolFactory: string | null
    ): TypedEventFilter<[string], { poolFactory: string }>;

    VotingPassRatioUpdated(
      votingPassRatio: null
    ): TypedEventFilter<[BigNumber], { votingPassRatio: BigNumber }>;
  };

  estimateGas: {
    closePoolExtension(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "closePoolExtension()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializePoolExtension(
      _repaymentInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initializePoolExtension(uint256)"(
      _repaymentInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeVotes(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeVotes(address,address,uint256)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    closePoolExtension(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "closePoolExtension()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializePoolExtension(
      _repaymentInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initializePoolExtension(uint256)"(
      _repaymentInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeVotes(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeVotes(address,address,uint256)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

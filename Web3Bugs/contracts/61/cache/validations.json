{
  "version": "3.2",
  "log": [
    {
      "GovernanceTester": {
        "src": "contracts/mocks/GovernanceTester.sol:4",
        "version": {
          "withMetadata": "2360d5358544bd9b84c7935d040c48162459044b665243f6e5a08a3d00d11add",
          "withoutMetadata": "f133b6dff4840ab8ad62660a217d91faa8bca1cc693d7cde4c4fe17b0b943dd6",
          "linkedWithoutMetadata": "f133b6dff4840ab8ad62660a217d91faa8bca1cc693d7cde4c4fe17b0b943dd6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,uint256)",
          "update(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GovernanceTester",
            "src": "contracts/mocks/GovernanceTester.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GovernanceTester",
              "label": "gov",
              "type": "t_address",
              "src": "contracts/mocks/GovernanceTester.sol:5"
            },
            {
              "contract": "GovernanceTester",
              "label": "value",
              "type": "t_uint256",
              "src": "contracts/mocks/GovernanceTester.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FluxAggregator": {
        "src": "contracts/mocks/FluxAggregator.sol:4",
        "version": {
          "withMetadata": "04a7221ec57cbff6e087ac61b9357c0138958e15830a0a2b8bfedbbef7b44b16",
          "withoutMetadata": "78c1ab5450ca22cfaa86c6be8f8100772c673fbfb52e5974c40e0a4046a0270e",
          "linkedWithoutMetadata": "78c1ab5450ca22cfaa86c6be8f8100772c673fbfb52e5974c40e0a4046a0270e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "setValue(int256)",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "version",
            "src": "contracts/mocks/FluxAggregator.sol:5"
          },
          {
            "kind": "state-variable-assignment",
            "name": "value",
            "src": "contracts/mocks/FluxAggregator.sol:9"
          },
          {
            "kind": "state-variable-assignment",
            "name": "latestRoundId",
            "src": "contracts/mocks/FluxAggregator.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FluxAggregator",
              "label": "version",
              "type": "t_uint256",
              "src": "contracts/mocks/FluxAggregator.sol:5"
            },
            {
              "contract": "FluxAggregator",
              "label": "decimals",
              "type": "t_uint8",
              "src": "contracts/mocks/FluxAggregator.sol:6"
            },
            {
              "contract": "FluxAggregator",
              "label": "description",
              "type": "t_string_storage",
              "src": "contracts/mocks/FluxAggregator.sol:7"
            },
            {
              "contract": "FluxAggregator",
              "label": "value",
              "type": "t_int256",
              "src": "contracts/mocks/FluxAggregator.sol:9"
            },
            {
              "contract": "FluxAggregator",
              "label": "latestRoundId",
              "type": "t_uint80",
              "src": "contracts/mocks/FluxAggregator.sol:10"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_int256": {
              "label": "int256"
            },
            "t_uint80": {
              "label": "uint80"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Migrations": {
        "src": "contracts/Migrations.sol:4",
        "version": {
          "withMetadata": "cb1fada45dbc5363705d1d7ec249f665dad087a388c59296b1ca18b85d66af10",
          "withoutMetadata": "5e9a930d422fc2cdb9120658e99d215c882773554764e974cf2cac295f8bfb2c",
          "linkedWithoutMetadata": "5e9a930d422fc2cdb9120658e99d215c882773554764e974cf2cac295f8bfb2c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "setCompleted(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "owner",
            "src": "contracts/Migrations.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Migrations",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Migrations.sol:5"
            },
            {
              "contract": "Migrations",
              "label": "last_completed_migration",
              "type": "t_uint256",
              "src": "contracts/Migrations.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IUniswapV3Factory": {
        "src": "contracts/interfaces/IUniswapV3Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner()",
          "feeAmountTickSpacing(uint24)",
          "getPool(address,address,uint24)",
          "createPool(address,address,uint24)",
          "setOwner(address)",
          "enableFeeAmount(uint24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AggregatorV3Interface": {
        "src": "@chainlink/contracts/src/v0.7/interfaces/AggregatorV3Interface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "e40a047d02568e4b09dc42878e7cb030c4836e31e9ce9e7f5442d6bf8db99aa6",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20PausableUpgradeable.sol:16",
        "inherit": [
          "PausableUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20PausableUpgradeable.sol:37"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:34",
        "version": {
          "withMetadata": "ee53bc0c0933e8958306b49dc36ddebe67f8e18caf3eafad5db615632556a7bc",
          "withoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1",
          "linkedWithoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1"
        },
        "inherit": [
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)44_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:312"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "7d6a811c59c82701d72d6870ca95440d0a136dde39f17c6c6c3b7add1f2cb935",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/cryptography/ECDSA.sol:11",
        "version": {
          "withMetadata": "4bd6aca89790ef939d42db95bb34cbe74c7ccfca517e0937758f68fcded61dfe",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "bbea698b21ba8429f79e8c15ae81593944b5f0fd04a010156c6f7c92dfbb0bee",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol:28",
        "version": {
          "withMetadata": "a502275960e55c350729d4a27cee2c3cf1a3a262941e615b7bc2b653bef6a1f1",
          "withoutMetadata": "a502275960e55c350729d4a27cee2c3cf1a3a262941e615b7bc2b653bef6a1f1",
          "linkedWithoutMetadata": "a502275960e55c350729d4a27cee2c3cf1a3a262941e615b7bc2b653bef6a1f1"
        },
        "inherit": [
          "UpgradeableProxy",
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol:33"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/UpgradeableProxy.sol:17",
        "version": {
          "withMetadata": "3a6128d4fd1bea32f8aa3de5b15a3107c39b826538442b3673fdf2633235c5e2",
          "withoutMetadata": "3a6128d4fd1bea32f8aa3de5b15a3107c39b826538442b3673fdf2633235c5e2",
          "linkedWithoutMetadata": "3a6128d4fd1bea32f8aa3de5b15a3107c39b826538442b3673fdf2633235c5e2"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/UpgradeableProxy.sol:24"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts/mocks/yVault/yVault.sol:14",
        "version": {
          "withMetadata": "cc940c0b44aa4f8a45f1ab5f0833d8685391dfd59dc39753f6eac1f0daba842d",
          "withoutMetadata": "3c1a0056da312afcd64a2bae1fc46875c39be7a47c3dffbf9b6921d46745c1b9",
          "linkedWithoutMetadata": "3c1a0056da312afcd64a2bae1fc46875c39be7a47c3dffbf9b6921d46745c1b9"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/mocks/yVault/yVault.sol:17"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/mocks/yVault/yVault.sol:19"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts/mocks/yVault/yVault.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts/mocks/yVault/yVault.sol:143",
        "version": {
          "withMetadata": "96955ce9f911612c5f850db45dfe052161b44801e7145d19361da9e67a02aaf5",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "2304716e8dda4f0ff9ab5f898ff43fa2e8b21a4afaadafeb331577fabe381b59",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV3Pool": {
        "src": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol:15",
        "inherit": [
          "IUniswapV3PoolEvents",
          "IUniswapV3PoolOwnerActions",
          "IUniswapV3PoolActions",
          "IUniswapV3PoolDerivedState",
          "IUniswapV3PoolState",
          "IUniswapV3PoolImmutables"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV3PoolActions": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(uint160)",
          "mint(address,int24,int24,uint128,bytes)",
          "collect(address,int24,int24,uint128,uint128)",
          "burn(int24,int24,uint128)",
          "swap(address,bool,int256,uint160,bytes)",
          "flash(address,uint256,uint256,bytes)",
          "increaseObservationCardinalityNext(uint16)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV3PoolDerivedState": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "observe(uint32[])",
          "snapshotCumulativesInside(int24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV3PoolEvents": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV3PoolImmutables": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "fee()",
          "tickSpacing()",
          "maxLiquidityPerTick()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV3PoolOwnerActions": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setFeeProtocol(uint8,uint8)",
          "collectProtocol(address,uint128,uint128)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV3PoolState": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "slot0()",
          "feeGrowthGlobal0X128()",
          "feeGrowthGlobal1X128()",
          "protocolFees()",
          "liquidity()",
          "ticks(int24)",
          "tickBitmap(int16)",
          "positions(bytes32)",
          "observations(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FullMath": {
        "src": "@uniswap/v3-core/contracts/libraries/FullMath.sol:7",
        "version": {
          "withMetadata": "80e2232fd4aec9148850b84ce50144e4362a011ac558303e36841d7cb8839cee",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LowGasSafeMath": {
        "src": "@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol:6",
        "version": {
          "withMetadata": "3e9972d2e969c2a5b95c52cf9c4111e924c56b96b32851778cc26234ec3c638b",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TickMath": {
        "src": "@uniswap/v3-core/contracts/libraries/TickMath.sol:7",
        "version": {
          "withMetadata": "1627e5426658f20eff2d4969c1d5e22440d4e0e370d771d5d5b7dfe0817eafca",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OracleLibrary": {
        "src": "@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol:12",
        "version": {
          "withMetadata": "b894f6456e2e68166f5aa6f7783a32d4b55c1b5a17cf3bff0dc75e4009a6c244",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "TickMath",
          "FullMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PoolAddress": {
        "src": "@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "84a06b54905260e89503dbe097f8a34257f2f9b9a7f099c066781e7cd668cac7",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "CreditLine": {
        "src": "contracts/CreditLine/CreditLine.sol:20",
        "version": {
          "withMetadata": "7462307b2dd44b5a05930258d680f30539b1a5e498b7f4a43f95aaf1247d6b14",
          "withoutMetadata": "92d353a8236e8fea7c4521384b1d1aefd4d8bd924a56ff70d061364ee2331ffe",
          "linkedWithoutMetadata": "92d353a8236e8fea7c4521384b1d1aefd4d8bd924a56ff70d061364ee2331ffe"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "ReentrancyGuard"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "initialize(address,address,address,address,address,uint256,address,uint256)",
          "updateDefaultStrategy(address)",
          "updatePriceOracle(address)",
          "updateSavingsAccount(address)",
          "updateProtocolFeeFraction(uint256)",
          "updateProtocolFeeCollector(address)",
          "updateStrategyRegistry(address)",
          "updateLiquidatorRewardFraction(uint256)",
          "calculateInterest(uint256,uint256,uint256)",
          "calculateInterestAccrued(uint256)",
          "calculateCurrentDebt(uint256)",
          "calculateBorrowableAmount(uint256)",
          "request(address,uint256,uint256,bool,uint256,address,address,bool)",
          "accept(uint256)",
          "depositCollateral(uint256,uint256,address,bool)",
          "borrow(uint256,uint256)",
          "repay(uint256,uint256,bool)",
          "close(uint256)",
          "calculateCurrentCollateralRatio(uint256)",
          "calculateTotalCollateralTokens(uint256)",
          "withdrawCollateral(uint256,uint256,bool)",
          "withdrawableCollateral(uint256)",
          "liquidate(uint256,bool)",
          "borrowTokensToLiquidate(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "CreditLine",
              "label": "creditLineCounter",
              "type": "t_uint256",
              "src": "contracts/CreditLine/CreditLine.sol:37"
            },
            {
              "contract": "CreditLine",
              "label": "collateralShareInStrategy",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "src": "contracts/CreditLine/CreditLine.sol:64"
            },
            {
              "contract": "CreditLine",
              "label": "creditLineVariables",
              "type": "t_mapping(t_uint256,t_struct(CreditLineVariables)5384_storage)",
              "src": "contracts/CreditLine/CreditLine.sol:69"
            },
            {
              "contract": "CreditLine",
              "label": "creditLineConstants",
              "type": "t_mapping(t_uint256,t_struct(CreditLineConstants)5403_storage)",
              "src": "contracts/CreditLine/CreditLine.sol:74"
            },
            {
              "contract": "CreditLine",
              "label": "savingsAccount",
              "type": "t_address",
              "src": "contracts/CreditLine/CreditLine.sol:79"
            },
            {
              "contract": "CreditLine",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/CreditLine/CreditLine.sol:84"
            },
            {
              "contract": "CreditLine",
              "label": "strategyRegistry",
              "type": "t_address",
              "src": "contracts/CreditLine/CreditLine.sol:89"
            },
            {
              "contract": "CreditLine",
              "label": "defaultStrategy",
              "type": "t_address",
              "src": "contracts/CreditLine/CreditLine.sol:94"
            },
            {
              "contract": "CreditLine",
              "label": "protocolFeeFraction",
              "type": "t_uint256",
              "src": "contracts/CreditLine/CreditLine.sol:100"
            },
            {
              "contract": "CreditLine",
              "label": "protocolFeeCollector",
              "type": "t_address",
              "src": "contracts/CreditLine/CreditLine.sol:105"
            },
            {
              "contract": "CreditLine",
              "label": "liquidatorRewardFraction",
              "type": "t_uint256",
              "src": "contracts/CreditLine/CreditLine.sol:111"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(CreditLineVariables)5384_storage)": {
              "label": "mapping(uint256 => struct CreditLine.CreditLineVariables)"
            },
            "t_struct(CreditLineVariables)5384_storage": {
              "label": "struct CreditLine.CreditLineVariables",
              "members": [
                {
                  "label": "status",
                  "type": "t_enum(CreditLineStatus)5367"
                },
                {
                  "label": "principal",
                  "type": "t_uint256"
                },
                {
                  "label": "totalInterestRepaid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastPrincipalUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "interestAccruedTillLastPrincipalUpdate",
                  "type": "t_uint256"
                }
              ]
            },
            "t_enum(CreditLineStatus)5367": {
              "label": "enum CreditLine.CreditLineStatus",
              "members": [
                "NOT_CREATED",
                "REQUESTED",
                "ACTIVE",
                "CLOSED",
                "CANCELLED",
                "LIQUIDATED"
              ]
            },
            "t_mapping(t_uint256,t_struct(CreditLineConstants)5403_storage)": {
              "label": "mapping(uint256 => struct CreditLine.CreditLineConstants)"
            },
            "t_struct(CreditLineConstants)5403_storage": {
              "label": "struct CreditLine.CreditLineConstants",
              "members": [
                {
                  "label": "lender",
                  "type": "t_address"
                },
                {
                  "label": "borrower",
                  "type": "t_address"
                },
                {
                  "label": "borrowLimit",
                  "type": "t_uint256"
                },
                {
                  "label": "idealCollateralRatio",
                  "type": "t_uint256"
                },
                {
                  "label": "borrowRate",
                  "type": "t_uint256"
                },
                {
                  "label": "borrowAsset",
                  "type": "t_address"
                },
                {
                  "label": "collateralAsset",
                  "type": "t_address"
                },
                {
                  "label": "autoLiquidation",
                  "type": "t_bool"
                },
                {
                  "label": "requestByLender",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Extension": {
        "src": "contracts/Pool/Extension.sol:16",
        "version": {
          "withMetadata": "c4162e1ad1ae36743fa2e11995a09f60db24df92234e4f5575d314d11e004dad",
          "withoutMetadata": "5e5edea02fbc4a7080bfd768fa9f17eef9964433a965dc68c9a4096b321f3125",
          "linkedWithoutMetadata": "5e5edea02fbc4a7080bfd768fa9f17eef9964433a965dc68c9a4096b321f3125"
        },
        "inherit": [
          "IExtension",
          "Initializable"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "initialize(address,uint256)",
          "initializePoolExtension(uint256)",
          "requestExtension(address)",
          "removeVotes(address,address,uint256)",
          "voteOnExtension(address)",
          "closePoolExtension()",
          "updateVotingPassRatio(uint256)",
          "updatePoolFactory(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Extension",
              "label": "extensions",
              "type": "t_mapping(t_address,t_struct(ExtensionVariables)8381_storage)",
              "src": "contracts/Pool/Extension.sol:30"
            },
            {
              "contract": "Extension",
              "label": "poolFactory",
              "type": "t_contract(IPoolFactory)18215",
              "src": "contracts/Pool/Extension.sol:31"
            },
            {
              "contract": "Extension",
              "label": "votingPassRatio",
              "type": "t_uint256",
              "src": "contracts/Pool/Extension.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(ExtensionVariables)8381_storage)": {
              "label": "mapping(address => struct Extension.ExtensionVariables)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(ExtensionVariables)8381_storage": {
              "label": "struct Extension.ExtensionVariables",
              "members": [
                {
                  "label": "hasExtensionPassed",
                  "type": "t_bool"
                },
                {
                  "label": "totalExtensionSupport",
                  "type": "t_uint256"
                },
                {
                  "label": "extensionVoteEndTime",
                  "type": "t_uint256"
                },
                {
                  "label": "repaymentInterval",
                  "type": "t_uint256"
                },
                {
                  "label": "lastVotedExtension",
                  "type": "t_mapping(t_address,t_uint256)"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_contract(IPoolFactory)18215": {
              "label": "contract IPoolFactory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pool": {
        "src": "contracts/Pool/Pool.sol:24",
        "version": {
          "withMetadata": "fe7010c4d820a1f0fa303f6f8791257a043d16074383443e6953056826f47333",
          "withoutMetadata": "9154405cd9e3c2374be2cbb7b4c590a341e76838e6a73e452549fb0bbdf78fb7",
          "linkedWithoutMetadata": "9154405cd9e3c2374be2cbb7b4c590a341e76838e6a73e452549fb0bbdf78fb7"
        },
        "inherit": [
          "ReentrancyGuard",
          "IPool",
          "ERC20PausableUpgradeable",
          "PausableUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath",
          "SavingsAccountUtil"
        ],
        "methods": [
          "initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,address,uint256,bool,address,uint256,uint256)",
          "depositCollateral(uint256,bool)",
          "addCollateralInMarginCall(address,uint256,bool)",
          "withdrawBorrowedAmount()",
          "lend(address,uint256,address)",
          "cancelPool()",
          "liquidateCancelPenalty(bool,bool)",
          "terminatePool()",
          "closeLoan()",
          "withdrawLiquidity()",
          "requestMarginCall()",
          "interestToPay()",
          "calculateCollateralRatio(uint256,uint256)",
          "getCurrentCollateralRatio()",
          "getCurrentCollateralRatio(address)",
          "liquidatePool(bool,bool,bool)",
          "liquidateForLender(address,bool,bool,bool)",
          "correspondingBorrowTokens(uint256,address,uint256)",
          "interestPerSecond(uint256)",
          "interestPerPeriod(uint256)",
          "calculateCurrentPeriod()",
          "calculateRepaymentWithdrawable(address)",
          "withdrawRepayment()",
          "getMarginCallEndTime(address)",
          "getBalanceDetails(address)",
          "getLoanStatus()",
          "()",
          "getEquivalentTokens(address,address,uint256)",
          "borrower()",
          "totalSupply()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Pool",
              "label": "poolFactory",
              "type": "t_address",
              "src": "contracts/Pool/Pool.sol:37"
            },
            {
              "contract": "Pool",
              "label": "lenders",
              "type": "t_mapping(t_address,t_struct(LendingDetails)8956_storage)",
              "src": "contracts/Pool/Pool.sol:71"
            },
            {
              "contract": "Pool",
              "label": "poolConstants",
              "type": "t_struct(PoolConstants)8981_storage",
              "src": "contracts/Pool/Pool.sol:76"
            },
            {
              "contract": "Pool",
              "label": "poolVariables",
              "type": "t_struct(PoolVariables)8990_storage",
              "src": "contracts/Pool/Pool.sol:81"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_struct(LendingDetails)8956_storage)": {
              "label": "mapping(address => struct Pool.LendingDetails)"
            },
            "t_struct(LendingDetails)8956_storage": {
              "label": "struct Pool.LendingDetails",
              "members": [
                {
                  "label": "effectiveInterestWithdrawn",
                  "type": "t_uint256"
                },
                {
                  "label": "marginCallEndTime",
                  "type": "t_uint256"
                },
                {
                  "label": "extraLiquidityShares",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(PoolConstants)8981_storage": {
              "label": "struct Pool.PoolConstants",
              "members": [
                {
                  "label": "borrower",
                  "type": "t_address"
                },
                {
                  "label": "borrowAmountRequested",
                  "type": "t_uint256"
                },
                {
                  "label": "loanStartTime",
                  "type": "t_uint256"
                },
                {
                  "label": "loanWithdrawalDeadline",
                  "type": "t_uint256"
                },
                {
                  "label": "borrowAsset",
                  "type": "t_address"
                },
                {
                  "label": "idealCollateralRatio",
                  "type": "t_uint256"
                },
                {
                  "label": "borrowRate",
                  "type": "t_uint256"
                },
                {
                  "label": "noOfRepaymentIntervals",
                  "type": "t_uint256"
                },
                {
                  "label": "repaymentInterval",
                  "type": "t_uint256"
                },
                {
                  "label": "collateralAsset",
                  "type": "t_address"
                },
                {
                  "label": "poolSavingsStrategy",
                  "type": "t_address"
                },
                {
                  "label": "lenderVerifier",
                  "type": "t_address"
                }
              ]
            },
            "t_struct(PoolVariables)8990_storage": {
              "label": "struct Pool.PoolVariables",
              "members": [
                {
                  "label": "baseLiquidityShares",
                  "type": "t_uint256"
                },
                {
                  "label": "extraLiquidityShares",
                  "type": "t_uint256"
                },
                {
                  "label": "loanStatus",
                  "type": "t_enum(LoanStatus)8947"
                },
                {
                  "label": "penaltyLiquidityAmount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_enum(LoanStatus)8947": {
              "label": "enum Pool.LoanStatus",
              "members": [
                "COLLECTION",
                "ACTIVE",
                "CLOSED",
                "CANCELLED",
                "DEFAULTED",
                "TERMINATED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PoolFactory": {
        "src": "contracts/Pool/PoolFactory.sol:18",
        "version": {
          "withMetadata": "2f85430b14f4185c5bb494cc6a2f829fa10255b72ec818acd1d8ac458ad797e3",
          "withoutMetadata": "a70d6a664243bd110c405c2c114f53366b1c117eb6fbf7953ae5fb1d7d7df537",
          "linkedWithoutMetadata": "a70d6a664243bd110c405c2c114f53366b1c117eb6fbf7953ae5fb1d7d7df537"
        },
        "inherit": [
          "IPoolFactory",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "initialize(address,uint256,uint256,uint256,bytes4,uint256,uint256,uint256,uint256,address,address)",
          "setImplementations(address,address,address,address,address,address,address)",
          "createPool(uint256,uint256,address,address,uint256,uint256,uint256,address,uint256,bool,bytes32,address,address)",
          "updateSupportedBorrowTokens(address,bool)",
          "updateSupportedCollateralTokens(address,bool)",
          "updatepoolInitFuncSelector(bytes4)",
          "updatePoolLogic(address)",
          "updateUserRegistry(address)",
          "updateStrategyRegistry(address)",
          "updateRepaymentImpl(address)",
          "updateNoStrategy(address)",
          "updatePriceoracle(address)",
          "updatedExtension(address)",
          "updateSavingsAccount(address)",
          "updateCollectionPeriod(uint256)",
          "updateLoanWithdrawalDuration(uint256)",
          "updateMarginCallDuration(uint256)",
          "updateMinBorrowFraction(uint256)",
          "updateLiquidatorRewardFraction(uint256)",
          "updatePoolCancelPenaltyMultiple(uint256)",
          "updateProtocolFeeFraction(uint256)",
          "updateProtocolFeeCollector(address)",
          "updatePoolSizeLimit(uint256,uint256)",
          "updateidealCollateralRatioLimit(uint256,uint256)",
          "updateBorrowRateLimit(uint256,uint256)",
          "updateRepaymentIntervalLimit(uint256,uint256)",
          "updateNoOfRepaymentIntervalsLimit(uint256,uint256)",
          "getProtocolFeeData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PoolFactory",
              "label": "poolInitFuncSelector",
              "type": "t_bytes4",
              "src": "contracts/Pool/PoolFactory.sol:32"
            },
            {
              "contract": "PoolFactory",
              "label": "poolImpl",
              "type": "t_address",
              "src": "contracts/Pool/PoolFactory.sol:37"
            },
            {
              "contract": "PoolFactory",
              "label": "userRegistry",
              "type": "t_address",
              "src": "contracts/Pool/PoolFactory.sol:42"
            },
            {
              "contract": "PoolFactory",
              "label": "strategyRegistry",
              "type": "t_address",
              "src": "contracts/Pool/PoolFactory.sol:47"
            },
            {
              "contract": "PoolFactory",
              "label": "extension",
              "type": "t_address",
              "src": "contracts/Pool/PoolFactory.sol:52"
            },
            {
              "contract": "PoolFactory",
              "label": "repaymentImpl",
              "type": "t_address",
              "src": "contracts/Pool/PoolFactory.sol:57"
            },
            {
              "contract": "PoolFactory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/Pool/PoolFactory.sol:62"
            },
            {
              "contract": "PoolFactory",
              "label": "savingsAccount",
              "type": "t_address",
              "src": "contracts/Pool/PoolFactory.sol:67"
            },
            {
              "contract": "PoolFactory",
              "label": "collectionPeriod",
              "type": "t_uint256",
              "src": "contracts/Pool/PoolFactory.sol:72"
            },
            {
              "contract": "PoolFactory",
              "label": "loanWithdrawalDuration",
              "type": "t_uint256",
              "src": "contracts/Pool/PoolFactory.sol:77"
            },
            {
              "contract": "PoolFactory",
              "label": "marginCallDuration",
              "type": "t_uint256",
              "src": "contracts/Pool/PoolFactory.sol:82"
            },
            {
              "contract": "PoolFactory",
              "label": "minBorrowFraction",
              "type": "t_uint256",
              "src": "contracts/Pool/PoolFactory.sol:87"
            },
            {
              "contract": "PoolFactory",
              "label": "liquidatorRewardFraction",
              "type": "t_uint256",
              "src": "contracts/Pool/PoolFactory.sol:92"
            },
            {
              "contract": "PoolFactory",
              "label": "poolCancelPenaltyMultiple",
              "type": "t_uint256",
              "src": "contracts/Pool/PoolFactory.sol:97"
            },
            {
              "contract": "PoolFactory",
              "label": "noStrategyAddress",
              "type": "t_address",
              "src": "contracts/Pool/PoolFactory.sol:102"
            },
            {
              "contract": "PoolFactory",
              "label": "protocolFeeFraction",
              "type": "t_uint256",
              "src": "contracts/Pool/PoolFactory.sol:104"
            },
            {
              "contract": "PoolFactory",
              "label": "protocolFeeCollector",
              "type": "t_address",
              "src": "contracts/Pool/PoolFactory.sol:105"
            },
            {
              "contract": "PoolFactory",
              "label": "isBorrowToken",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Pool/PoolFactory.sol:110"
            },
            {
              "contract": "PoolFactory",
              "label": "isCollateralToken",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Pool/PoolFactory.sol:115"
            },
            {
              "contract": "PoolFactory",
              "label": "poolRegistry",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Pool/PoolFactory.sol:120"
            },
            {
              "contract": "PoolFactory",
              "label": "poolSizeLimit",
              "type": "t_struct(Limits)11862_storage",
              "src": "contracts/Pool/PoolFactory.sol:125"
            },
            {
              "contract": "PoolFactory",
              "label": "idealCollateralRatioLimit",
              "type": "t_struct(Limits)11862_storage",
              "src": "contracts/Pool/PoolFactory.sol:130"
            },
            {
              "contract": "PoolFactory",
              "label": "borrowRateLimit",
              "type": "t_struct(Limits)11862_storage",
              "src": "contracts/Pool/PoolFactory.sol:135"
            },
            {
              "contract": "PoolFactory",
              "label": "repaymentIntervalLimit",
              "type": "t_struct(Limits)11862_storage",
              "src": "contracts/Pool/PoolFactory.sol:140"
            },
            {
              "contract": "PoolFactory",
              "label": "noOfRepaymentIntervalsLimit",
              "type": "t_struct(Limits)11862_storage",
              "src": "contracts/Pool/PoolFactory.sol:145"
            }
          ],
          "types": {
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(Limits)11862_storage": {
              "label": "struct PoolFactory.Limits",
              "members": [
                {
                  "label": "min",
                  "type": "t_uint256"
                },
                {
                  "label": "max",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Repayments": {
        "src": "contracts/Pool/Repayments.sol:19",
        "version": {
          "withMetadata": "1fefc62efdeae35c99d8f561fd7fe5f90ba39d65b33b763fa073305b53b1ba50",
          "withoutMetadata": "2f50390af3a0bafce92bc638d0c42da0a9b9d24e7c00687cf83b21fdc01881d3",
          "linkedWithoutMetadata": "2f50390af3a0bafce92bc638d0c42da0a9b9d24e7c00687cf83b21fdc01881d3"
        },
        "inherit": [
          "ReentrancyGuard",
          "IRepayment",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "initialize(address,uint256,uint256)",
          "updatePoolFactory(address)",
          "updateGracePeriodFraction(uint256)",
          "updateGracePenaltyRate(uint256)",
          "initializeRepayment(uint256,uint256,uint256,uint256,address)",
          "getInterestPerSecond(address)",
          "getInstalmentsCompleted(address)",
          "getInterestDueTillInstalmentDeadline(address)",
          "getNextInstalmentDeadline(address)",
          "getCurrentInstalmentInterval(address)",
          "getCurrentLoanInterval(address)",
          "isGracePenaltyApplicable(address)",
          "didBorrowerDefault(address)",
          "getInterestLeft(address)",
          "getInterestOverdue(address)",
          "repay(address,uint256)",
          "repayPrincipal(address payable)",
          "getTotalRepaidAmount(address)",
          "instalmentDeadlineExtended(address)",
          "getInterestCalculationVars(address)",
          "getGracePeriodFraction()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Repayments",
              "label": "poolFactory",
              "type": "t_contract(IPoolFactory)18215",
              "src": "contracts/Pool/Repayments.sol:26"
            },
            {
              "contract": "Repayments",
              "label": "gracePenaltyRate",
              "type": "t_uint256",
              "src": "contracts/Pool/Repayments.sol:37"
            },
            {
              "contract": "Repayments",
              "label": "gracePeriodFraction",
              "type": "t_uint256",
              "src": "contracts/Pool/Repayments.sol:38"
            },
            {
              "contract": "Repayments",
              "label": "repayVariables",
              "type": "t_mapping(t_address,t_struct(RepaymentVariables)13245_storage)",
              "src": "contracts/Pool/Repayments.sol:61"
            },
            {
              "contract": "Repayments",
              "label": "repayConstants",
              "type": "t_mapping(t_address,t_struct(RepaymentConstants)13262_storage)",
              "src": "contracts/Pool/Repayments.sol:66"
            }
          ],
          "types": {
            "t_contract(IPoolFactory)18215": {
              "label": "contract IPoolFactory"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(RepaymentVariables)13245_storage)": {
              "label": "mapping(address => struct Repayments.RepaymentVariables)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(RepaymentVariables)13245_storage": {
              "label": "struct Repayments.RepaymentVariables",
              "members": [
                {
                  "label": "repaidAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "isLoanExtensionActive",
                  "type": "t_bool"
                },
                {
                  "label": "loanDurationCovered",
                  "type": "t_uint256"
                },
                {
                  "label": "loanExtensionPeriod",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(RepaymentConstants)13262_storage)": {
              "label": "mapping(address => struct Repayments.RepaymentConstants)"
            },
            "t_struct(RepaymentConstants)13262_storage": {
              "label": "struct Repayments.RepaymentConstants",
              "members": [
                {
                  "label": "numberOfTotalRepayments",
                  "type": "t_uint256"
                },
                {
                  "label": "gracePenaltyRate",
                  "type": "t_uint256"
                },
                {
                  "label": "gracePeriodFraction",
                  "type": "t_uint256"
                },
                {
                  "label": "loanDuration",
                  "type": "t_uint256"
                },
                {
                  "label": "repaymentInterval",
                  "type": "t_uint256"
                },
                {
                  "label": "borrowRate",
                  "type": "t_uint256"
                },
                {
                  "label": "loanStartTime",
                  "type": "t_uint256"
                },
                {
                  "label": "repayAsset",
                  "type": "t_address"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PriceOracle": {
        "src": "contracts/PriceOracle.sol:12",
        "version": {
          "withMetadata": "495057b9230e48faced42f908d1a14a6a6e4703c784073aa372ca81b4244f79d",
          "withoutMetadata": "4274467c09555c6bf7e7044bf2aa968f313c932ef8cd53c605936ed291643d15",
          "linkedWithoutMetadata": "4274467c09555c6bf7e7044bf2aa968f313c932ef8cd53c605936ed291643d15"
        },
        "inherit": [
          "IPriceOracle",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "OracleLibrary"
        ],
        "methods": [
          "initialize(address)",
          "getChainlinkLatestPrice(address,address)",
          "getUniswapLatestPrice(address,address)",
          "getLatestPrice(address,address)",
          "doesFeedExist(address,address)",
          "setChainlinkFeedAddress(address,address)",
          "setUniswapFeedAddress(address,address,address)",
          "setUniswapPriceAveragingPeriod(uint32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PriceOracle",
              "label": "uniswapPriceAveragingPeriod",
              "type": "t_uint32",
              "src": "contracts/PriceOracle.sol:15"
            },
            {
              "contract": "PriceOracle",
              "label": "chainlinkFeedAddresses",
              "type": "t_mapping(t_address,t_struct(PriceData)14726_storage)",
              "src": "contracts/PriceOracle.sol:23"
            },
            {
              "contract": "PriceOracle",
              "label": "decimals",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/PriceOracle.sol:24"
            },
            {
              "contract": "PriceOracle",
              "label": "uniswapPools",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/PriceOracle.sol:29"
            }
          ],
          "types": {
            "t_uint32": {
              "label": "uint32"
            },
            "t_mapping(t_address,t_struct(PriceData)14726_storage)": {
              "label": "mapping(address => struct PriceOracle.PriceData)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PriceData)14726_storage": {
              "label": "struct PriceOracle.PriceData",
              "members": [
                {
                  "label": "oracle",
                  "type": "t_address"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SublimeProxy": {
        "src": "contracts/Proxy.sol:6",
        "version": {
          "withMetadata": "2b2ec2fda319d1a695b5fa7a1cfea0faded33d7c66fca7dbc10d15522170a9e7",
          "withoutMetadata": "2b2ec2fda319d1a695b5fa7a1cfea0faded33d7c66fca7dbc10d15522170a9e7",
          "linkedWithoutMetadata": "2b2ec2fda319d1a695b5fa7a1cfea0faded33d7c66fca7dbc10d15522170a9e7"
        },
        "inherit": [
          "TransparentUpgradeableProxy",
          "UpgradeableProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SublimeProxy",
            "src": "contracts/Proxy.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SavingsAccount": {
        "src": "contracts/SavingsAccount/SavingsAccount.sol:17",
        "version": {
          "withMetadata": "0d9246ca7a6e35e1bf9aea500f2876c91787c4e44788076c3dd27261d8ac51b3",
          "withoutMetadata": "f1ec4eeb5b82a2ca150be48a103fa10dbb41645acaa66cddcdade0a8309925c8",
          "linkedWithoutMetadata": "f1ec4eeb5b82a2ca150be48a103fa10dbb41645acaa66cddcdade0a8309925c8"
        },
        "inherit": [
          "ReentrancyGuard",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "ISavingsAccount"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "initialize(address,address,address)",
          "updateCreditLine(address)",
          "updateStrategyRegistry(address)",
          "deposit(uint256,address,address,address)",
          "switchStrategy(uint256,address,address,address)",
          "withdraw(uint256,address,address,address payable,bool)",
          "withdrawFrom(uint256,address,address,address,address payable,bool)",
          "withdrawAll(address)",
          "withdrawAll(address,address)",
          "approve(uint256,address,address)",
          "increaseAllowance(uint256,address,address)",
          "decreaseAllowance(uint256,address,address)",
          "increaseAllowanceToCreditLine(uint256,address,address)",
          "transfer(uint256,address,address,address)",
          "transferFrom(uint256,address,address,address,address)",
          "getTotalTokens(address,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "SavingsAccount",
              "label": "strategyRegistry",
              "type": "t_address",
              "src": "contracts/SavingsAccount/SavingsAccount.sol:24"
            },
            {
              "contract": "SavingsAccount",
              "label": "creditLine",
              "type": "t_address",
              "src": "contracts/SavingsAccount/SavingsAccount.sol:29"
            },
            {
              "contract": "SavingsAccount",
              "label": "balanceInShares",
              "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_uint256)))",
              "src": "contracts/SavingsAccount/SavingsAccount.sol:35"
            },
            {
              "contract": "SavingsAccount",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_uint256)))",
              "src": "contracts/SavingsAccount/SavingsAccount.sol:41"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_uint256)))": {
              "label": "mapping(address => mapping(address => mapping(address => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SavingsAccountUtil": {
        "src": "contracts/SavingsAccount/SavingsAccountUtil.sol:8",
        "version": {
          "withMetadata": "b9f3fecf0147df53d7b058459f0ea2d15f52fc2afed2e3000578b7e92ec5ff3f",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Verification": {
        "src": "contracts/Verification/Verification.sol:9",
        "version": {
          "withMetadata": "1e8e5bbd6b9bee142857eff5e8efbbe13a274b8ba1c83fbaed7bade28b045d77",
          "withoutMetadata": "db528220c59be16f07381b7e61ff36a8da85891bbf89fa065812500d11349b7a",
          "linkedWithoutMetadata": "db528220c59be16f07381b7e61ff36a8da85891bbf89fa065812500d11349b7a"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "IVerification",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,uint256)",
          "updateActivationDelay(uint256)",
          "addVerifier(address)",
          "removeVerifier(address)",
          "registerMasterAddress(address,bool)",
          "unregisterMasterAddress(address,address)",
          "requestAddressLinking(address)",
          "cancelAddressLinkingRequest(address)",
          "linkAddress(address)",
          "unlinkAddress(address)",
          "isUser(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Verification",
              "label": "activationDelay",
              "type": "t_uint256",
              "src": "contracts/Verification/Verification.sol:16"
            },
            {
              "contract": "Verification",
              "label": "verifiers",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Verification/Verification.sol:21"
            },
            {
              "contract": "Verification",
              "label": "masterAddresses",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/Verification/Verification.sol:26"
            },
            {
              "contract": "Verification",
              "label": "linkedAddresses",
              "type": "t_mapping(t_address,t_struct(LinkedAddress)17181_storage)",
              "src": "contracts/Verification/Verification.sol:31"
            },
            {
              "contract": "Verification",
              "label": "pendingLinkAddresses",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts/Verification/Verification.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_struct(LinkedAddress)17181_storage)": {
              "label": "mapping(address => struct Verification.LinkedAddress)"
            },
            "t_struct(LinkedAddress)17181_storage": {
              "label": "struct Verification.LinkedAddress",
              "members": [
                {
                  "label": "masterAddress",
                  "type": "t_address"
                },
                {
                  "label": "activatesAt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AdminVerifier": {
        "src": "contracts/Verification/adminVerifier.sol:8",
        "version": {
          "withMetadata": "5860dee7e2eaeccfae62b06f89bf191c80140609228c249930609024a7d53e46",
          "withoutMetadata": "0c903c61aa71e75765da28099f2c8e5c7cc671618b58e569b88c5a4e535606fd",
          "linkedWithoutMetadata": "0c903c61aa71e75765da28099f2c8e5c7cc671618b58e569b88c5a4e535606fd"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "IVerifier",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address)",
          "registerUser(address,string,bool)",
          "unregisterUser(address)",
          "updateVerification(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AdminVerifier",
              "label": "verification",
              "type": "t_contract(IVerification)18773",
              "src": "contracts/Verification/adminVerifier.sol:12"
            },
            {
              "contract": "AdminVerifier",
              "label": "userData",
              "type": "t_mapping(t_address,t_string_storage)",
              "src": "contracts/Verification/adminVerifier.sol:17"
            }
          ],
          "types": {
            "t_contract(IVerification)18773": {
              "label": "contract IVerification"
            },
            "t_mapping(t_address,t_string_storage)": {
              "label": "mapping(address => string)"
            },
            "t_address": {
              "label": "address"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IExtension": {
        "src": "contracts/interfaces/IExtension.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initializePoolExtension(uint256)",
          "closePoolExtension()",
          "removeVotes(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPool": {
        "src": "contracts/interfaces/IPool.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLoanStatus()",
          "depositCollateral(uint256,bool)",
          "addCollateralInMarginCall(address,uint256,bool)",
          "withdrawBorrowedAmount()",
          "borrower()",
          "getMarginCallEndTime(address)",
          "getBalanceDetails(address)",
          "totalSupply()",
          "closeLoan()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPoolFactory": {
        "src": "contracts/interfaces/IPoolFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "savingsAccount()",
          "owner()",
          "poolRegistry(address)",
          "priceOracle()",
          "extension()",
          "repaymentImpl()",
          "userRegistry()",
          "collectionPeriod()",
          "loanWithdrawalDuration()",
          "marginCallDuration()",
          "minBorrowFraction()",
          "liquidatorRewardFraction()",
          "poolCancelPenaltyMultiple()",
          "getProtocolFeeData()",
          "noStrategyAddress()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/interfaces/IPriceOracle.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLatestPrice(address,address)",
          "doesFeedExist(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IRepayment": {
        "src": "contracts/interfaces/IRepayment.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initializeRepayment(uint256,uint256,uint256,uint256,address)",
          "getTotalRepaidAmount(address)",
          "getInterestCalculationVars(address)",
          "getCurrentLoanInterval(address)",
          "instalmentDeadlineExtended(address)",
          "didBorrowerDefault(address)",
          "getGracePeriodFraction()",
          "getNextInstalmentDeadline(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISavingsAccount": {
        "src": "contracts/interfaces/ISavingsAccount.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,address,address,address)",
          "switchStrategy(uint256,address,address,address)",
          "withdraw(uint256,address,address,address payable,bool)",
          "withdrawAll(address)",
          "withdrawAll(address,address)",
          "approve(uint256,address,address)",
          "increaseAllowance(uint256,address,address)",
          "decreaseAllowance(uint256,address,address)",
          "transfer(uint256,address,address,address)",
          "transferFrom(uint256,address,address,address,address)",
          "balanceInShares(address,address,address)",
          "increaseAllowanceToCreditLine(uint256,address,address)",
          "withdrawFrom(uint256,address,address,address,address payable,bool)",
          "getTotalTokens(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IStrategyRegistry": {
        "src": "contracts/interfaces/IStrategyRegistry.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registry(address)",
          "getStrategies()",
          "addStrategy(address)",
          "removeStrategy(uint256)",
          "updateStrategy(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVerification": {
        "src": "contracts/interfaces/IVerification.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isUser(address,address)",
          "registerMasterAddress(address,bool)",
          "unregisterMasterAddress(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVerifier": {
        "src": "contracts/interfaces/IVerifier.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IYield": {
        "src": "contracts/interfaces/IYield.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "liquidityToken(address)",
          "lockTokens(address,address,uint256)",
          "unlockTokens(address,uint256)",
          "unlockShares(address,uint256)",
          "getTokensForShares(uint256,address)",
          "getSharesForTokens(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AaveLendingPool": {
        "src": "contracts/interfaces/Invest/AaveLendingPool.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "getReserveData(address)",
          "getAddressesProvider()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts/interfaces/Invest/DataTypes.sol:4",
        "version": {
          "withMetadata": "58ce82a00d2a3a375bc9e93caea14855182624879599bd9970f4448ff281a7dc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICEther": {
        "src": "contracts/interfaces/Invest/ICEther.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint()",
          "repayBorrow()",
          "repayBorrowBehalf(address)",
          "liquidateBorrow(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICToken": {
        "src": "contracts/interfaces/Invest/ICToken.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "underlying()",
          "mint(uint256)",
          "redeem(uint256)",
          "liquidateBorrow(address,uint256,address)",
          "repayBorrow(uint256)",
          "repayBorrowBehalf(address,uint256)",
          "balanceOfUnderlying(address)",
          "exchangeRateCurrent()",
          "exchangeRateStored()",
          "supplyRatePerBlock()",
          "redeemUnderlying(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts/interfaces/Invest/ILendingPoolAddressesProvider.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getMarketId()",
          "setMarketId(string)",
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IProtocolDataProvider": {
        "src": "contracts/interfaces/Invest/IProtocolDataProvider.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "ADDRESSES_PROVIDER()",
          "getAllReservesTokens()",
          "getAllATokens()",
          "getReserveConfigurationData(address)",
          "getReserveData(address)",
          "getUserReserveData(address,address)",
          "getReserveTokensAddresses(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IScaledBalanceToken": {
        "src": "contracts/interfaces/Invest/IScaledBalanceToken.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "scaledBalanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETHGateway": {
        "src": "contracts/interfaces/Invest/IWETHGateway.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "depositETH(address,address,uint16)",
          "withdrawETH(uint256,address)",
          "getWETHAddress()",
          "getAWETHAddress()",
          "getLendingPoolAddress()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IyVault": {
        "src": "contracts/interfaces/Invest/IyVault.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "earn()",
          "depositAll()",
          "deposit(uint256)",
          "depositETH()",
          "withdrawAll()",
          "withdrawAllETH()",
          "harvest(address,uint256)",
          "withdraw(uint256)",
          "withdrawETH(uint256)",
          "getPricePerFullShare()",
          "balanceOf(address)",
          "setMin(uint256)",
          "min()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Token": {
        "src": "contracts/mocks/Token.sol:7",
        "version": {
          "withMetadata": "2cefca4061353db3fbd805e6cb4f08a14687f1b3a7db9882c6b98c95c1d12f15",
          "withoutMetadata": "02ef30ef63a92f675133f1dab01b53ce36fbea14d4b9e39bd35ff8d83dda3318",
          "linkedWithoutMetadata": "02ef30ef63a92f675133f1dab01b53ce36fbea14d4b9e39bd35ff8d83dda3318"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Token",
            "src": "contracts/mocks/Token.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Controller": {
        "src": "contracts/mocks/yVault/Controller.sol:49",
        "version": {
          "withMetadata": "ac4483eb14493958af4a0708208c7d4138fabc66df9a83329087672f149c2c6c",
          "withoutMetadata": "f8422af7b1cdc89aef88e4d94848c2bc15b4032fb69f8f5819fe31f2b887de2c",
          "linkedWithoutMetadata": "f8422af7b1cdc89aef88e4d94848c2bc15b4032fb69f8f5819fe31f2b887de2c"
        },
        "inherit": [],
        "libraries": [
          "SafeERC20",
          "Address",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "setRewards(address)",
          "setStrategist(address)",
          "setSplit(uint256)",
          "setOneSplit(address)",
          "setGovernance(address)",
          "setVault(address,address)",
          "approveStrategy(address,address)",
          "revokeStrategy(address,address)",
          "setConverter(address,address,address)",
          "setStrategy(address,address)",
          "earn(address,uint256)",
          "balanceOf(address)",
          "withdrawAll(address)",
          "inCaseTokensGetStuck(address,uint256)",
          "inCaseStrategyTokenGetStuck(address,address)",
          "getExpectedReturn(address,address,uint256)",
          "yearn(address,address,uint256)",
          "withdraw(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Controller",
            "src": "contracts/mocks/yVault/Controller.sol:68"
          },
          {
            "kind": "state-variable-assignment",
            "name": "split",
            "src": "contracts/mocks/yVault/Controller.sol:65"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Controller",
              "label": "governance",
              "type": "t_address",
              "src": "contracts/mocks/yVault/Controller.sol:54"
            },
            {
              "contract": "Controller",
              "label": "strategist",
              "type": "t_address",
              "src": "contracts/mocks/yVault/Controller.sol:55"
            },
            {
              "contract": "Controller",
              "label": "onesplit",
              "type": "t_address",
              "src": "contracts/mocks/yVault/Controller.sol:57"
            },
            {
              "contract": "Controller",
              "label": "rewards",
              "type": "t_address",
              "src": "contracts/mocks/yVault/Controller.sol:58"
            },
            {
              "contract": "Controller",
              "label": "vaults",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/mocks/yVault/Controller.sol:59"
            },
            {
              "contract": "Controller",
              "label": "strategies",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/mocks/yVault/Controller.sol:60"
            },
            {
              "contract": "Controller",
              "label": "converters",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/mocks/yVault/Controller.sol:61"
            },
            {
              "contract": "Controller",
              "label": "approvedStrategies",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts/mocks/yVault/Controller.sol:63"
            },
            {
              "contract": "Controller",
              "label": "split",
              "type": "t_uint256",
              "src": "contracts/mocks/yVault/Controller.sol:65"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Converter": {
        "src": "contracts/mocks/yVault/Controller.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "convert(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IStrategy": {
        "src": "contracts/mocks/yVault/Controller.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "want()",
          "deposit()",
          "withdraw(address)",
          "withdraw(uint256)",
          "withdrawAll()",
          "balanceOf()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OneSplitAudit": {
        "src": "contracts/mocks/yVault/Controller.sol:30",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swap(address,address,uint256,uint256,uint256[],uint256)",
          "getExpectedReturn(address,address,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IController": {
        "src": "contracts/mocks/yVault/IController.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "vaults(address)",
          "strategies(address)",
          "rewards()",
          "approveStrategy(address,address)",
          "setStrategy(address,address)",
          "withdraw(address,uint256)",
          "balanceOf(address)",
          "earn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strategy": {
        "src": "contracts/mocks/yVault/Strategy.sol:25",
        "version": {
          "withMetadata": "aaee75f8a6b6ba2d4a96546d3021277d8a9892115753ce85e65eab01258f843e",
          "withoutMetadata": "d4e38fe1bb0b085334a4ec45bd1f1ab02fd4dba797c0765b24151c050b149275",
          "linkedWithoutMetadata": "d4e38fe1bb0b085334a4ec45bd1f1ab02fd4dba797c0765b24151c050b149275"
        },
        "inherit": [],
        "libraries": [
          "SafeERC20",
          "Address",
          "SafeMath"
        ],
        "methods": [
          "(address,address)",
          "deposit()",
          "withdraw(address)",
          "withdraw(uint256)",
          "withdrawAll()",
          "balanceOf()",
          "setGovernance(address)",
          "setController(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Strategy",
            "src": "contracts/mocks/yVault/Strategy.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Strategy",
              "label": "want",
              "type": "t_address",
              "src": "contracts/mocks/yVault/Strategy.sol:30"
            },
            {
              "contract": "Strategy",
              "label": "governance",
              "type": "t_address",
              "src": "contracts/mocks/yVault/Strategy.sol:31"
            },
            {
              "contract": "Strategy",
              "label": "controller",
              "type": "t_address",
              "src": "contracts/mocks/yVault/Strategy.sol:32"
            },
            {
              "contract": "Strategy",
              "label": "strategist",
              "type": "t_address",
              "src": "contracts/mocks/yVault/Strategy.sol:33"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Detailed": {
        "src": "contracts/mocks/yVault/yVault.sol:115",
        "version": {
          "withMetadata": "02cf59fe9e98dbd8432977f4e66690ec47cbdce29bd4d391d10d486411bfe8eb",
          "withoutMetadata": "a8a92c519a7d739fb50ca90f89412d9f23c419db6fdc720a28dd94774f1358cf",
          "linkedWithoutMetadata": "a8a92c519a7d739fb50ca90f89412d9f23c419db6fdc720a28dd94774f1358cf"
        },
        "inherit": [
          "ERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8)",
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Detailed",
            "src": "contracts/mocks/yVault/yVault.sol:120"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Detailed",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts/mocks/yVault/yVault.sol:116"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts/mocks/yVault/yVault.sol:117"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts/mocks/yVault/yVault.sol:118"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETH": {
        "src": "contracts/mocks/yVault/yVault.sol:206",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "yVault": {
        "src": "contracts/mocks/yVault/yVault.sol:215",
        "version": {
          "withMetadata": "85a13c25da90045f7fb1b26db3fb0808c2a06746562eca8934e3df091c456470",
          "withoutMetadata": "61ee391d31829fe41af524e5b412bd809fb7f87682d3663f5460f575882e648a",
          "linkedWithoutMetadata": "61ee391d31829fe41af524e5b412bd809fb7f87682d3663f5460f575882e648a"
        },
        "inherit": [
          "ERC20Detailed",
          "ERC20",
          "Context"
        ],
        "libraries": [
          "SafeERC20",
          "Address",
          "SafeMath"
        ],
        "methods": [
          "(address,address)",
          "balance()",
          "setMin(uint256)",
          "setGovernance(address)",
          "setController(address)",
          "available()",
          "earn()",
          "depositAll()",
          "deposit(uint256)",
          "depositETH()",
          "withdrawAll()",
          "withdrawAllETH()",
          "harvest(address,uint256)",
          "withdraw(uint256)",
          "withdrawETH(uint256)",
          "getPricePerFullShare()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "yVault",
            "src": "contracts/mocks/yVault/yVault.sol:228"
          },
          {
            "kind": "state-variable-assignment",
            "name": "min",
            "src": "contracts/mocks/yVault/yVault.sol:222"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "yVault",
              "label": "token",
              "type": "t_contract(ERC20)21057",
              "src": "contracts/mocks/yVault/yVault.sol:220"
            },
            {
              "contract": "yVault",
              "label": "min",
              "type": "t_uint256",
              "src": "contracts/mocks/yVault/yVault.sol:222"
            },
            {
              "contract": "yVault",
              "label": "governance",
              "type": "t_address",
              "src": "contracts/mocks/yVault/yVault.sol:225"
            },
            {
              "contract": "yVault",
              "label": "controller",
              "type": "t_address",
              "src": "contracts/mocks/yVault/yVault.sol:226"
            }
          ],
          "types": {
            "t_contract(ERC20)21057": {
              "label": "contract ERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AaveYield": {
        "src": "contracts/yield/AaveYield.sol:20",
        "version": {
          "withMetadata": "53f14e0aed96f00bbf024d36a81f9c0eb4044626b21f8f08bc77b1544c5f8eff",
          "withoutMetadata": "238f7f71ea9f8dce8343df809c82a1ba87036bf203706df0f4feb4acd749cbc0",
          "linkedWithoutMetadata": "238f7f71ea9f8dce8343df809c82a1ba87036bf203706df0f4feb4acd749cbc0"
        },
        "inherit": [
          "ReentrancyGuard",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "IYield"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "initialize(address,address payable,address,address,address)",
          "liquidityToken(address)",
          "updateSavingsAccount(address payable)",
          "updateAaveAddresses(address,address,address)",
          "updateReferralCode(uint16)",
          "emergencyWithdraw(address,address payable)",
          "lockTokens(address,address,uint256)",
          "unlockTokens(address,uint256)",
          "unlockShares(address,uint256)",
          "getTokensForShares(uint256,address)",
          "getSharesForTokens(uint256,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AaveYield",
              "label": "wethGateway",
              "type": "t_address",
              "src": "contracts/yield/AaveYield.sol:27"
            },
            {
              "contract": "AaveYield",
              "label": "protocolDataProvider",
              "type": "t_address",
              "src": "contracts/yield/AaveYield.sol:32"
            },
            {
              "contract": "AaveYield",
              "label": "lendingPoolAddressesProvider",
              "type": "t_address",
              "src": "contracts/yield/AaveYield.sol:37"
            },
            {
              "contract": "AaveYield",
              "label": "savingsAccount",
              "type": "t_address_payable",
              "src": "contracts/yield/AaveYield.sol:42"
            },
            {
              "contract": "AaveYield",
              "label": "referralCode",
              "type": "t_uint16",
              "src": "contracts/yield/AaveYield.sol:47"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_uint16": {
              "label": "uint16"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CompoundYield": {
        "src": "contracts/yield/CompoundYield.sol:18",
        "version": {
          "withMetadata": "b8b7be69756b0eac14d5e71abd9e05187d396bde615ec187bfb6c669c90d2d79",
          "withoutMetadata": "bdfc895f3d7834d7842f11545307a1cbd7ffb3b3b8d7b82880eebb603fd88e41",
          "linkedWithoutMetadata": "bdfc895f3d7834d7842f11545307a1cbd7ffb3b3b8d7b82880eebb603fd88e41"
        },
        "inherit": [
          "ReentrancyGuard",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "IYield"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "initialize(address,address payable)",
          "updateSavingsAccount(address payable)",
          "updateProtocolAddresses(address,address)",
          "emergencyWithdraw(address,address payable)",
          "lockTokens(address,address,uint256)",
          "unlockTokens(address,uint256)",
          "unlockShares(address,uint256)",
          "getTokensForShares(uint256,address)",
          "getSharesForTokens(uint256,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "CompoundYield",
              "label": "savingsAccount",
              "type": "t_address_payable",
              "src": "contracts/yield/CompoundYield.sol:25"
            },
            {
              "contract": "CompoundYield",
              "label": "liquidityToken",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/yield/CompoundYield.sol:30"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "NoYield": {
        "src": "contracts/yield/NoYield.sol:18",
        "version": {
          "withMetadata": "49d10cac65b5caf1b846c5d220560072629da70e640b9cd9fe49c0b11ad8867e",
          "withoutMetadata": "227c1c28587164d379c4055ed68620881d8e5a4594125185c7f9f1f4afcd03e1",
          "linkedWithoutMetadata": "227c1c28587164d379c4055ed68620881d8e5a4594125185c7f9f1f4afcd03e1"
        },
        "inherit": [
          "ReentrancyGuard",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "IYield"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "initialize(address,address payable)",
          "liquidityToken(address)",
          "updateSavingsAccount(address payable)",
          "emergencyWithdraw(address,address payable)",
          "lockTokens(address,address,uint256)",
          "unlockTokens(address,uint256)",
          "unlockShares(address,uint256)",
          "getTokensForShares(uint256,address)",
          "getSharesForTokens(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "NoYield",
              "label": "savingsAccount",
              "type": "t_address_payable",
              "src": "contracts/yield/NoYield.sol:25"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StrategyRegistry": {
        "src": "contracts/yield/StrategyRegistry.sol:9",
        "version": {
          "withMetadata": "4130919006f6f958a1755bb83bc53fea5634d2a4291224baeb5aa8763bf885e6",
          "withoutMetadata": "dd3599e8b2ff05551b63e18ffca810d1e757f5cecde36676cb9b27900af095a2",
          "linkedWithoutMetadata": "dd3599e8b2ff05551b63e18ffca810d1e757f5cecde36676cb9b27900af095a2"
        },
        "inherit": [
          "IStrategyRegistry",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "initialize(address,uint256)",
          "updateMaxStrategies(uint256)",
          "getStrategies()",
          "addStrategy(address)",
          "removeStrategy(uint256)",
          "updateStrategy(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyRegistry",
              "label": "strategies",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/yield/StrategyRegistry.sol:15"
            },
            {
              "contract": "StrategyRegistry",
              "label": "maxStrategies",
              "type": "t_uint256",
              "src": "contracts/yield/StrategyRegistry.sol:20"
            },
            {
              "contract": "StrategyRegistry",
              "label": "registry",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/yield/StrategyRegistry.sol:25"
            }
          ],
          "types": {
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "YearnYield": {
        "src": "contracts/yield/YearnYield.sol:17",
        "version": {
          "withMetadata": "1ea14ecd80fca37c79f9cd709819405a045ae70d1ad05614e997430ddd814277",
          "withoutMetadata": "40be9c0dbabbe1b21dcb4b2729f2b3657842263e95a9276fd8c4dca200ba8667",
          "linkedWithoutMetadata": "40be9c0dbabbe1b21dcb4b2729f2b3657842263e95a9276fd8c4dca200ba8667"
        },
        "inherit": [
          "ReentrancyGuard",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "IYield"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "initialize(address,address payable)",
          "updateSavingsAccount(address payable)",
          "updateProtocolAddresses(address,address)",
          "emergencyWithdraw(address,address payable)",
          "lockTokens(address,address,uint256)",
          "unlockTokens(address,uint256)",
          "unlockShares(address,uint256)",
          "getTokensForShares(uint256,address)",
          "getSharesForTokens(uint256,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "YearnYield",
              "label": "savingsAccount",
              "type": "t_address_payable",
              "src": "contracts/yield/YearnYield.sol:24"
            },
            {
              "contract": "YearnYield",
              "label": "liquidityToken",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/yield/YearnYield.sol:29"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    }
  ]
}
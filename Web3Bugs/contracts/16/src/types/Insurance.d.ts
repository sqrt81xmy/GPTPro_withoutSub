/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type InsuranceDeposit = ContractEventLog<{
  market: string;
  user: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type InsurancePoolDeployed = ContractEventLog<{
  market: string;
  asset: string;
  0: string;
  1: string;
}>;
export type InsuranceWithdraw = ContractEventLog<{
  market: string;
  user: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;

export interface Insurance extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Insurance;
  clone(): Insurance;
  methods: {
    bufferCollateralAmount(): NonPayableTransactionObject<string>;

    collateralAsset(): NonPayableTransactionObject<string>;

    deposit(amount: number | string | BN): NonPayableTransactionObject<void>;

    drainPool(amount: number | string | BN): NonPayableTransactionObject<void>;

    getPoolFundingRate(): NonPayableTransactionObject<string>;

    getPoolHoldings(): NonPayableTransactionObject<string>;

    getPoolTarget(): NonPayableTransactionObject<string>;

    getPoolUserBalance(user: string): NonPayableTransactionObject<string>;

    perpsFactory(): NonPayableTransactionObject<string>;

    publicCollateralAmount(): NonPayableTransactionObject<string>;

    token(): NonPayableTransactionObject<string>;

    tracer(): NonPayableTransactionObject<string>;

    updatePoolAmount(): NonPayableTransactionObject<void>;

    withdraw(amount: number | string | BN): NonPayableTransactionObject<void>;
  };
  events: {
    InsuranceDeposit(cb?: Callback<InsuranceDeposit>): EventEmitter;
    InsuranceDeposit(
      options?: EventOptions,
      cb?: Callback<InsuranceDeposit>
    ): EventEmitter;

    InsurancePoolDeployed(cb?: Callback<InsurancePoolDeployed>): EventEmitter;
    InsurancePoolDeployed(
      options?: EventOptions,
      cb?: Callback<InsurancePoolDeployed>
    ): EventEmitter;

    InsuranceWithdraw(cb?: Callback<InsuranceWithdraw>): EventEmitter;
    InsuranceWithdraw(
      options?: EventOptions,
      cb?: Callback<InsuranceWithdraw>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "InsuranceDeposit", cb: Callback<InsuranceDeposit>): void;
  once(
    event: "InsuranceDeposit",
    options: EventOptions,
    cb: Callback<InsuranceDeposit>
  ): void;

  once(
    event: "InsurancePoolDeployed",
    cb: Callback<InsurancePoolDeployed>
  ): void;
  once(
    event: "InsurancePoolDeployed",
    options: EventOptions,
    cb: Callback<InsurancePoolDeployed>
  ): void;

  once(event: "InsuranceWithdraw", cb: Callback<InsuranceWithdraw>): void;
  once(
    event: "InsuranceWithdraw",
    options: EventOptions,
    cb: Callback<InsuranceWithdraw>
  ): void;
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface PerpetualsMock extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): PerpetualsMock;
  clone(): PerpetualsMock;
  methods: {
    calculateAverageExecutionPrice(
      oldFilledAmount: number | string | BN,
      oldAverage: number | string | BN,
      fillChange: number | string | BN,
      newFillExecutionPrice: number | string | BN
    ): NonPayableTransactionObject<string>;

    calculateTrueMaxLeverage(
      collateralAmount: number | string | BN,
      poolTarget: number | string | BN,
      baseMaxLeverage: number | string | BN,
      lowestMaxLeverage: number | string | BN,
      deleveragingCliff: number | string | BN,
      insurancePoolSwitchStage: number | string | BN
    ): NonPayableTransactionObject<string>;

    canMatch(
      a: [
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      aFilled: number | string | BN,
      b: [
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      bFilled: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    orderId(
      order: [
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    ): NonPayableTransactionObject<string>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}

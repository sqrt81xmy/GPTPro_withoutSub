/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface TraderMock extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): TraderMock;
  clone(): TraderMock;
  methods: {
    EIP712_DOMAIN(): NonPayableTransactionObject<string>;

    averageExecutionPrice(
      arg0: string | number[]
    ): NonPayableTransactionObject<string>;

    chainId(): NonPayableTransactionObject<string>;

    clearFilled(
      order: [
        [
          string,
          string,
          number | string | BN,
          number | string | BN,
          number | string | BN,
          number | string | BN,
          number | string | BN
        ],
        string | number[],
        string | number[],
        number | string | BN
      ]
    ): NonPayableTransactionObject<void>;

    executeTrade(
      makers: [
        [
          string,
          string,
          number | string | BN,
          number | string | BN,
          number | string | BN,
          number | string | BN,
          number | string | BN
        ],
        string | number[],
        string | number[],
        number | string | BN
      ][],
      takers: [
        [
          string,
          string,
          number | string | BN,
          number | string | BN,
          number | string | BN,
          number | string | BN,
          number | string | BN
        ],
        string | number[],
        string | number[],
        number | string | BN
      ][]
    ): NonPayableTransactionObject<void>;

    filled(arg0: string | number[]): NonPayableTransactionObject<string>;

    filledAmount(
      order: [
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    ): NonPayableTransactionObject<string>;

    getAverageExecutionPrice(
      order: [
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    ): NonPayableTransactionObject<string>;

    getDomain(): NonPayableTransactionObject<string>;

    getOrder(
      order: [
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    ): NonPayableTransactionObject<
      [string, string, string, string, string, string, string]
    >;

    hashOrder(
      order: [
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    ): NonPayableTransactionObject<string>;

    orderToSig(arg0: string | number[]): NonPayableTransactionObject<{
      order: [string, string, string, string, string, string, string];
      sigR: string;
      sigS: string;
      sigV: string;
      0: [string, string, string, string, string, string, string];
      1: string;
      2: string;
      3: string;
    }>;

    orders(arg0: string | number[]): NonPayableTransactionObject<{
      maker: string;
      market: string;
      price: string;
      amount: string;
      side: string;
      expires: string;
      created: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
    }>;

    verifySignature(
      signer: string,
      signedOrder: [
        [
          string,
          string,
          number | string | BN,
          number | string | BN,
          number | string | BN,
          number | string | BN,
          number | string | BN
        ],
        string | number[],
        string | number[],
        number | string | BN
      ]
    ): NonPayableTransactionObject<boolean>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}

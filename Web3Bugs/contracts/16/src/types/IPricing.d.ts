/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface IPricing extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IPricing;
  clone(): IPricing;
  methods: {
    currentFundingIndex(): NonPayableTransactionObject<string>;

    currentHour(): NonPayableTransactionObject<string>;

    fairPrice(): NonPayableTransactionObject<string>;

    get24HourPrices(): NonPayableTransactionObject<{
      0: string;
      1: string;
    }>;

    getFundingRate(
      index: number | string | BN
    ): NonPayableTransactionObject<[string, string, string]>;

    getHourlyAvgOraclePrice(
      hour: number | string | BN
    ): NonPayableTransactionObject<string>;

    getHourlyAvgTracerPrice(
      hour: number | string | BN
    ): NonPayableTransactionObject<string>;

    getInsuranceFundingRate(
      index: number | string | BN
    ): NonPayableTransactionObject<[string, string, string]>;

    getTWAPs(
      hour: number | string | BN
    ): NonPayableTransactionObject<[string, string]>;

    recordTrade(
      tradePrice: number | string | BN
    ): NonPayableTransactionObject<void>;

    timeValue(): NonPayableTransactionObject<string>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Deposit = ContractEventLog<{
  user: string;
  amount: string;
  0: string;
  1: string;
}>;
export type FailedOrders = ContractEventLog<{
  long: string;
  short: string;
  longOrderId: string;
  shortOrderId: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type FeeReceiverUpdated = ContractEventLog<{
  receiver: string;
  0: string;
}>;
export type FeeWithdrawn = ContractEventLog<{
  receiver: string;
  feeAmount: string;
  0: string;
  1: string;
}>;
export type MatchedOrders = ContractEventLog<{
  long: string;
  short: string;
  amount: string;
  price: string;
  longOrderId: string;
  shortOrderId: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type Settled = ContractEventLog<{
  account: string;
  margin: string;
  0: string;
  1: string;
}>;
export type Withdraw = ContractEventLog<{
  user: string;
  amount: string;
  0: string;
  1: string;
}>;

export interface TracerPerpetualSwaps extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): TracerPerpetualSwaps;
  clone(): TracerPerpetualSwaps;
  methods: {
    LIQUIDATION_GAS_COST(): NonPayableTransactionObject<string>;

    balances(arg0: string): NonPayableTransactionObject<{
      position: [string, string];
      totalLeveragedValue: string;
      lastUpdatedIndex: string;
      lastUpdatedGasPrice: string;
      0: [string, string];
      1: string;
      2: string;
      3: string;
    }>;

    deleveragingCliff(): NonPayableTransactionObject<string>;

    deposit(amount: number | string | BN): NonPayableTransactionObject<void>;

    feeRate(): NonPayableTransactionObject<string>;

    feeReceiver(): NonPayableTransactionObject<string>;

    fees(): NonPayableTransactionObject<string>;

    fundingRateSensitivity(): NonPayableTransactionObject<string>;

    gasPriceOracle(): NonPayableTransactionObject<string>;

    getBalance(
      account: string
    ): NonPayableTransactionObject<[[string, string], string, string, string]>;

    insuranceContract(): NonPayableTransactionObject<string>;

    insurancePoolSwitchStage(): NonPayableTransactionObject<string>;

    leveragedNotionalValue(): NonPayableTransactionObject<string>;

    liquidationContract(): NonPayableTransactionObject<string>;

    lowestMaxLeverage(): NonPayableTransactionObject<string>;

    marketId(): NonPayableTransactionObject<string>;

    matchOrders(
      order1: [
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      order2: [
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      fillAmount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    maxLeverage(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    pricingContract(): NonPayableTransactionObject<string>;

    quoteTokenDecimals(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    setDeleveragingCliff(
      _deleveragingCliff: number | string | BN
    ): NonPayableTransactionObject<void>;

    setFeeRate(
      _feeRate: number | string | BN
    ): NonPayableTransactionObject<void>;

    setFeeReceiver(_feeReceiver: string): NonPayableTransactionObject<void>;

    setFundingRateSensitivity(
      _fundingRateSensitivity: number | string | BN
    ): NonPayableTransactionObject<void>;

    setGasOracle(_gasOracle: string): NonPayableTransactionObject<void>;

    setInsuranceContract(insurance: string): NonPayableTransactionObject<void>;

    setInsurancePoolSwitchStage(
      _insurancePoolSwitchStage: number | string | BN
    ): NonPayableTransactionObject<void>;

    setLiquidationContract(
      _liquidationContract: string
    ): NonPayableTransactionObject<void>;

    setLowestMaxLeverage(
      _lowestMaxLeverage: number | string | BN
    ): NonPayableTransactionObject<void>;

    setMaxLeverage(
      _maxLeverage: number | string | BN
    ): NonPayableTransactionObject<void>;

    setPricingContract(pricing: string): NonPayableTransactionObject<void>;

    setWhitelist(
      tradingContract: string,
      whitelisted: boolean
    ): NonPayableTransactionObject<void>;

    settle(account: string): NonPayableTransactionObject<void>;

    tracerQuoteToken(): NonPayableTransactionObject<string>;

    tradingWhitelist(arg0: string): NonPayableTransactionObject<boolean>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    trueMaxLeverage(): NonPayableTransactionObject<string>;

    tvl(): NonPayableTransactionObject<string>;

    updateAccountsOnClaim(
      claimant: string,
      amountToGiveToClaimant: number | string | BN,
      liquidatee: string,
      amountToGiveToLiquidatee: number | string | BN,
      amountToTakeFromInsurance: number | string | BN
    ): NonPayableTransactionObject<void>;

    updateAccountsOnLiquidation(
      liquidator: string,
      liquidatee: string,
      liquidatorQuoteChange: number | string | BN,
      liquidatorBaseChange: number | string | BN,
      liquidateeQuoteChange: number | string | BN,
      liquidateeBaseChange: number | string | BN,
      amountToEscrow: number | string | BN
    ): NonPayableTransactionObject<void>;

    userMarginIsValid(account: string): NonPayableTransactionObject<boolean>;

    withdraw(amount: number | string | BN): NonPayableTransactionObject<void>;

    withdrawERC20Token(
      tokenAddress: string,
      to: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    withdrawFees(): NonPayableTransactionObject<void>;
  };
  events: {
    Deposit(cb?: Callback<Deposit>): EventEmitter;
    Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter;

    FailedOrders(cb?: Callback<FailedOrders>): EventEmitter;
    FailedOrders(
      options?: EventOptions,
      cb?: Callback<FailedOrders>
    ): EventEmitter;

    FeeReceiverUpdated(cb?: Callback<FeeReceiverUpdated>): EventEmitter;
    FeeReceiverUpdated(
      options?: EventOptions,
      cb?: Callback<FeeReceiverUpdated>
    ): EventEmitter;

    FeeWithdrawn(cb?: Callback<FeeWithdrawn>): EventEmitter;
    FeeWithdrawn(
      options?: EventOptions,
      cb?: Callback<FeeWithdrawn>
    ): EventEmitter;

    MatchedOrders(cb?: Callback<MatchedOrders>): EventEmitter;
    MatchedOrders(
      options?: EventOptions,
      cb?: Callback<MatchedOrders>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    Settled(cb?: Callback<Settled>): EventEmitter;
    Settled(options?: EventOptions, cb?: Callback<Settled>): EventEmitter;

    Withdraw(cb?: Callback<Withdraw>): EventEmitter;
    Withdraw(options?: EventOptions, cb?: Callback<Withdraw>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Deposit", cb: Callback<Deposit>): void;
  once(event: "Deposit", options: EventOptions, cb: Callback<Deposit>): void;

  once(event: "FailedOrders", cb: Callback<FailedOrders>): void;
  once(
    event: "FailedOrders",
    options: EventOptions,
    cb: Callback<FailedOrders>
  ): void;

  once(event: "FeeReceiverUpdated", cb: Callback<FeeReceiverUpdated>): void;
  once(
    event: "FeeReceiverUpdated",
    options: EventOptions,
    cb: Callback<FeeReceiverUpdated>
  ): void;

  once(event: "FeeWithdrawn", cb: Callback<FeeWithdrawn>): void;
  once(
    event: "FeeWithdrawn",
    options: EventOptions,
    cb: Callback<FeeWithdrawn>
  ): void;

  once(event: "MatchedOrders", cb: Callback<MatchedOrders>): void;
  once(
    event: "MatchedOrders",
    options: EventOptions,
    cb: Callback<MatchedOrders>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "Settled", cb: Callback<Settled>): void;
  once(event: "Settled", options: EventOptions, cb: Callback<Settled>): void;

  once(event: "Withdraw", cb: Callback<Withdraw>): void;
  once(event: "Withdraw", options: EventOptions, cb: Callback<Withdraw>): void;
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface ITracerPerpetualSwaps extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ITracerPerpetualSwaps;
  clone(): ITracerPerpetualSwaps;
  methods: {
    LIQUIDATION_GAS_COST(): NonPayableTransactionObject<string>;

    deleveragingCliff(): NonPayableTransactionObject<string>;

    deposit(amount: number | string | BN): NonPayableTransactionObject<void>;

    feeRate(): NonPayableTransactionObject<string>;

    feeReceiver(): NonPayableTransactionObject<string>;

    fees(): NonPayableTransactionObject<string>;

    fundingRateSensitivity(): NonPayableTransactionObject<string>;

    gasPriceOracle(): NonPayableTransactionObject<string>;

    getBalance(
      account: string
    ): NonPayableTransactionObject<[[string, string], string, string, string]>;

    insurancePoolSwitchStage(): NonPayableTransactionObject<string>;

    leveragedNotionalValue(): NonPayableTransactionObject<string>;

    liquidationContract(): NonPayableTransactionObject<string>;

    lowestMaxLeverage(): NonPayableTransactionObject<string>;

    marketId(): NonPayableTransactionObject<string>;

    matchOrders(
      order1: [
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      order2: [
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      fillAmount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    maxLeverage(): NonPayableTransactionObject<string>;

    quoteTokenDecimals(): NonPayableTransactionObject<string>;

    setDeleveragingCliff(
      _deleveragingCliff: number | string | BN
    ): NonPayableTransactionObject<void>;

    setFeeRate(
      _feeRate: number | string | BN
    ): NonPayableTransactionObject<void>;

    setFeeReceiver(receiver: string): NonPayableTransactionObject<void>;

    setFundingRateSensitivity(
      _fundingRateSensitivity: number | string | BN
    ): NonPayableTransactionObject<void>;

    setGasOracle(_gasOracle: string): NonPayableTransactionObject<void>;

    setInsuranceContract(insurance: string): NonPayableTransactionObject<void>;

    setInsurancePoolSwitchStage(
      _insurancePoolSwitchStage: number | string | BN
    ): NonPayableTransactionObject<void>;

    setLiquidationContract(
      liquidation: string
    ): NonPayableTransactionObject<void>;

    setLowestMaxLeverage(
      _lowestMaxLeverage: number | string | BN
    ): NonPayableTransactionObject<void>;

    setMaxLeverage(
      _maxLeverage: number | string | BN
    ): NonPayableTransactionObject<void>;

    setPricingContract(pricing: string): NonPayableTransactionObject<void>;

    settle(account: string): NonPayableTransactionObject<void>;

    tracerQuoteToken(): NonPayableTransactionObject<string>;

    tradingWhitelist(trader: string): NonPayableTransactionObject<boolean>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    trueMaxLeverage(): NonPayableTransactionObject<string>;

    updateAccountsOnClaim(
      claimant: string,
      amountToGiveToClaimant: number | string | BN,
      liquidatee: string,
      amountToGiveToLiquidatee: number | string | BN,
      amountToTakeFromInsurance: number | string | BN
    ): NonPayableTransactionObject<void>;

    updateAccountsOnLiquidation(
      liquidator: string,
      liquidatee: string,
      liquidatorQuoteChange: number | string | BN,
      liquidatorBaseChange: number | string | BN,
      liquidateeQuoteChange: number | string | BN,
      liquidateeBaseChange: number | string | BN,
      amountToEscrow: number | string | BN
    ): NonPayableTransactionObject<void>;

    withdraw(amount: number | string | BN): NonPayableTransactionObject<void>;

    withdrawFees(): NonPayableTransactionObject<void>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}

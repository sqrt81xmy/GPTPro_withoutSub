/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface ITracerPerpetualsFactory extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ITracerPerpetualsFactory;
  clone(): ITracerPerpetualsFactory;
  methods: {
    daoApproved(market: string): NonPayableTransactionObject<boolean>;

    setApproved(
      market: string,
      value: boolean
    ): NonPayableTransactionObject<void>;

    setInsuranceDeployerContract(
      newInsuranceDeployer: string
    ): NonPayableTransactionObject<void>;

    setLiquidationDeployerContract(
      newLiquidationDeployer: string
    ): NonPayableTransactionObject<void>;

    setPerpsDeployerContract(
      newDeployer: string
    ): NonPayableTransactionObject<void>;

    setPricingDeployerContract(
      newPricingDeployer: string
    ): NonPayableTransactionObject<void>;

    tracersByIndex(
      count: number | string | BN
    ): NonPayableTransactionObject<string>;

    validTracers(market: string): NonPayableTransactionObject<boolean>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}

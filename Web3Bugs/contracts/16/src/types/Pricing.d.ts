/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type FundingRateUpdated = ContractEventLog<{
  fundingRate: string;
  cumulativeFundingRate: string;
  0: string;
  1: string;
}>;
export type HourlyPriceUpdated = ContractEventLog<{
  price: string;
  currentHour: string;
  0: string;
  1: string;
}>;
export type InsuranceFundingRateUpdated = ContractEventLog<{
  insuranceFundingRate: string;
  insuranceFundingRateValue: string;
  0: string;
  1: string;
}>;

export interface Pricing extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Pricing;
  clone(): Pricing;
  methods: {
    currentFundingIndex(): NonPayableTransactionObject<string>;

    currentHour(): NonPayableTransactionObject<string>;

    fairPrice(): NonPayableTransactionObject<string>;

    fundingRates(arg0: number | string | BN): NonPayableTransactionObject<{
      timestamp: string;
      fundingRate: string;
      cumulativeFundingRate: string;
      0: string;
      1: string;
      2: string;
    }>;

    get24HourPrices(): NonPayableTransactionObject<{
      0: string;
      1: string;
    }>;

    getFundingRate(
      index: number | string | BN
    ): NonPayableTransactionObject<[string, string, string]>;

    getHourlyAvgOraclePrice(
      hour: number | string | BN
    ): NonPayableTransactionObject<string>;

    getHourlyAvgTracerPrice(
      hour: number | string | BN
    ): NonPayableTransactionObject<string>;

    getInsuranceFundingRate(
      index: number | string | BN
    ): NonPayableTransactionObject<[string, string, string]>;

    getTWAPs(
      hour: number | string | BN
    ): NonPayableTransactionObject<[string, string]>;

    insurance(): NonPayableTransactionObject<string>;

    insuranceFundingRates(
      arg0: number | string | BN
    ): NonPayableTransactionObject<{
      timestamp: string;
      fundingRate: string;
      cumulativeFundingRate: string;
      0: string;
      1: string;
      2: string;
    }>;

    oracle(): NonPayableTransactionObject<string>;

    recordTrade(
      tradePrice: number | string | BN
    ): NonPayableTransactionObject<void>;

    startLast24Hours(): NonPayableTransactionObject<string>;

    startLastHour(): NonPayableTransactionObject<string>;

    timeValue(): NonPayableTransactionObject<string>;

    tracer(): NonPayableTransactionObject<string>;
  };
  events: {
    FundingRateUpdated(cb?: Callback<FundingRateUpdated>): EventEmitter;
    FundingRateUpdated(
      options?: EventOptions,
      cb?: Callback<FundingRateUpdated>
    ): EventEmitter;

    HourlyPriceUpdated(cb?: Callback<HourlyPriceUpdated>): EventEmitter;
    HourlyPriceUpdated(
      options?: EventOptions,
      cb?: Callback<HourlyPriceUpdated>
    ): EventEmitter;

    InsuranceFundingRateUpdated(
      cb?: Callback<InsuranceFundingRateUpdated>
    ): EventEmitter;
    InsuranceFundingRateUpdated(
      options?: EventOptions,
      cb?: Callback<InsuranceFundingRateUpdated>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "FundingRateUpdated", cb: Callback<FundingRateUpdated>): void;
  once(
    event: "FundingRateUpdated",
    options: EventOptions,
    cb: Callback<FundingRateUpdated>
  ): void;

  once(event: "HourlyPriceUpdated", cb: Callback<HourlyPriceUpdated>): void;
  once(
    event: "HourlyPriceUpdated",
    options: EventOptions,
    cb: Callback<HourlyPriceUpdated>
  ): void;

  once(
    event: "InsuranceFundingRateUpdated",
    cb: Callback<InsuranceFundingRateUpdated>
  ): void;
  once(
    event: "InsuranceFundingRateUpdated",
    options: EventOptions,
    cb: Callback<InsuranceFundingRateUpdated>
  ): void;
}

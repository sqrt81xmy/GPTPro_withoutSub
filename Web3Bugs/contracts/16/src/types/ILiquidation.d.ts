/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface ILiquidation extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ILiquidation;
  clone(): ILiquidation;
  methods: {
    calcAmountToReturn(
      escrowId: number | string | BN,
      orders: [
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ][],
      traderContract: string
    ): NonPayableTransactionObject<string>;

    calcUnitsSold(
      orders: [
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ][],
      traderContract: string,
      receiptId: number | string | BN
    ): NonPayableTransactionObject<{
      0: string;
      1: string;
    }>;

    claimEscrow(
      receiptId: number | string | BN
    ): NonPayableTransactionObject<void>;

    claimReceipt(
      receiptId: number | string | BN,
      orders: [
        string,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ][],
      traderContract: string
    ): NonPayableTransactionObject<void>;

    currentLiquidationId(): NonPayableTransactionObject<string>;

    getLiquidationReceipt(
      id: number | string | BN
    ): NonPayableTransactionObject<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        boolean,
        string,
        boolean
      ]
    >;

    liquidate(
      amount: number | string | BN,
      account: string
    ): NonPayableTransactionObject<void>;

    maxSlippage(): NonPayableTransactionObject<string>;

    minimumLeftoverGasCostMultiplier(): NonPayableTransactionObject<string>;

    releaseTime(): NonPayableTransactionObject<string>;

    setMaxSlippage(
      _maxSlippage: number | string | BN
    ): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface LibPricesMock extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): LibPricesMock;
  clone(): LibPricesMock;
  methods: {
    averagePrice(
      price: [number | string | BN, number | string | BN]
    ): NonPayableTransactionObject<string>;

    averagePriceForPeriod(
      prices: [number | string | BN, number | string | BN][]
    ): NonPayableTransactionObject<string>;

    calculateTWAP(
      hour: number | string | BN,
      tracerPrices: [number | string | BN, number | string | BN][],
      oraclePrices: [number | string | BN, number | string | BN][]
    ): NonPayableTransactionObject<[string, string]>;

    fairPrice(
      oraclePrice: number | string | BN,
      _timeValue: number | string | BN
    ): NonPayableTransactionObject<string>;

    globalLeverage(
      _globalLeverage: number | string | BN,
      oldLeverage: number | string | BN,
      newLeverage: number | string | BN
    ): NonPayableTransactionObject<string>;

    timeValue(
      averageTracerPrice: number | string | BN,
      averageOraclePrice: number | string | BN
    ): NonPayableTransactionObject<string>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}

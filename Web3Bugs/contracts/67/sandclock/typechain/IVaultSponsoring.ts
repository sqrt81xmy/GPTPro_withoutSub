/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IVaultSponsoringInterface extends utils.Interface {
  functions: {
    "forceUnsponsor(address,uint256[])": FunctionFragment;
    "sponsor(uint256,uint256)": FunctionFragment;
    "totalSponsored()": FunctionFragment;
    "unsponsor(address,uint256[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "forceUnsponsor",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "sponsor",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSponsored",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unsponsor",
    values: [string, BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "forceUnsponsor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sponsor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSponsored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unsponsor", data: BytesLike): Result;

  events: {
    "Sponsored(uint256,uint256,address,uint256)": EventFragment;
    "Unsponsored(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Sponsored"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unsponsored"): EventFragment;
}

export type SponsoredEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber],
  {
    id: BigNumber;
    amount: BigNumber;
    depositor: string;
    lockedUntil: BigNumber;
  }
>;

export type SponsoredEventFilter = TypedEventFilter<SponsoredEvent>;

export type UnsponsoredEvent = TypedEvent<[BigNumber], { id: BigNumber }>;

export type UnsponsoredEventFilter = TypedEventFilter<UnsponsoredEvent>;

export interface IVaultSponsoring extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVaultSponsoringInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    forceUnsponsor(
      _to: string,
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sponsor(
      _amount: BigNumberish,
      _lockedUntil: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalSponsored(overrides?: CallOverrides): Promise<[BigNumber]>;

    unsponsor(
      _to: string,
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  forceUnsponsor(
    _to: string,
    _ids: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sponsor(
    _amount: BigNumberish,
    _lockedUntil: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalSponsored(overrides?: CallOverrides): Promise<BigNumber>;

  unsponsor(
    _to: string,
    _ids: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    forceUnsponsor(
      _to: string,
      _ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    sponsor(
      _amount: BigNumberish,
      _lockedUntil: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalSponsored(overrides?: CallOverrides): Promise<BigNumber>;

    unsponsor(
      _to: string,
      _ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Sponsored(uint256,uint256,address,uint256)"(
      id?: BigNumberish | null,
      amount?: null,
      depositor?: string | null,
      lockedUntil?: null
    ): SponsoredEventFilter;
    Sponsored(
      id?: BigNumberish | null,
      amount?: null,
      depositor?: string | null,
      lockedUntil?: null
    ): SponsoredEventFilter;

    "Unsponsored(uint256)"(id?: BigNumberish | null): UnsponsoredEventFilter;
    Unsponsored(id?: BigNumberish | null): UnsponsoredEventFilter;
  };

  estimateGas: {
    forceUnsponsor(
      _to: string,
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sponsor(
      _amount: BigNumberish,
      _lockedUntil: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalSponsored(overrides?: CallOverrides): Promise<BigNumber>;

    unsponsor(
      _to: string,
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    forceUnsponsor(
      _to: string,
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sponsor(
      _amount: BigNumberish,
      _lockedUntil: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalSponsored(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unsponsor(
      _to: string,
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface BaseStrategyInterface extends utils.Interface {
  functions: {
    "aUstToken()": FunctionFragment;
    "convertedUst()": FunctionFragment;
    "depositOperationLength()": FunctionFragment;
    "depositOperations(uint256)": FunctionFragment;
    "doHardWork()": FunctionFragment;
    "ethAnchorRouter()": FunctionFragment;
    "exchangeRateFeeder()": FunctionFragment;
    "finishDepositStable(uint256)": FunctionFragment;
    "finishRedeemStable(uint256)": FunctionFragment;
    "initRedeemStable(uint256)": FunctionFragment;
    "investedAssets()": FunctionFragment;
    "isTrusted(address)": FunctionFragment;
    "pendingDeposits()": FunctionFragment;
    "pendingRedeems()": FunctionFragment;
    "perfFeePct()": FunctionFragment;
    "redeemOperationLength()": FunctionFragment;
    "redeemOperations(uint256)": FunctionFragment;
    "setIsTrusted(address,bool)": FunctionFragment;
    "setPerfFeePct(uint16)": FunctionFragment;
    "treasury()": FunctionFragment;
    "underlying()": FunctionFragment;
    "ustToken()": FunctionFragment;
    "vault()": FunctionFragment;
    "withdrawAllToVault()": FunctionFragment;
    "withdrawToVault(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "aUstToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "convertedUst",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositOperationLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositOperations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "doHardWork",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ethAnchorRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeRateFeeder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finishDepositStable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finishRedeemStable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initRedeemStable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "investedAssets",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isTrusted", values: [string]): string;
  encodeFunctionData(
    functionFragment: "pendingDeposits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingRedeems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "perfFeePct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemOperationLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemOperations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsTrusted",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPerfFeePct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ustToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawAllToVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToVault",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "aUstToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convertedUst",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositOperationLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositOperations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "doHardWork", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ethAnchorRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRateFeeder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finishDepositStable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finishRedeemStable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initRedeemStable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isTrusted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingRedeems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "perfFeePct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemOperationLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemOperations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsTrusted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPerfFeePct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ustToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToVault",
    data: BytesLike
  ): Result;

  events: {
    "PerfFeeClaimed(uint256)": EventFragment;
    "PerfFeePctUpdated(uint256)": EventFragment;
    "ProfitShared(uint256)": EventFragment;
    "UserTrustUpdated(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PerfFeeClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PerfFeePctUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProfitShared"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserTrustUpdated"): EventFragment;
}

export type PerfFeeClaimedEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type PerfFeeClaimedEventFilter = TypedEventFilter<PerfFeeClaimedEvent>;

export type PerfFeePctUpdatedEvent = TypedEvent<
  [BigNumber],
  { pct: BigNumber }
>;

export type PerfFeePctUpdatedEventFilter =
  TypedEventFilter<PerfFeePctUpdatedEvent>;

export type ProfitSharedEvent = TypedEvent<[BigNumber], { amount: BigNumber }>;

export type ProfitSharedEventFilter = TypedEventFilter<ProfitSharedEvent>;

export type UserTrustUpdatedEvent = TypedEvent<
  [string, boolean],
  { user: string; trusted: boolean }
>;

export type UserTrustUpdatedEventFilter =
  TypedEventFilter<UserTrustUpdatedEvent>;

export interface BaseStrategy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BaseStrategyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    aUstToken(overrides?: CallOverrides): Promise<[string]>;

    convertedUst(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositOperationLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositOperations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { operator: string; amount: BigNumber }>;

    doHardWork(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ethAnchorRouter(overrides?: CallOverrides): Promise<[string]>;

    exchangeRateFeeder(overrides?: CallOverrides): Promise<[string]>;

    finishDepositStable(
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finishRedeemStable(
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initRedeemStable(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    investedAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    isTrusted(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    pendingDeposits(overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingRedeems(overrides?: CallOverrides): Promise<[BigNumber]>;

    perfFeePct(overrides?: CallOverrides): Promise<[number]>;

    redeemOperationLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    redeemOperations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { operator: string; amount: BigNumber }>;

    setIsTrusted(
      user: string,
      trusted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPerfFeePct(
      _perfFeePct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    underlying(overrides?: CallOverrides): Promise<[string]>;

    ustToken(overrides?: CallOverrides): Promise<[string]>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    withdrawAllToVault(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawToVault(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  aUstToken(overrides?: CallOverrides): Promise<string>;

  convertedUst(overrides?: CallOverrides): Promise<BigNumber>;

  depositOperationLength(overrides?: CallOverrides): Promise<BigNumber>;

  depositOperations(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { operator: string; amount: BigNumber }>;

  doHardWork(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ethAnchorRouter(overrides?: CallOverrides): Promise<string>;

  exchangeRateFeeder(overrides?: CallOverrides): Promise<string>;

  finishDepositStable(
    idx: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finishRedeemStable(
    idx: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initRedeemStable(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  investedAssets(overrides?: CallOverrides): Promise<BigNumber>;

  isTrusted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  pendingDeposits(overrides?: CallOverrides): Promise<BigNumber>;

  pendingRedeems(overrides?: CallOverrides): Promise<BigNumber>;

  perfFeePct(overrides?: CallOverrides): Promise<number>;

  redeemOperationLength(overrides?: CallOverrides): Promise<BigNumber>;

  redeemOperations(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { operator: string; amount: BigNumber }>;

  setIsTrusted(
    user: string,
    trusted: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPerfFeePct(
    _perfFeePct: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  underlying(overrides?: CallOverrides): Promise<string>;

  ustToken(overrides?: CallOverrides): Promise<string>;

  vault(overrides?: CallOverrides): Promise<string>;

  withdrawAllToVault(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawToVault(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    aUstToken(overrides?: CallOverrides): Promise<string>;

    convertedUst(overrides?: CallOverrides): Promise<BigNumber>;

    depositOperationLength(overrides?: CallOverrides): Promise<BigNumber>;

    depositOperations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { operator: string; amount: BigNumber }>;

    doHardWork(overrides?: CallOverrides): Promise<void>;

    ethAnchorRouter(overrides?: CallOverrides): Promise<string>;

    exchangeRateFeeder(overrides?: CallOverrides): Promise<string>;

    finishDepositStable(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    finishRedeemStable(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initRedeemStable(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    investedAssets(overrides?: CallOverrides): Promise<BigNumber>;

    isTrusted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    pendingDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    pendingRedeems(overrides?: CallOverrides): Promise<BigNumber>;

    perfFeePct(overrides?: CallOverrides): Promise<number>;

    redeemOperationLength(overrides?: CallOverrides): Promise<BigNumber>;

    redeemOperations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { operator: string; amount: BigNumber }>;

    setIsTrusted(
      user: string,
      trusted: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setPerfFeePct(
      _perfFeePct: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    underlying(overrides?: CallOverrides): Promise<string>;

    ustToken(overrides?: CallOverrides): Promise<string>;

    vault(overrides?: CallOverrides): Promise<string>;

    withdrawAllToVault(overrides?: CallOverrides): Promise<void>;

    withdrawToVault(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "PerfFeeClaimed(uint256)"(amount?: null): PerfFeeClaimedEventFilter;
    PerfFeeClaimed(amount?: null): PerfFeeClaimedEventFilter;

    "PerfFeePctUpdated(uint256)"(pct?: null): PerfFeePctUpdatedEventFilter;
    PerfFeePctUpdated(pct?: null): PerfFeePctUpdatedEventFilter;

    "ProfitShared(uint256)"(amount?: null): ProfitSharedEventFilter;
    ProfitShared(amount?: null): ProfitSharedEventFilter;

    "UserTrustUpdated(address,bool)"(
      user?: string | null,
      trusted?: null
    ): UserTrustUpdatedEventFilter;
    UserTrustUpdated(
      user?: string | null,
      trusted?: null
    ): UserTrustUpdatedEventFilter;
  };

  estimateGas: {
    aUstToken(overrides?: CallOverrides): Promise<BigNumber>;

    convertedUst(overrides?: CallOverrides): Promise<BigNumber>;

    depositOperationLength(overrides?: CallOverrides): Promise<BigNumber>;

    depositOperations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    doHardWork(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ethAnchorRouter(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeRateFeeder(overrides?: CallOverrides): Promise<BigNumber>;

    finishDepositStable(
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finishRedeemStable(
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initRedeemStable(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    investedAssets(overrides?: CallOverrides): Promise<BigNumber>;

    isTrusted(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    pendingDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    pendingRedeems(overrides?: CallOverrides): Promise<BigNumber>;

    perfFeePct(overrides?: CallOverrides): Promise<BigNumber>;

    redeemOperationLength(overrides?: CallOverrides): Promise<BigNumber>;

    redeemOperations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setIsTrusted(
      user: string,
      trusted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPerfFeePct(
      _perfFeePct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;

    ustToken(overrides?: CallOverrides): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawAllToVault(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawToVault(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    aUstToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    convertedUst(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositOperationLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositOperations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    doHardWork(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ethAnchorRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchangeRateFeeder(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finishDepositStable(
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finishRedeemStable(
      idx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initRedeemStable(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    investedAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isTrusted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingDeposits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingRedeems(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    perfFeePct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemOperationLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeemOperations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setIsTrusted(
      user: string,
      trusted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPerfFeePct(
      _perfFeePct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ustToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawAllToVault(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawToVault(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockCurvePool, MockCurvePoolInterface } from "../MockCurvePool";

const _abi = [
  {
    inputs: [
      {
        internalType: "int128",
        name: "i",
        type: "int128",
      },
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
    ],
    name: "addToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int128",
        name: "i",
        type: "int128",
      },
      {
        internalType: "int128",
        name: "j",
        type: "int128",
      },
      {
        internalType: "uint256",
        name: "dx",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "min_dy",
        type: "uint256",
      },
    ],
    name: "exchange_underlying",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int128",
        name: "i",
        type: "int128",
      },
      {
        internalType: "int128",
        name: "j",
        type: "int128",
      },
      {
        internalType: "uint256",
        name: "dx",
        type: "uint256",
      },
    ],
    name: "get_dy_underlying",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    name: "rate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    name: "tokens",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int128",
        name: "i",
        type: "int128",
      },
      {
        internalType: "int128",
        name: "j",
        type: "int128",
      },
      {
        internalType: "uint256",
        name: "_rate",
        type: "uint256",
      },
    ],
    name: "updateRate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506107df806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063a6417ed611610050578063a6417ed614610109578063e7bb02ec1461011c578063eed97efd1461017757600080fd5b806307211ef7146100775780639262c8dd1461009d57806398ad389d146100c8575b600080fd5b61008a6100853660046105ae565b6101ab565b6040519081526020015b60405180910390f35b61008a6100ab3660046105ea565b600160209081526000928352604080842090915290825290205481565b6100f16100d636600461061d565b6000602081905290815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610094565b61008a610117366004610638565b6101f4565b61017561012a36600461067a565b600f9190910b600090815260208190526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03909216919091179055565b005b6101756101853660046105ae565b600f92830b60009081526001602090815260408083209490950b82529290925291902055565b600f83810b60009081526001602090815260408083209386900b8352929052908120546101e083670de0b6b3a76400006106bd565b6101ea91906106ea565b90505b9392505050565b600f84900b60009081526020819052604081205461021d906001600160a01b031633308661029d565b600f85810b60009081526001602090815260408083209388900b83529290529081205461025285670de0b6b3a76400006106bd565b61025c91906106ea565b600f86900b600090815260208190526040902054909150610287906001600160a01b03163383610354565b8281101561029457600080fd5b95945050505050565b6040516001600160a01b038085166024830152831660448201526064810182905261034e9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526103a2565b50505050565b6040516001600160a01b03831660248201526044810182905261039d9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064016102ea565b505050565b60006103f7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661048c9092919063ffffffff16565b80519091501561039d5780806020019051810190610415919061070c565b61039d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b60606101ea848460008585843b6104e55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610483565b600080866001600160a01b03168587604051610501919061075a565b60006040518083038185875af1925050503d806000811461053e576040519150601f19603f3d011682016040523d82523d6000602084013e610543565b606091505b509150915061055382828661055e565b979650505050505050565b6060831561056d5750816101ed565b82511561057d5782518084602001fd5b8160405162461bcd60e51b81526004016104839190610776565b8035600f81900b81146105a957600080fd5b919050565b6000806000606084860312156105c357600080fd5b6105cc84610597565b92506105da60208501610597565b9150604084013590509250925092565b600080604083850312156105fd57600080fd5b61060683610597565b915061061460208401610597565b90509250929050565b60006020828403121561062f57600080fd5b6101ed82610597565b6000806000806080858703121561064e57600080fd5b61065785610597565b935061066560208601610597565b93969395505050506040820135916060013590565b6000806040838503121561068d57600080fd5b61069683610597565b915060208301356001600160a01b03811681146106b257600080fd5b809150509250929050565b60008160001904831182151516156106e557634e487b7160e01b600052601160045260246000fd5b500290565b60008261070757634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561071e57600080fd5b815180151581146101ed57600080fd5b60005b83811015610749578181015183820152602001610731565b8381111561034e5750506000910152565b6000825161076c81846020870161072e565b9190910192915050565b602081526000825180602084015261079581604085016020870161072e565b601f01601f1916919091016040019291505056fea2646970667358221220f187448c672a5bfcc387a6d6087c53a85935e45d3872b3af98540145bd39665a64736f6c634300080a0033";

type MockCurvePoolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockCurvePoolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockCurvePool__factory extends ContractFactory {
  constructor(...args: MockCurvePoolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockCurvePool> {
    return super.deploy(overrides || {}) as Promise<MockCurvePool>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockCurvePool {
    return super.attach(address) as MockCurvePool;
  }
  connect(signer: Signer): MockCurvePool__factory {
    return super.connect(signer) as MockCurvePool__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockCurvePoolInterface {
    return new utils.Interface(_abi) as MockCurvePoolInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockCurvePool {
    return new Contract(address, _abi, signerOrProvider) as MockCurvePool;
  }
}

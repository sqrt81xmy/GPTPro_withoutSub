/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Trust",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Trust__factory>;
    getContractFactory(
      name: "IIntegration",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIntegration__factory>;
    getContractFactory(
      name: "PercentMath",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PercentMath__factory>;
    getContractFactory(
      name: "MockCurvePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockCurvePool__factory>;
    getContractFactory(
      name: "MockERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockERC20__factory>;
    getContractFactory(
      name: "MockEthAnchorRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockEthAnchorRouter__factory>;
    getContractFactory(
      name: "MockExchangeRateFeeder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockExchangeRateFeeder__factory>;
    getContractFactory(
      name: "MockStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockStrategy__factory>;
    getContractFactory(
      name: "MockVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockVault__factory>;
    getContractFactory(
      name: "SandclockFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SandclockFactory__factory>;
    getContractFactory(
      name: "IConversionPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IConversionPool__factory>;
    getContractFactory(
      name: "IEthAnchorRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEthAnchorRouter__factory>;
    getContractFactory(
      name: "IExchangeRateFeeder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExchangeRateFeeder__factory>;
    getContractFactory(
      name: "BaseStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseStrategy__factory>;
    getContractFactory(
      name: "ICurve",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICurve__factory>;
    getContractFactory(
      name: "IStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStrategy__factory>;
    getContractFactory(
      name: "NonUSTStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NonUSTStrategy__factory>;
    getContractFactory(
      name: "USTStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.USTStrategy__factory>;
    getContractFactory(
      name: "TestERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestERC20__factory>;
    getContractFactory(
      name: "Vault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Vault__factory>;
    getContractFactory(
      name: "Claimers",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Claimers__factory>;
    getContractFactory(
      name: "Depositors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Depositors__factory>;
    getContractFactory(
      name: "IClaimers",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IClaimers__factory>;
    getContractFactory(
      name: "IVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVault__factory>;
    getContractFactory(
      name: "IVaultSponsoring",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVaultSponsoring__factory>;

    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "Trust",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Trust>;
    getContractAt(
      name: "IIntegration",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIntegration>;
    getContractAt(
      name: "PercentMath",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PercentMath>;
    getContractAt(
      name: "MockCurvePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockCurvePool>;
    getContractAt(
      name: "MockERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockERC20>;
    getContractAt(
      name: "MockEthAnchorRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockEthAnchorRouter>;
    getContractAt(
      name: "MockExchangeRateFeeder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockExchangeRateFeeder>;
    getContractAt(
      name: "MockStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockStrategy>;
    getContractAt(
      name: "MockVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockVault>;
    getContractAt(
      name: "SandclockFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SandclockFactory>;
    getContractAt(
      name: "IConversionPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IConversionPool>;
    getContractAt(
      name: "IEthAnchorRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEthAnchorRouter>;
    getContractAt(
      name: "IExchangeRateFeeder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IExchangeRateFeeder>;
    getContractAt(
      name: "BaseStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseStrategy>;
    getContractAt(
      name: "ICurve",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICurve>;
    getContractAt(
      name: "IStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStrategy>;
    getContractAt(
      name: "NonUSTStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NonUSTStrategy>;
    getContractAt(
      name: "USTStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.USTStrategy>;
    getContractAt(
      name: "TestERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestERC20>;
    getContractAt(
      name: "Vault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Vault>;
    getContractAt(
      name: "Claimers",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Claimers>;
    getContractAt(
      name: "Depositors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Depositors>;
    getContractAt(
      name: "IClaimers",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IClaimers>;
    getContractAt(
      name: "IVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVault>;
    getContractAt(
      name: "IVaultSponsoring",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVaultSponsoring>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}

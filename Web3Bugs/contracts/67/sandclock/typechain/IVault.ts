/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type ClaimParamsStruct = {
  pct: BigNumberish;
  beneficiary: string;
  data: BytesLike;
};

export type ClaimParamsStructOutput = [number, string, string] & {
  pct: number;
  beneficiary: string;
  data: string;
};

export type DepositParamsStruct = {
  amount: BigNumberish;
  claims: ClaimParamsStruct[];
  lockedUntil: BigNumberish;
};

export type DepositParamsStructOutput = [
  BigNumber,
  ClaimParamsStructOutput[],
  BigNumber
] & {
  amount: BigNumber;
  claims: ClaimParamsStructOutput[];
  lockedUntil: BigNumber;
};

export interface IVaultInterface extends utils.Interface {
  functions: {
    "claimYield(address)": FunctionFragment;
    "deposit((uint256,(uint16,address,bytes)[],uint256))": FunctionFragment;
    "forceWithdraw(address,uint256[])": FunctionFragment;
    "investPerc()": FunctionFragment;
    "investableAmount()": FunctionFragment;
    "minLockPeriod()": FunctionFragment;
    "setInvestPerc(uint16)": FunctionFragment;
    "setStrategy(address)": FunctionFragment;
    "totalShares()": FunctionFragment;
    "totalUnderlying()": FunctionFragment;
    "underlying()": FunctionFragment;
    "updateInvested()": FunctionFragment;
    "withdraw(address,uint256[])": FunctionFragment;
    "yieldFor(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "claimYield", values: [string]): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [DepositParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "forceWithdraw",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "investPerc",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "investableAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minLockPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setInvestPerc",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setStrategy", values: [string]): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalUnderlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateInvested",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "yieldFor", values: [string]): string;

  decodeFunctionResult(functionFragment: "claimYield", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "investPerc", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "investableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minLockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInvestPerc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateInvested",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yieldFor", data: BytesLike): Result;

  events: {
    "DepositBurned(uint256,uint256,address)": EventFragment;
    "DepositMinted(uint256,uint256,uint256,uint256,address,address,uint256,uint256)": EventFragment;
    "InvestPercentageUpdated(uint256)": EventFragment;
    "Invested(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DepositBurned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InvestPercentageUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Invested"): EventFragment;
}

export type DepositBurnedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { id: BigNumber; shares: BigNumber; to: string }
>;

export type DepositBurnedEventFilter = TypedEventFilter<DepositBurnedEvent>;

export type DepositMintedEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber
  ],
  {
    id: BigNumber;
    groupId: BigNumber;
    amount: BigNumber;
    shares: BigNumber;
    depositor: string;
    claimer: string;
    claimerId: BigNumber;
    lockedUntil: BigNumber;
  }
>;

export type DepositMintedEventFilter = TypedEventFilter<DepositMintedEvent>;

export type InvestPercentageUpdatedEvent = TypedEvent<
  [BigNumber],
  { percentage: BigNumber }
>;

export type InvestPercentageUpdatedEventFilter =
  TypedEventFilter<InvestPercentageUpdatedEvent>;

export type InvestedEvent = TypedEvent<[BigNumber], { amount: BigNumber }>;

export type InvestedEventFilter = TypedEventFilter<InvestedEvent>;

export interface IVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimYield(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _params: DepositParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forceWithdraw(
      _to: string,
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    investPerc(overrides?: CallOverrides): Promise<[BigNumber]>;

    investableAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    minLockPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    setInvestPerc(
      _investPct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStrategy(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalUnderlying(overrides?: CallOverrides): Promise<[BigNumber]>;

    underlying(overrides?: CallOverrides): Promise<[string]>;

    updateInvested(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _to: string,
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    yieldFor(_to: string, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  claimYield(
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _params: DepositParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  forceWithdraw(
    _to: string,
    _ids: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  investPerc(overrides?: CallOverrides): Promise<BigNumber>;

  investableAmount(overrides?: CallOverrides): Promise<BigNumber>;

  minLockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  setInvestPerc(
    _investPct: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStrategy(
    _strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalShares(overrides?: CallOverrides): Promise<BigNumber>;

  totalUnderlying(overrides?: CallOverrides): Promise<BigNumber>;

  underlying(overrides?: CallOverrides): Promise<string>;

  updateInvested(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _to: string,
    _ids: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  yieldFor(_to: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    claimYield(_to: string, overrides?: CallOverrides): Promise<void>;

    deposit(
      _params: DepositParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    forceWithdraw(
      _to: string,
      _ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    investPerc(overrides?: CallOverrides): Promise<BigNumber>;

    investableAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minLockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    setInvestPerc(
      _investPct: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStrategy(_strategy: string, overrides?: CallOverrides): Promise<void>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    totalUnderlying(overrides?: CallOverrides): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<string>;

    updateInvested(overrides?: CallOverrides): Promise<void>;

    withdraw(
      _to: string,
      _ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    yieldFor(_to: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "DepositBurned(uint256,uint256,address)"(
      id?: BigNumberish | null,
      shares?: null,
      to?: string | null
    ): DepositBurnedEventFilter;
    DepositBurned(
      id?: BigNumberish | null,
      shares?: null,
      to?: string | null
    ): DepositBurnedEventFilter;

    "DepositMinted(uint256,uint256,uint256,uint256,address,address,uint256,uint256)"(
      id?: BigNumberish | null,
      groupId?: null,
      amount?: null,
      shares?: null,
      depositor?: string | null,
      claimer?: string | null,
      claimerId?: null,
      lockedUntil?: null
    ): DepositMintedEventFilter;
    DepositMinted(
      id?: BigNumberish | null,
      groupId?: null,
      amount?: null,
      shares?: null,
      depositor?: string | null,
      claimer?: string | null,
      claimerId?: null,
      lockedUntil?: null
    ): DepositMintedEventFilter;

    "InvestPercentageUpdated(uint256)"(
      percentage?: null
    ): InvestPercentageUpdatedEventFilter;
    InvestPercentageUpdated(
      percentage?: null
    ): InvestPercentageUpdatedEventFilter;

    "Invested(uint256)"(amount?: null): InvestedEventFilter;
    Invested(amount?: null): InvestedEventFilter;
  };

  estimateGas: {
    claimYield(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      _params: DepositParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    forceWithdraw(
      _to: string,
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    investPerc(overrides?: CallOverrides): Promise<BigNumber>;

    investableAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minLockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    setInvestPerc(
      _investPct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStrategy(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    totalUnderlying(overrides?: CallOverrides): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;

    updateInvested(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      _to: string,
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    yieldFor(_to: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    claimYield(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _params: DepositParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    forceWithdraw(
      _to: string,
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    investPerc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    investableAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minLockPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setInvestPerc(
      _investPct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStrategy(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalUnderlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateInvested(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _to: string,
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    yieldFor(
      _to: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface SandclockFactoryInterface extends utils.Interface {
  functions: {
    "deployDCA(bytes,uint256)": FunctionFragment;
    "deployVault(bytes,uint256)": FunctionFragment;
    "isTrusted(address)": FunctionFragment;
    "setIsTrusted(address,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "deployDCA",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployVault",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isTrusted", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setIsTrusted",
    values: [string, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "deployDCA", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isTrusted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setIsTrusted",
    data: BytesLike
  ): Result;

  events: {
    "NewDCA(address,uint256)": EventFragment;
    "NewVault(address,uint256)": EventFragment;
    "UserTrustUpdated(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewDCA"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserTrustUpdated"): EventFragment;
}

export type NewDCAEvent = TypedEvent<
  [string, BigNumber],
  { dca: string; salt: BigNumber }
>;

export type NewDCAEventFilter = TypedEventFilter<NewDCAEvent>;

export type NewVaultEvent = TypedEvent<
  [string, BigNumber],
  { vault: string; salt: BigNumber }
>;

export type NewVaultEventFilter = TypedEventFilter<NewVaultEvent>;

export type UserTrustUpdatedEvent = TypedEvent<
  [string, boolean],
  { user: string; trusted: boolean }
>;

export type UserTrustUpdatedEventFilter =
  TypedEventFilter<UserTrustUpdatedEvent>;

export interface SandclockFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SandclockFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deployDCA(
      code: BytesLike,
      salt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployVault(
      code: BytesLike,
      salt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isTrusted(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    setIsTrusted(
      user: string,
      trusted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  deployDCA(
    code: BytesLike,
    salt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployVault(
    code: BytesLike,
    salt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isTrusted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  setIsTrusted(
    user: string,
    trusted: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deployDCA(
      code: BytesLike,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deployVault(
      code: BytesLike,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isTrusted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    setIsTrusted(
      user: string,
      trusted: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NewDCA(address,uint256)"(
      dca?: string | null,
      salt?: null
    ): NewDCAEventFilter;
    NewDCA(dca?: string | null, salt?: null): NewDCAEventFilter;

    "NewVault(address,uint256)"(
      vault?: string | null,
      salt?: null
    ): NewVaultEventFilter;
    NewVault(vault?: string | null, salt?: null): NewVaultEventFilter;

    "UserTrustUpdated(address,bool)"(
      user?: string | null,
      trusted?: null
    ): UserTrustUpdatedEventFilter;
    UserTrustUpdated(
      user?: string | null,
      trusted?: null
    ): UserTrustUpdatedEventFilter;
  };

  estimateGas: {
    deployDCA(
      code: BytesLike,
      salt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployVault(
      code: BytesLike,
      salt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isTrusted(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setIsTrusted(
      user: string,
      trusted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deployDCA(
      code: BytesLike,
      salt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployVault(
      code: BytesLike,
      salt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isTrusted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setIsTrusted(
      user: string,
      trusted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

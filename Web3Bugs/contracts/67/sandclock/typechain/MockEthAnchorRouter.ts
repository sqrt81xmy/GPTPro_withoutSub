/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MockEthAnchorRouterInterface extends utils.Interface {
  functions: {
    "aUstToken()": FunctionFragment;
    "addPendingOperator(address)": FunctionFragment;
    "depositFinishResults(address)": FunctionFragment;
    "depositOperations(address)": FunctionFragment;
    "finishDepositStable(address)": FunctionFragment;
    "finishRedeemStable(address)": FunctionFragment;
    "initDepositStable(uint256)": FunctionFragment;
    "initRedeemStable(uint256)": FunctionFragment;
    "notifyDepositResult(address,uint256)": FunctionFragment;
    "notifyRedeemResult(address,uint256)": FunctionFragment;
    "pendingOperator()": FunctionFragment;
    "redeemFinishResults(address)": FunctionFragment;
    "redeemOperations(address)": FunctionFragment;
    "ustToken()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "aUstToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addPendingOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFinishResults",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositOperations",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "finishDepositStable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "finishRedeemStable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initDepositStable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initRedeemStable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "notifyDepositResult",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "notifyRedeemResult",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingOperator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemFinishResults",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemOperations",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "ustToken", values?: undefined): string;

  decodeFunctionResult(functionFragment: "aUstToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addPendingOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositFinishResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositOperations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finishDepositStable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finishRedeemStable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initDepositStable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initRedeemStable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "notifyDepositResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "notifyRedeemResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemFinishResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemOperations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ustToken", data: BytesLike): Result;

  events: {};
}

export interface MockEthAnchorRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockEthAnchorRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    aUstToken(overrides?: CallOverrides): Promise<[string]>;

    addPendingOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositFinishResults(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    depositOperations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    finishDepositStable(
      _operation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finishRedeemStable(
      _operation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initDepositStable(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initRedeemStable(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    notifyDepositResult(
      _operation: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    notifyRedeemResult(
      _operation: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pendingOperator(overrides?: CallOverrides): Promise<[string]>;

    redeemFinishResults(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    redeemOperations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ustToken(overrides?: CallOverrides): Promise<[string]>;
  };

  aUstToken(overrides?: CallOverrides): Promise<string>;

  addPendingOperator(
    _operator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositFinishResults(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  depositOperations(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  finishDepositStable(
    _operation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finishRedeemStable(
    _operation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initDepositStable(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initRedeemStable(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  notifyDepositResult(
    _operation: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  notifyRedeemResult(
    _operation: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pendingOperator(overrides?: CallOverrides): Promise<string>;

  redeemFinishResults(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  redeemOperations(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  ustToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    aUstToken(overrides?: CallOverrides): Promise<string>;

    addPendingOperator(
      _operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    depositFinishResults(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositOperations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finishDepositStable(
      _operation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    finishRedeemStable(
      _operation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initDepositStable(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    initRedeemStable(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    notifyDepositResult(
      _operation: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    notifyRedeemResult(
      _operation: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pendingOperator(overrides?: CallOverrides): Promise<string>;

    redeemFinishResults(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemOperations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ustToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    aUstToken(overrides?: CallOverrides): Promise<BigNumber>;

    addPendingOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositFinishResults(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositOperations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finishDepositStable(
      _operation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finishRedeemStable(
      _operation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initDepositStable(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initRedeemStable(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    notifyDepositResult(
      _operation: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    notifyRedeemResult(
      _operation: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pendingOperator(overrides?: CallOverrides): Promise<BigNumber>;

    redeemFinishResults(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemOperations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ustToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    aUstToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addPendingOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositFinishResults(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositOperations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finishDepositStable(
      _operation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finishRedeemStable(
      _operation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initDepositStable(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initRedeemStable(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    notifyDepositResult(
      _operation: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    notifyRedeemResult(
      _operation: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pendingOperator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemFinishResults(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeemOperations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ustToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
